// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               v5.27.0
// source: common.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "erp.api_v1";

export enum RegatePartyType {
  court = 0,
  booking = 1,
  eventBooking = 2,
  regateChart = 3,
  UNRECOGNIZED = -1,
}

export function regatePartyTypeFromJSON(object: any): RegatePartyType {
  switch (object) {
    case 0:
    case "court":
      return RegatePartyType.court;
    case 1:
    case "booking":
      return RegatePartyType.booking;
    case 2:
    case "eventBooking":
      return RegatePartyType.eventBooking;
    case 3:
    case "regateChart":
      return RegatePartyType.regateChart;
    case -1:
    case "UNRECOGNIZED":
    default:
      return RegatePartyType.UNRECOGNIZED;
  }
}

export function regatePartyTypeToJSON(object: RegatePartyType): string {
  switch (object) {
    case RegatePartyType.court:
      return "court";
    case RegatePartyType.booking:
      return "booking";
    case RegatePartyType.eventBooking:
      return "eventBooking";
    case RegatePartyType.regateChart:
      return "regateChart";
    case RegatePartyType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum PartyAdminType {
  roleTemplate = 0,
  UNRECOGNIZED = -1,
}

export function partyAdminTypeFromJSON(object: any): PartyAdminType {
  switch (object) {
    case 0:
    case "roleTemplate":
      return PartyAdminType.roleTemplate;
    case -1:
    case "UNRECOGNIZED":
    default:
      return PartyAdminType.UNRECOGNIZED;
  }
}

export function partyAdminTypeToJSON(object: PartyAdminType): string {
  switch (object) {
    case PartyAdminType.roleTemplate:
      return "roleTemplate";
    case PartyAdminType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum PartyType {
  /** supplierGroup - 1 - 1 */
  supplierGroup = 0,
  /** itemGroup - 2 - 1 */
  itemGroup = 1,
  /** warehouse - 3 - 1 */
  warehouse = 2,
  /** stockLevel - 4 - 1 */
  stockLevel = 3,
  /** item - 5 - 1 */
  item = 4,
  /** itemAttribute - 6 - 1 */
  itemAttribute = 5,
  /** itemPrice - 7 - 1 */
  itemPrice = 6,
  /** supplier - 8 - 1 */
  supplier = 7,
  /** purchaseOrder - 9 - 1 */
  purchaseOrder = 8,
  /** tax - 10 - 1 */
  tax = 9,
  /** customer - 11 - 1 */
  customer = 10,
  /** customerGroup - 12 - 1 */
  customerGroup = 11,
  /** admin - 13 - 1 */
  admin = 12,
  /** employee - 14 - 1 */
  employee = 13,
  /** client - 15 - 1 */
  client = 14,
  /** address - 16 - 1 */
  address = 15,
  /** contact - 17 - 1 */
  contact = 16,
  /** purchaseInvoice - 18 - 1 */
  purchaseInvoice = 17,
  /** company - 19 - 1 */
  company = 18,
  payment = 19,
  ledger = 20,
  purchaseReceipt = 21,
  priceList = 22,
  saleOrder = 23,
  saleInvoice = 24,
  deliveryNote = 25,
  user = 26,
  role = 27,
  journalEntry = 28,
  costCenter = 29,
  project = 30,
  stockEntry = 31,
  generalLedger = 32,
  accountReceivable = 33,
  accountPayable = 34,
  financialStatements = 35,
  serialNo = 36,
  batchBundle = 37,
  supplierQuotation = 38,
  salesQuotation = 39,
  UNRECOGNIZED = -1,
}

export function partyTypeFromJSON(object: any): PartyType {
  switch (object) {
    case 0:
    case "supplierGroup":
      return PartyType.supplierGroup;
    case 1:
    case "itemGroup":
      return PartyType.itemGroup;
    case 2:
    case "warehouse":
      return PartyType.warehouse;
    case 3:
    case "stockLevel":
      return PartyType.stockLevel;
    case 4:
    case "item":
      return PartyType.item;
    case 5:
    case "itemAttribute":
      return PartyType.itemAttribute;
    case 6:
    case "itemPrice":
      return PartyType.itemPrice;
    case 7:
    case "supplier":
      return PartyType.supplier;
    case 8:
    case "purchaseOrder":
      return PartyType.purchaseOrder;
    case 9:
    case "tax":
      return PartyType.tax;
    case 10:
    case "customer":
      return PartyType.customer;
    case 11:
    case "customerGroup":
      return PartyType.customerGroup;
    case 12:
    case "admin":
      return PartyType.admin;
    case 13:
    case "employee":
      return PartyType.employee;
    case 14:
    case "client":
      return PartyType.client;
    case 15:
    case "address":
      return PartyType.address;
    case 16:
    case "contact":
      return PartyType.contact;
    case 17:
    case "purchaseInvoice":
      return PartyType.purchaseInvoice;
    case 18:
    case "company":
      return PartyType.company;
    case 19:
    case "payment":
      return PartyType.payment;
    case 20:
    case "ledger":
      return PartyType.ledger;
    case 21:
    case "purchaseReceipt":
      return PartyType.purchaseReceipt;
    case 22:
    case "priceList":
      return PartyType.priceList;
    case 23:
    case "saleOrder":
      return PartyType.saleOrder;
    case 24:
    case "saleInvoice":
      return PartyType.saleInvoice;
    case 25:
    case "deliveryNote":
      return PartyType.deliveryNote;
    case 26:
    case "user":
      return PartyType.user;
    case 27:
    case "role":
      return PartyType.role;
    case 28:
    case "journalEntry":
      return PartyType.journalEntry;
    case 29:
    case "costCenter":
      return PartyType.costCenter;
    case 30:
    case "project":
      return PartyType.project;
    case 31:
    case "stockEntry":
      return PartyType.stockEntry;
    case 32:
    case "generalLedger":
      return PartyType.generalLedger;
    case 33:
    case "accountReceivable":
      return PartyType.accountReceivable;
    case 34:
    case "accountPayable":
      return PartyType.accountPayable;
    case 35:
    case "financialStatements":
      return PartyType.financialStatements;
    case 36:
    case "serialNo":
      return PartyType.serialNo;
    case 37:
    case "batchBundle":
      return PartyType.batchBundle;
    case 38:
    case "supplierQuotation":
      return PartyType.supplierQuotation;
    case 39:
    case "salesQuotation":
      return PartyType.salesQuotation;
    case -1:
    case "UNRECOGNIZED":
    default:
      return PartyType.UNRECOGNIZED;
  }
}

export function partyTypeToJSON(object: PartyType): string {
  switch (object) {
    case PartyType.supplierGroup:
      return "supplierGroup";
    case PartyType.itemGroup:
      return "itemGroup";
    case PartyType.warehouse:
      return "warehouse";
    case PartyType.stockLevel:
      return "stockLevel";
    case PartyType.item:
      return "item";
    case PartyType.itemAttribute:
      return "itemAttribute";
    case PartyType.itemPrice:
      return "itemPrice";
    case PartyType.supplier:
      return "supplier";
    case PartyType.purchaseOrder:
      return "purchaseOrder";
    case PartyType.tax:
      return "tax";
    case PartyType.customer:
      return "customer";
    case PartyType.customerGroup:
      return "customerGroup";
    case PartyType.admin:
      return "admin";
    case PartyType.employee:
      return "employee";
    case PartyType.client:
      return "client";
    case PartyType.address:
      return "address";
    case PartyType.contact:
      return "contact";
    case PartyType.purchaseInvoice:
      return "purchaseInvoice";
    case PartyType.company:
      return "company";
    case PartyType.payment:
      return "payment";
    case PartyType.ledger:
      return "ledger";
    case PartyType.purchaseReceipt:
      return "purchaseReceipt";
    case PartyType.priceList:
      return "priceList";
    case PartyType.saleOrder:
      return "saleOrder";
    case PartyType.saleInvoice:
      return "saleInvoice";
    case PartyType.deliveryNote:
      return "deliveryNote";
    case PartyType.user:
      return "user";
    case PartyType.role:
      return "role";
    case PartyType.journalEntry:
      return "journalEntry";
    case PartyType.costCenter:
      return "costCenter";
    case PartyType.project:
      return "project";
    case PartyType.stockEntry:
      return "stockEntry";
    case PartyType.generalLedger:
      return "generalLedger";
    case PartyType.accountReceivable:
      return "accountReceivable";
    case PartyType.accountPayable:
      return "accountPayable";
    case PartyType.financialStatements:
      return "financialStatements";
    case PartyType.serialNo:
      return "serialNo";
    case PartyType.batchBundle:
      return "batchBundle";
    case PartyType.supplierQuotation:
      return "supplierQuotation";
    case PartyType.salesQuotation:
      return "salesQuotation";
    case PartyType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum PianoPartyType {
  pianoForms = 0,
  UNRECOGNIZED = -1,
}

export function pianoPartyTypeFromJSON(object: any): PianoPartyType {
  switch (object) {
    case 0:
    case "pianoForms":
      return PianoPartyType.pianoForms;
    case -1:
    case "UNRECOGNIZED":
    default:
      return PianoPartyType.UNRECOGNIZED;
  }
}

export function pianoPartyTypeToJSON(object: PianoPartyType): string {
  switch (object) {
    case PianoPartyType.pianoForms:
      return "pianoForms";
    case PianoPartyType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum State {
  /** UNSPECIFIED - State is unspecified */
  UNSPECIFIED = 0,
  /** DRAFT - The purchase order is created but not submitted */
  DRAFT = 1,
  /** PENDING - Awaiting approval from relevant authority */
  PENDING = 2,
  /** APPROVED - The purchase order has been approved */
  APPROVED = 3,
  /** BILLED_AWAITING_PAYMENT - Invoice has been issued, awaiting payment */
  BILLED_AWAITING_PAYMENT = 4,
  /** UNPAID - Invoice exists but payment is pending */
  UNPAID = 5,
  /** PARTIALLY_PAID - Part of the purchase order amount has been paid */
  PARTIALLY_PAID = 6,
  /** SHIPPED - Goods/services have been shipped */
  SHIPPED = 7,
  /** RECEIVED - Goods/services have been received */
  RECEIVED = 8,
  /** COMPLETED - All processes finalized */
  COMPLETED = 9,
  /** CANCELLED - The purchase order has been cancelled */
  CANCELLED = 10,
  /** ON_HOLD - The purchase order is temporarily on hold */
  ON_HOLD = 11,
  /** RETURNED - Items have been returned to the vendor */
  RETURNED = 12,
  /** CLOSED - The purchase order is closed */
  CLOSED = 13,
  OVERDUE = 14,
  TO_BILL = 15,
  TO_RECEIVE = 16,
  TO_RECEIVE_AND_BILL = 17,
  SUBMITTED = 18,
  /** PAID - Invoice exists but payment is pending */
  PAID = 19,
  TO_DELIVER_AND_BILL = 20,
  TO_DELIVER = 21,
  ENABLED = 22,
  ACTIVE = 23,
  INACTIVE = 24,
  DELIVERED = 25,
  DELETED = 26,
  UNRECOGNIZED = -1,
}

export function stateFromJSON(object: any): State {
  switch (object) {
    case 0:
    case "UNSPECIFIED":
      return State.UNSPECIFIED;
    case 1:
    case "DRAFT":
      return State.DRAFT;
    case 2:
    case "PENDING":
      return State.PENDING;
    case 3:
    case "APPROVED":
      return State.APPROVED;
    case 4:
    case "BILLED_AWAITING_PAYMENT":
      return State.BILLED_AWAITING_PAYMENT;
    case 5:
    case "UNPAID":
      return State.UNPAID;
    case 6:
    case "PARTIALLY_PAID":
      return State.PARTIALLY_PAID;
    case 7:
    case "SHIPPED":
      return State.SHIPPED;
    case 8:
    case "RECEIVED":
      return State.RECEIVED;
    case 9:
    case "COMPLETED":
      return State.COMPLETED;
    case 10:
    case "CANCELLED":
      return State.CANCELLED;
    case 11:
    case "ON_HOLD":
      return State.ON_HOLD;
    case 12:
    case "RETURNED":
      return State.RETURNED;
    case 13:
    case "CLOSED":
      return State.CLOSED;
    case 14:
    case "OVERDUE":
      return State.OVERDUE;
    case 15:
    case "TO_BILL":
      return State.TO_BILL;
    case 16:
    case "TO_RECEIVE":
      return State.TO_RECEIVE;
    case 17:
    case "TO_RECEIVE_AND_BILL":
      return State.TO_RECEIVE_AND_BILL;
    case 18:
    case "SUBMITTED":
      return State.SUBMITTED;
    case 19:
    case "PAID":
      return State.PAID;
    case 20:
    case "TO_DELIVER_AND_BILL":
      return State.TO_DELIVER_AND_BILL;
    case 21:
    case "TO_DELIVER":
      return State.TO_DELIVER;
    case 22:
    case "ENABLED":
      return State.ENABLED;
    case 23:
    case "ACTIVE":
      return State.ACTIVE;
    case 24:
    case "INACTIVE":
      return State.INACTIVE;
    case 25:
    case "DELIVERED":
      return State.DELIVERED;
    case 26:
    case "DELETED":
      return State.DELETED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return State.UNRECOGNIZED;
  }
}

export function stateToJSON(object: State): string {
  switch (object) {
    case State.UNSPECIFIED:
      return "UNSPECIFIED";
    case State.DRAFT:
      return "DRAFT";
    case State.PENDING:
      return "PENDING";
    case State.APPROVED:
      return "APPROVED";
    case State.BILLED_AWAITING_PAYMENT:
      return "BILLED_AWAITING_PAYMENT";
    case State.UNPAID:
      return "UNPAID";
    case State.PARTIALLY_PAID:
      return "PARTIALLY_PAID";
    case State.SHIPPED:
      return "SHIPPED";
    case State.RECEIVED:
      return "RECEIVED";
    case State.COMPLETED:
      return "COMPLETED";
    case State.CANCELLED:
      return "CANCELLED";
    case State.ON_HOLD:
      return "ON_HOLD";
    case State.RETURNED:
      return "RETURNED";
    case State.CLOSED:
      return "CLOSED";
    case State.OVERDUE:
      return "OVERDUE";
    case State.TO_BILL:
      return "TO_BILL";
    case State.TO_RECEIVE:
      return "TO_RECEIVE";
    case State.TO_RECEIVE_AND_BILL:
      return "TO_RECEIVE_AND_BILL";
    case State.SUBMITTED:
      return "SUBMITTED";
    case State.PAID:
      return "PAID";
    case State.TO_DELIVER_AND_BILL:
      return "TO_DELIVER_AND_BILL";
    case State.TO_DELIVER:
      return "TO_DELIVER";
    case State.ENABLED:
      return "ENABLED";
    case State.ACTIVE:
      return "ACTIVE";
    case State.INACTIVE:
      return "INACTIVE";
    case State.DELIVERED:
      return "DELIVERED";
    case State.DELETED:
      return "DELETED";
    case State.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum EventState {
  UNSPECIFIED_EVENT = 0,
  /** SUBMIT_EVENT - used to transition state from DRAFT to other state */
  SUBMIT_EVENT = 1,
  /** CANCEL_EVENT - used to transition from any state to  CANCELLED */
  CANCEL_EVENT = 2,
  /** APPROVED_EVENT - used to transition from any state to APPROVED */
  APPROVED_EVENT = 3,
  /** COMPLETED_EVENT - used to transition from any state to APPROVED */
  COMPLETED_EVENT = 4,
  UNRECOGNIZED = -1,
}

export function eventStateFromJSON(object: any): EventState {
  switch (object) {
    case 0:
    case "UNSPECIFIED_EVENT":
      return EventState.UNSPECIFIED_EVENT;
    case 1:
    case "SUBMIT_EVENT":
      return EventState.SUBMIT_EVENT;
    case 2:
    case "CANCEL_EVENT":
      return EventState.CANCEL_EVENT;
    case 3:
    case "APPROVED_EVENT":
      return EventState.APPROVED_EVENT;
    case 4:
    case "COMPLETED_EVENT":
      return EventState.COMPLETED_EVENT;
    case -1:
    case "UNRECOGNIZED":
    default:
      return EventState.UNRECOGNIZED;
  }
}

export function eventStateToJSON(object: EventState): string {
  switch (object) {
    case EventState.UNSPECIFIED_EVENT:
      return "UNSPECIFIED_EVENT";
    case EventState.SUBMIT_EVENT:
      return "SUBMIT_EVENT";
    case EventState.CANCEL_EVENT:
      return "CANCEL_EVENT";
    case EventState.APPROVED_EVENT:
      return "APPROVED_EVENT";
    case EventState.COMPLETED_EVENT:
      return "COMPLETED_EVENT";
    case EventState.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum PaymentType {
  RECEIVE = 0,
  PAY = 1,
  INTERNAL_TRANSFER = 2,
  UNRECOGNIZED = -1,
}

export function paymentTypeFromJSON(object: any): PaymentType {
  switch (object) {
    case 0:
    case "RECEIVE":
      return PaymentType.RECEIVE;
    case 1:
    case "PAY":
      return PaymentType.PAY;
    case 2:
    case "INTERNAL_TRANSFER":
      return PaymentType.INTERNAL_TRANSFER;
    case -1:
    case "UNRECOGNIZED":
    default:
      return PaymentType.UNRECOGNIZED;
  }
}

export function paymentTypeToJSON(object: PaymentType): string {
  switch (object) {
    case PaymentType.RECEIVE:
      return "RECEIVE";
    case PaymentType.PAY:
      return "PAY";
    case PaymentType.INTERNAL_TRANSFER:
      return "INTERNAL_TRANSFER";
    case PaymentType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Enum for different types of accounts */
export enum AccountType {
  /** ASSET - Asset Accounts */
  ASSET = 0,
  /** CASH - Cash or cash equivalents */
  CASH = 1,
  /** BANK - Bank accounts (Cash in banks) */
  BANK = 2,
  /** RECEIVABLE - Amounts owed by customers */
  RECEIVABLE = 3,
  /** INVENTORY - Goods held for resale */
  INVENTORY = 4,
  /** PREPAID_EXPENSES - Expenses paid in advance */
  PREPAID_EXPENSES = 5,
  /** PROPERTY_PLANT_EQUIPMENT - Physical fixed assets (PP&E) */
  PROPERTY_PLANT_EQUIPMENT = 6,
  /** LIABILITY - Liability Accounts */
  LIABILITY = 7,
  /** PAYABLE - Amounts owed to suppliers */
  PAYABLE = 8,
  /** UNEARNED_REVENUE - Income received but not yet earned */
  UNEARNED_REVENUE = 9,
  /** LOAN_PAYABLE - Loan obligations */
  LOAN_PAYABLE = 10,
  /** EQUITY - Equity Accounts */
  EQUITY = 11,
  /** COMMON_STOCK - Equity from common stock issued */
  COMMON_STOCK = 12,
  /** RETAINED_EARNINGS - Accumulated profits */
  RETAINED_EARNINGS = 13,
  /** DIVIDENDS_PAID - Dividends issued to shareholders */
  DIVIDENDS_PAID = 14,
  /** REVENUE - Revenue Accounts */
  REVENUE = 15,
  /** SALES_REVENUE - Revenue from product or service sales */
  SALES_REVENUE = 16,
  /** SERVICE_REVENUE - Revenue from services provided */
  SERVICE_REVENUE = 17,
  /** OTHER_REVENUE - Non-primary revenue (e.g., interest) */
  OTHER_REVENUE = 18,
  /** EXPENSE - Expense Accounts */
  EXPENSE = 19,
  /** COST_OF_GOODS_SOLD - Direct costs of goods or services sold */
  COST_OF_GOODS_SOLD = 20,
  /** STOCK_ADJUSTMENT - Stock adjustment (inventory corrections, etc.) */
  STOCK_ADJUSTMENT = 21,
  /** OPERATING_EXPENSES - Operating costs (rent, salaries, etc.) */
  OPERATING_EXPENSES = 22,
  /** DEPRECIATION_EXPENSE - Depreciation of assets */
  DEPRECIATION_EXPENSE = 23,
  /** INTEREST_EXPENSE - Interest payments */
  INTEREST_EXPENSE = 24,
  /** TAX_EXPENSE - Taxes paid */
  TAX_EXPENSE = 25,
  /** ACCUMULATED_DEPRECIATION - Contra Accounts */
  ACCUMULATED_DEPRECIATION = 26,
  /** ALLOWANCE_FOR_DOUBTFUL_ACCOUNTS - Estimate of uncollectible receivables */
  ALLOWANCE_FOR_DOUBTFUL_ACCOUNTS = 27,
  /** SALES_DISCOUNTS - Discounts offered on sales */
  SALES_DISCOUNTS = 28,
  /** SALES_RETURNS_AND_ALLOWANCES - Returns and allowances granted to customers */
  SALES_RETURNS_AND_ALLOWANCES = 29,
  /** ASSET_RECEIVED_BUT_NOT_BILLED - Other specific types */
  ASSET_RECEIVED_BUT_NOT_BILLED = 30,
  /** OTHER_ASSET - Miscellaneous or intangible assets */
  OTHER_ASSET = 31,
  /** OTHER_LIABILITY - Miscellaneous liabilities */
  OTHER_LIABILITY = 32,
  UNRECOGNIZED = -1,
}

export function accountTypeFromJSON(object: any): AccountType {
  switch (object) {
    case 0:
    case "ASSET":
      return AccountType.ASSET;
    case 1:
    case "CASH":
      return AccountType.CASH;
    case 2:
    case "BANK":
      return AccountType.BANK;
    case 3:
    case "RECEIVABLE":
      return AccountType.RECEIVABLE;
    case 4:
    case "INVENTORY":
      return AccountType.INVENTORY;
    case 5:
    case "PREPAID_EXPENSES":
      return AccountType.PREPAID_EXPENSES;
    case 6:
    case "PROPERTY_PLANT_EQUIPMENT":
      return AccountType.PROPERTY_PLANT_EQUIPMENT;
    case 7:
    case "LIABILITY":
      return AccountType.LIABILITY;
    case 8:
    case "PAYABLE":
      return AccountType.PAYABLE;
    case 9:
    case "UNEARNED_REVENUE":
      return AccountType.UNEARNED_REVENUE;
    case 10:
    case "LOAN_PAYABLE":
      return AccountType.LOAN_PAYABLE;
    case 11:
    case "EQUITY":
      return AccountType.EQUITY;
    case 12:
    case "COMMON_STOCK":
      return AccountType.COMMON_STOCK;
    case 13:
    case "RETAINED_EARNINGS":
      return AccountType.RETAINED_EARNINGS;
    case 14:
    case "DIVIDENDS_PAID":
      return AccountType.DIVIDENDS_PAID;
    case 15:
    case "REVENUE":
      return AccountType.REVENUE;
    case 16:
    case "SALES_REVENUE":
      return AccountType.SALES_REVENUE;
    case 17:
    case "SERVICE_REVENUE":
      return AccountType.SERVICE_REVENUE;
    case 18:
    case "OTHER_REVENUE":
      return AccountType.OTHER_REVENUE;
    case 19:
    case "EXPENSE":
      return AccountType.EXPENSE;
    case 20:
    case "COST_OF_GOODS_SOLD":
      return AccountType.COST_OF_GOODS_SOLD;
    case 21:
    case "STOCK_ADJUSTMENT":
      return AccountType.STOCK_ADJUSTMENT;
    case 22:
    case "OPERATING_EXPENSES":
      return AccountType.OPERATING_EXPENSES;
    case 23:
    case "DEPRECIATION_EXPENSE":
      return AccountType.DEPRECIATION_EXPENSE;
    case 24:
    case "INTEREST_EXPENSE":
      return AccountType.INTEREST_EXPENSE;
    case 25:
    case "TAX_EXPENSE":
      return AccountType.TAX_EXPENSE;
    case 26:
    case "ACCUMULATED_DEPRECIATION":
      return AccountType.ACCUMULATED_DEPRECIATION;
    case 27:
    case "ALLOWANCE_FOR_DOUBTFUL_ACCOUNTS":
      return AccountType.ALLOWANCE_FOR_DOUBTFUL_ACCOUNTS;
    case 28:
    case "SALES_DISCOUNTS":
      return AccountType.SALES_DISCOUNTS;
    case 29:
    case "SALES_RETURNS_AND_ALLOWANCES":
      return AccountType.SALES_RETURNS_AND_ALLOWANCES;
    case 30:
    case "ASSET_RECEIVED_BUT_NOT_BILLED":
      return AccountType.ASSET_RECEIVED_BUT_NOT_BILLED;
    case 31:
    case "OTHER_ASSET":
      return AccountType.OTHER_ASSET;
    case 32:
    case "OTHER_LIABILITY":
      return AccountType.OTHER_LIABILITY;
    case -1:
    case "UNRECOGNIZED":
    default:
      return AccountType.UNRECOGNIZED;
  }
}

export function accountTypeToJSON(object: AccountType): string {
  switch (object) {
    case AccountType.ASSET:
      return "ASSET";
    case AccountType.CASH:
      return "CASH";
    case AccountType.BANK:
      return "BANK";
    case AccountType.RECEIVABLE:
      return "RECEIVABLE";
    case AccountType.INVENTORY:
      return "INVENTORY";
    case AccountType.PREPAID_EXPENSES:
      return "PREPAID_EXPENSES";
    case AccountType.PROPERTY_PLANT_EQUIPMENT:
      return "PROPERTY_PLANT_EQUIPMENT";
    case AccountType.LIABILITY:
      return "LIABILITY";
    case AccountType.PAYABLE:
      return "PAYABLE";
    case AccountType.UNEARNED_REVENUE:
      return "UNEARNED_REVENUE";
    case AccountType.LOAN_PAYABLE:
      return "LOAN_PAYABLE";
    case AccountType.EQUITY:
      return "EQUITY";
    case AccountType.COMMON_STOCK:
      return "COMMON_STOCK";
    case AccountType.RETAINED_EARNINGS:
      return "RETAINED_EARNINGS";
    case AccountType.DIVIDENDS_PAID:
      return "DIVIDENDS_PAID";
    case AccountType.REVENUE:
      return "REVENUE";
    case AccountType.SALES_REVENUE:
      return "SALES_REVENUE";
    case AccountType.SERVICE_REVENUE:
      return "SERVICE_REVENUE";
    case AccountType.OTHER_REVENUE:
      return "OTHER_REVENUE";
    case AccountType.EXPENSE:
      return "EXPENSE";
    case AccountType.COST_OF_GOODS_SOLD:
      return "COST_OF_GOODS_SOLD";
    case AccountType.STOCK_ADJUSTMENT:
      return "STOCK_ADJUSTMENT";
    case AccountType.OPERATING_EXPENSES:
      return "OPERATING_EXPENSES";
    case AccountType.DEPRECIATION_EXPENSE:
      return "DEPRECIATION_EXPENSE";
    case AccountType.INTEREST_EXPENSE:
      return "INTEREST_EXPENSE";
    case AccountType.TAX_EXPENSE:
      return "TAX_EXPENSE";
    case AccountType.ACCUMULATED_DEPRECIATION:
      return "ACCUMULATED_DEPRECIATION";
    case AccountType.ALLOWANCE_FOR_DOUBTFUL_ACCOUNTS:
      return "ALLOWANCE_FOR_DOUBTFUL_ACCOUNTS";
    case AccountType.SALES_DISCOUNTS:
      return "SALES_DISCOUNTS";
    case AccountType.SALES_RETURNS_AND_ALLOWANCES:
      return "SALES_RETURNS_AND_ALLOWANCES";
    case AccountType.ASSET_RECEIVED_BUT_NOT_BILLED:
      return "ASSET_RECEIVED_BUT_NOT_BILLED";
    case AccountType.OTHER_ASSET:
      return "OTHER_ASSET";
    case AccountType.OTHER_LIABILITY:
      return "OTHER_LIABILITY";
    case AccountType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum ItemLineType {
  ITEM_LINE_ORDER = 0,
  ITEM_LINE_INVOICE = 1,
  ITEM_LINE_RECEIPT = 2,
  DELIVERY_LINE_ITEM = 3,
  ITEM_LINE_STOCK_ENTRY = 4,
  QUOTATION_LINE_ITEM = 5,
  UNRECOGNIZED = -1,
}

export function itemLineTypeFromJSON(object: any): ItemLineType {
  switch (object) {
    case 0:
    case "ITEM_LINE_ORDER":
      return ItemLineType.ITEM_LINE_ORDER;
    case 1:
    case "ITEM_LINE_INVOICE":
      return ItemLineType.ITEM_LINE_INVOICE;
    case 2:
    case "ITEM_LINE_RECEIPT":
      return ItemLineType.ITEM_LINE_RECEIPT;
    case 3:
    case "DELIVERY_LINE_ITEM":
      return ItemLineType.DELIVERY_LINE_ITEM;
    case 4:
    case "ITEM_LINE_STOCK_ENTRY":
      return ItemLineType.ITEM_LINE_STOCK_ENTRY;
    case 5:
    case "QUOTATION_LINE_ITEM":
      return ItemLineType.QUOTATION_LINE_ITEM;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ItemLineType.UNRECOGNIZED;
  }
}

export function itemLineTypeToJSON(object: ItemLineType): string {
  switch (object) {
    case ItemLineType.ITEM_LINE_ORDER:
      return "ITEM_LINE_ORDER";
    case ItemLineType.ITEM_LINE_INVOICE:
      return "ITEM_LINE_INVOICE";
    case ItemLineType.ITEM_LINE_RECEIPT:
      return "ITEM_LINE_RECEIPT";
    case ItemLineType.DELIVERY_LINE_ITEM:
      return "DELIVERY_LINE_ITEM";
    case ItemLineType.ITEM_LINE_STOCK_ENTRY:
      return "ITEM_LINE_STOCK_ENTRY";
    case ItemLineType.QUOTATION_LINE_ITEM:
      return "QUOTATION_LINE_ITEM";
    case ItemLineType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum TaxChargeLineType {
  ON_NET_TOTAL = 0,
  FIXED_AMOUNT = 1,
  UNRECOGNIZED = -1,
}

export function taxChargeLineTypeFromJSON(object: any): TaxChargeLineType {
  switch (object) {
    case 0:
    case "ON_NET_TOTAL":
      return TaxChargeLineType.ON_NET_TOTAL;
    case 1:
    case "FIXED_AMOUNT":
      return TaxChargeLineType.FIXED_AMOUNT;
    case -1:
    case "UNRECOGNIZED":
    default:
      return TaxChargeLineType.UNRECOGNIZED;
  }
}

export function taxChargeLineTypeToJSON(object: TaxChargeLineType): string {
  switch (object) {
    case TaxChargeLineType.ON_NET_TOTAL:
      return "ON_NET_TOTAL";
    case TaxChargeLineType.FIXED_AMOUNT:
      return "FIXED_AMOUNT";
    case TaxChargeLineType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum BookingType {
  LOCAL_BOOKING = 0,
  EVENT_BOOKING = 1,
  UNRECOGNIZED = -1,
}

export function bookingTypeFromJSON(object: any): BookingType {
  switch (object) {
    case 0:
    case "LOCAL_BOOKING":
      return BookingType.LOCAL_BOOKING;
    case 1:
    case "EVENT_BOOKING":
      return BookingType.EVENT_BOOKING;
    case -1:
    case "UNRECOGNIZED":
    default:
      return BookingType.UNRECOGNIZED;
  }
}

export function bookingTypeToJSON(object: BookingType): string {
  switch (object) {
    case BookingType.LOCAL_BOOKING:
      return "LOCAL_BOOKING";
    case BookingType.EVENT_BOOKING:
      return "EVENT_BOOKING";
    case BookingType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum ActivityType {
  CREATE = 0,
  EDIT = 1,
  DELETE = 2,
  COMMENT = 3,
  EDIT_PAID_AMOUT = 4,
  UPDATE_STATUS = 5,
  UNRECOGNIZED = -1,
}

export function activityTypeFromJSON(object: any): ActivityType {
  switch (object) {
    case 0:
    case "CREATE":
      return ActivityType.CREATE;
    case 1:
    case "EDIT":
      return ActivityType.EDIT;
    case 2:
    case "DELETE":
      return ActivityType.DELETE;
    case 3:
    case "COMMENT":
      return ActivityType.COMMENT;
    case 4:
    case "EDIT_PAID_AMOUT":
      return ActivityType.EDIT_PAID_AMOUT;
    case 5:
    case "UPDATE_STATUS":
      return ActivityType.UPDATE_STATUS;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ActivityType.UNRECOGNIZED;
  }
}

export function activityTypeToJSON(object: ActivityType): string {
  switch (object) {
    case ActivityType.CREATE:
      return "CREATE";
    case ActivityType.EDIT:
      return "EDIT";
    case ActivityType.DELETE:
      return "DELETE";
    case ActivityType.COMMENT:
      return "COMMENT";
    case ActivityType.EDIT_PAID_AMOUT:
      return "EDIT_PAID_AMOUT";
    case ActivityType.UPDATE_STATUS:
      return "UPDATE_STATUS";
    case ActivityType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum TimeUnit {
  hour = 0,
  day = 1,
  week = 2,
  month = 3,
  year = 4,
  UNRECOGNIZED = -1,
}

export function timeUnitFromJSON(object: any): TimeUnit {
  switch (object) {
    case 0:
    case "hour":
      return TimeUnit.hour;
    case 1:
    case "day":
      return TimeUnit.day;
    case 2:
    case "week":
      return TimeUnit.week;
    case 3:
    case "month":
      return TimeUnit.month;
    case 4:
    case "year":
      return TimeUnit.year;
    case -1:
    case "UNRECOGNIZED":
    default:
      return TimeUnit.UNRECOGNIZED;
  }
}

export function timeUnitToJSON(object: TimeUnit): string {
  switch (object) {
    case TimeUnit.hour:
      return "hour";
    case TimeUnit.day:
      return "day";
    case TimeUnit.week:
      return "week";
    case TimeUnit.month:
      return "month";
    case TimeUnit.year:
      return "year";
    case TimeUnit.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum ChartType {
  INCOME = 0,
  INCOME_AVG = 1,
  BOOKING_HOUR = 2,
  BOOKING_HOUR_AVG = 3,
  UNRECOGNIZED = -1,
}

export function chartTypeFromJSON(object: any): ChartType {
  switch (object) {
    case 0:
    case "INCOME":
      return ChartType.INCOME;
    case 1:
    case "INCOME_AVG":
      return ChartType.INCOME_AVG;
    case 2:
    case "BOOKING_HOUR":
      return ChartType.BOOKING_HOUR;
    case 3:
    case "BOOKING_HOUR_AVG":
      return ChartType.BOOKING_HOUR_AVG;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ChartType.UNRECOGNIZED;
  }
}

export function chartTypeToJSON(object: ChartType): string {
  switch (object) {
    case ChartType.INCOME:
      return "INCOME";
    case ChartType.INCOME_AVG:
      return "INCOME_AVG";
    case ChartType.BOOKING_HOUR:
      return "BOOKING_HOUR";
    case ChartType.BOOKING_HOUR_AVG:
      return "BOOKING_HOUR_AVG";
    case ChartType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum Module {
  accounting = 0,
  stock = 1,
  selling = 2,
  buying = 3,
  UNRECOGNIZED = -1,
}

export function moduleFromJSON(object: any): Module {
  switch (object) {
    case 0:
    case "accounting":
      return Module.accounting;
    case 1:
    case "stock":
      return Module.stock;
    case 2:
    case "selling":
      return Module.selling;
    case 3:
    case "buying":
      return Module.buying;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Module.UNRECOGNIZED;
  }
}

export function moduleToJSON(object: Module): string {
  switch (object) {
    case Module.accounting:
      return "accounting";
    case Module.stock:
      return "stock";
    case Module.selling:
      return "selling";
    case Module.buying:
      return "buying";
    case Module.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum VoucherSubtype {
  creditNote = 0,
  debitNote = 1,
  receive = 2,
  pay = 3,
  UNRECOGNIZED = -1,
}

export function voucherSubtypeFromJSON(object: any): VoucherSubtype {
  switch (object) {
    case 0:
    case "creditNote":
      return VoucherSubtype.creditNote;
    case 1:
    case "debitNote":
      return VoucherSubtype.debitNote;
    case 2:
    case "receive":
      return VoucherSubtype.receive;
    case 3:
    case "pay":
      return VoucherSubtype.pay;
    case -1:
    case "UNRECOGNIZED":
    default:
      return VoucherSubtype.UNRECOGNIZED;
  }
}

export function voucherSubtypeToJSON(object: VoucherSubtype): string {
  switch (object) {
    case VoucherSubtype.creditNote:
      return "creditNote";
    case VoucherSubtype.debitNote:
      return "debitNote";
    case VoucherSubtype.receive:
      return "receive";
    case VoucherSubtype.pay:
      return "pay";
    case VoucherSubtype.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum FinacialReport {
  BALANCE_SHEET = 0,
  PROFIT_AND_LOSS = 1,
  CASH_FLOW = 2,
  UNRECOGNIZED = -1,
}

export function finacialReportFromJSON(object: any): FinacialReport {
  switch (object) {
    case 0:
    case "BALANCE_SHEET":
      return FinacialReport.BALANCE_SHEET;
    case 1:
    case "PROFIT_AND_LOSS":
      return FinacialReport.PROFIT_AND_LOSS;
    case 2:
    case "CASH_FLOW":
      return FinacialReport.CASH_FLOW;
    case -1:
    case "UNRECOGNIZED":
    default:
      return FinacialReport.UNRECOGNIZED;
  }
}

export function finacialReportToJSON(object: FinacialReport): string {
  switch (object) {
    case FinacialReport.BALANCE_SHEET:
      return "BALANCE_SHEET";
    case FinacialReport.PROFIT_AND_LOSS:
      return "PROFIT_AND_LOSS";
    case FinacialReport.CASH_FLOW:
      return "CASH_FLOW";
    case FinacialReport.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum CashFlowSection {
  OPERATING = 0,
  INVESTING = 1,
  FINANCING = 2,
  UNRECOGNIZED = -1,
}

export function cashFlowSectionFromJSON(object: any): CashFlowSection {
  switch (object) {
    case 0:
    case "OPERATING":
      return CashFlowSection.OPERATING;
    case 1:
    case "INVESTING":
      return CashFlowSection.INVESTING;
    case 2:
    case "FINANCING":
      return CashFlowSection.FINANCING;
    case -1:
    case "UNRECOGNIZED":
    default:
      return CashFlowSection.UNRECOGNIZED;
  }
}

export function cashFlowSectionToJSON(object: CashFlowSection): string {
  switch (object) {
    case CashFlowSection.OPERATING:
      return "OPERATING";
    case CashFlowSection.INVESTING:
      return "INVESTING";
    case CashFlowSection.FINANCING:
      return "FINANCING";
    case CashFlowSection.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum InvetoryValuation {
  FIFO = 0,
  LIFO = 1,
  WEIGHTED_AVERAGE_COST = 2,
  UNRECOGNIZED = -1,
}

export function invetoryValuationFromJSON(object: any): InvetoryValuation {
  switch (object) {
    case 0:
    case "FIFO":
      return InvetoryValuation.FIFO;
    case 1:
    case "LIFO":
      return InvetoryValuation.LIFO;
    case 2:
    case "WEIGHTED_AVERAGE_COST":
      return InvetoryValuation.WEIGHTED_AVERAGE_COST;
    case -1:
    case "UNRECOGNIZED":
    default:
      return InvetoryValuation.UNRECOGNIZED;
  }
}

export function invetoryValuationToJSON(object: InvetoryValuation): string {
  switch (object) {
    case InvetoryValuation.FIFO:
      return "FIFO";
    case InvetoryValuation.LIFO:
      return "LIFO";
    case InvetoryValuation.WEIGHTED_AVERAGE_COST:
      return "WEIGHTED_AVERAGE_COST";
    case InvetoryValuation.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum StockEntryType {
  MATERIAL_ISSUE = 0,
  MATERIAL_RECEIPT = 1,
  MATERIAL_TRANSFER = 2,
  UNRECOGNIZED = -1,
}

export function stockEntryTypeFromJSON(object: any): StockEntryType {
  switch (object) {
    case 0:
    case "MATERIAL_ISSUE":
      return StockEntryType.MATERIAL_ISSUE;
    case 1:
    case "MATERIAL_RECEIPT":
      return StockEntryType.MATERIAL_RECEIPT;
    case 2:
    case "MATERIAL_TRANSFER":
      return StockEntryType.MATERIAL_TRANSFER;
    case -1:
    case "UNRECOGNIZED":
    default:
      return StockEntryType.UNRECOGNIZED;
  }
}

export function stockEntryTypeToJSON(object: StockEntryType): string {
  switch (object) {
    case StockEntryType.MATERIAL_ISSUE:
      return "MATERIAL_ISSUE";
    case StockEntryType.MATERIAL_RECEIPT:
      return "MATERIAL_RECEIPT";
    case StockEntryType.MATERIAL_TRANSFER:
      return "MATERIAL_TRANSFER";
    case StockEntryType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum JournalEntryType {
  cashEntry = 0,
  bankEntry = 1,
  contraEntry = 2,
  creditCardEntry = 3,
  UNRECOGNIZED = -1,
}

export function journalEntryTypeFromJSON(object: any): JournalEntryType {
  switch (object) {
    case 0:
    case "cashEntry":
      return JournalEntryType.cashEntry;
    case 1:
    case "bankEntry":
      return JournalEntryType.bankEntry;
    case 2:
    case "contraEntry":
      return JournalEntryType.contraEntry;
    case 3:
    case "creditCardEntry":
      return JournalEntryType.creditCardEntry;
    case -1:
    case "UNRECOGNIZED":
    default:
      return JournalEntryType.UNRECOGNIZED;
  }
}

export function journalEntryTypeToJSON(object: JournalEntryType): string {
  switch (object) {
    case JournalEntryType.cashEntry:
      return "cashEntry";
    case JournalEntryType.bankEntry:
      return "bankEntry";
    case JournalEntryType.contraEntry:
      return "contraEntry";
    case JournalEntryType.creditCardEntry:
      return "creditCardEntry";
    case JournalEntryType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface Result {
  message: string;
}

function createBaseResult(): Result {
  return { message: "" };
}

export const Result: MessageFns<Result> = {
  encode(message: Result, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.message !== "") {
      writer.uint32(10).string(message.message);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Result {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResult();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.message = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Result {
    return { message: isSet(object.message) ? globalThis.String(object.message) : "" };
  },

  toJSON(message: Result): unknown {
    const obj: any = {};
    if (message.message !== "") {
      obj.message = message.message;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Result>, I>>(base?: I): Result {
    return Result.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Result>, I>>(object: I): Result {
    const message = createBaseResult();
    message.message = object.message ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
