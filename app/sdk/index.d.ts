/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/account": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get user account */
        get: operations["get-account"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/account/change/password": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Change Password */
        post: operations["change-password"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/account/password": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Update password */
        put: operations["update-password"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/account/reset/password": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Reset Password */
        post: operations["reset-password"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/account/sessions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get user sessions */
        get: operations["get-sessions"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/account/sign-in": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Sign in a user */
        post: operations["sign-in"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/accounting/report/account-payable": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Account Payable */
        get: operations["get-account-payable"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/accounting/report/account-payable/sumary": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Account Payable Sumary */
        get: operations["get-account-payable-sumary"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/accounting/report/general": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get General Ledger */
        get: operations["get-general-ledger"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/accounting/tax": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Taxes */
        get: operations["get-taxes"];
        put?: never;
        /** Create Tax */
        post: operations["create-tax"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/accounting/tax/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Tax Detail */
        get: operations["get-tax-detail"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/activity": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Edit Comment Activity */
        put: operations["edit-activity-comment"];
        post?: never;
        /** Delete Comment Activity */
        delete: operations["delete-activity-comment"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/activity/comment": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create Comment Activity */
        post: operations["activity-comment"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/admin/company": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Admin Companies */
        get: operations["a-companies"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/admin/company/detail/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Admin Company Detail */
        get: operations["a-company-detail"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/admin/company/modules": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Admin Company Modules */
        get: operations["a-company-modules"];
        put?: never;
        /** Add Company Modules */
        post: operations["a-add-company-modules"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/admin/company/users": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Company Users */
        get: operations["a-company-users"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth-admin/sign-in": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Sign in user admin */
        post: operations["sign-in-admin"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/client": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get client Profile */
        get: operations["get-client-profile"];
        /** Update client Profile */
        put: operations["update-client-profile"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/company": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get User companies */
        get: operations["companies"];
        put?: never;
        /** Create Company */
        post: operations["create-company"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/company/detail/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get company Detial */
        get: operations["company-detail"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/company/user/companies": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get user companies */
        get: operations["user-companies"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/company/valid/parent/companies": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Valid Parent Companies */
        get: operations["valid-parent-companies"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/company/{uuid}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get company by uuid */
        get: operations["get-company-by-uuid"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/court": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** get courts */
        get: operations["get courts"];
        put?: never;
        /** Create Court */
        post: operations["create court"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/court-rate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Update Court Rates */
        post: operations["update-court-rates"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/court-rate/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Court Rates */
        get: operations["get-court-rates"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/court/detail/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Create User */
        get: operations["get court"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cuatropf/subscription/{companyUuid}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Cuatropf Subscription */
        post: operations["cuatropf-subscription"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/currency": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get currencies */
        get: operations["get currencies"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/customer": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieve customers */
        get: operations["get customers"];
        put?: never;
        /** Create customer */
        post: operations["create customer"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/customer/customer-types": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Customer types */
        get: operations["customer types"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/customer/detail/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieve customer */
        get: operations["get customer"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/greeting/{name}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get greeting by name */
        get: operations["get-greeting-by-name"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/group": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create Group */
        post: operations["create group"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/group/descendents/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get group descendents */
        get: operations["get group descendents"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/group/detail/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieve group */
        get: operations["get group"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/group/{party}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieve groups by party code */
        get: operations["get groups by party code"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/invoice": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create Invoice */
        post: operations["create invoice"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/invoice/purchase/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Invoice
         * @description Get invoice
         */
        get: operations["get invoice"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/invoice/update-state": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Update Invoice State */
        put: operations["update invoice state"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/invoice/{party}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Invoices */
        get: operations["get invoices"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/item-line": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** EditItemLine */
        put: operations["update-item-line"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ledger": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Accounts */
        get: operations["get-acconts"];
        put?: never;
        /** Create Ledger */
        post: operations["create-ledger"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ledger/detail/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Ledger Detail */
        get: operations["get-ledger-detail"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ledger/general": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get General Ledger */
        get: operations["get-general-ledger"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ledger/view/tree": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Ledgers Tree View */
        get: operations["get-ledgers-tree-view"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/order": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create Order */
        post: operations["create order"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/order/detail/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieve order */
        get: operations["get order"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/order/update-status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Update Order Status */
        put: operations["update-order-status"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/order/{party}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieve orders */
        get: operations["get orders"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/party/address": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Addresses */
        get: operations["get addresses"];
        put?: never;
        /** Create Address */
        post: operations["create address"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/party/address/detail/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Address */
        get: operations["get address"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/party/address/references": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Address References */
        get: operations["get address references"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/party/connections/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Party connections */
        get: operations["get party connections"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/party/contact": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Contacts */
        get: operations["get contacts"];
        put?: never;
        /** Create Contact */
        post: operations["create contact"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/party/contact/detail/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Contact */
        get: operations["get contact"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/party/parties-by-references/{party_type}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Party by reference
         * @description Retrieve parties by party type.
         */
        get: operations["get party by reference"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/party/references": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Party references */
        get: operations["get party references"];
        put?: never;
        /** add party reference */
        post: operations["add party reference"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/party/references/type": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Party type references
         * @description Retrieve the allowed party types for reference
         */
        get: operations["get party type references"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/party/type/users": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Party User Types */
        get: operations["get party user types"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/payment": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Payments */
        get: operations["get-payments"];
        put?: never;
        /** Create Payment */
        post: operations["create-payment"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/payment/associated-actions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Payment Actions */
        get: operations["get payment actions"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/payment/detail/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Payment Detial */
        get: operations["get payment detail"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/payment/parties": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Parties Type */
        get: operations["get-parties-type"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/payment/update-state": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Update Payment State */
        put: operations["update payment state"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/pianoForms": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Piano Forms */
        get: operations["get piano forms"];
        put?: never;
        /** Create Piano Form */
        post: operations["create piano form"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/pianoForms/export": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** export data */
        post: operations["export data"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/pianoForms/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Piano Form */
        get: operations["get piano form"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/plugin": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get available plugins */
        get: operations["plugins"];
        put?: never;
        /** Add plugin */
        post: operations["add-plugin"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/plugin/{plugin}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get plugin from company */
        get: operations["get-plugin"];
        /** Update plugin credentials */
        put: operations["update-plugin-credentials"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/purchase/order/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create purchase order */
        post: operations["create purchase order"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/receipt": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create Receipt` */
        post: operations["create-receipt"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/receipt/detail/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Receipt Detail */
        get: operations["get-receipt-detail"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/receipt/update-state": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Update Receipt State */
        put: operations["update-receipt-state"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/receipt/{party}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Receipts */
        get: operations["get-receipts"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/regate/booking": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Bookings */
        get: operations["get-bookings"];
        put?: never;
        /** Create Booking */
        post: operations["create booking"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/regate/booking/detail/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Booking */
        get: operations["get-booking"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/regate/booking/paid-amount": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Update Paid Amount */
        put: operations["update-paid-amount"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/regate/booking/reschedule": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Booking reschedule */
        put: operations["booking-reschedule"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/regate/booking/update-status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Update Booking Status */
        put: operations["update-booking-status"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/regate/booking/validate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Validate Booking */
        post: operations["validate-booking"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/regate/chart": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Get Chart Dashboard Data */
        post: operations["get-chart-dashboard-data"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/regate/chart/{chart}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Get Chart Data */
        post: operations["get-chart-data"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/regate/event": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Event Booking */
        get: operations["get-event-bookings"];
        put?: never;
        /** Create Event */
        post: operations["create-event-booking"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/regate/event/detail/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Event Booking */
        get: operations["get-event-booking"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/role": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get roles */
        get: operations["get roles"];
        put?: never;
        /** Create Role */
        post: operations["create role"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/role/detail/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get role */
        get: operations["get role"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/role/entity-actions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get entity actions */
        get: operations["get entity actions"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/role/permision/actions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Update Permission Actions */
        post: operations["update role permision action"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/role/role-definitions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get role definitions */
        get: operations["get role definitions"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/stock-ledger/balance": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Stock Balance Report */
        get: operations["get-stock-balance-report"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/stock-ledger/report": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Stock Ledger Report */
        get: operations["get-stock_ledger-report"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/stock/item": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Items
         * @description Retrieve Items
         */
        get: operations["get-items"];
        /** Update item */
        put: operations["update-item"];
        /** Create item */
        post: operations["create-item"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/stock/item/item-attribute": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Item attributes */
        get: operations["item-attributes"];
        put?: never;
        /** Create item attribute */
        post: operations["create-item-attribute"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/stock/item/item-attribute/item-attribute-value": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Update Item Attribute Value */
        put: operations["update-item-attribute-value"];
        /** Create Item Attribute Value */
        post: operations["create-item-attribute-value"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/stock/item/item-attribute/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Item attribute */
        get: operations["item-attribute"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/stock/item/item-price": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Item Prices
         * @description Retrieve Item Prices
         */
        get: operations["get-item-prices"];
        /** Update item price */
        put: operations["update-item-price"];
        /** Create item price */
        post: operations["create-item-price"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/stock/item/item-price/associated-actions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Associated Actions */
        get: operations["associated-actions"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/stock/item/item-price/detail/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Item Price
         * @description Retrieve Item Price Datail
         */
        get: operations["get-item-price-detail"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/stock/item/item-price/order": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Item Price For Order */
        get: operations["get-item-prices-for-order"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/stock/item/item-price/{itemCode}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get List by item
         * @description Retrieve Item Prices by Item Code
         */
        get: operations["get-list-by-item"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/stock/item/level": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Edit item to warehouse */
        put: operations["edit-item-to-warehouse"];
        /** Add item to warehouse */
        post: operations["add-item-to-warehouse"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/stock/item/level/item": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieve item stock levels */
        get: operations["get-item-stock-levels"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/stock/item/level/warehouse": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieve warehouse stock levels */
        get: operations["get-warehouse-stock-levels"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/stock/item/price-list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieve Price List items */
        get: operations["get-price-lists"];
        /** Update item price list */
        put: operations["update-item-price-list"];
        /** Create price list */
        post: operations["create-price-list"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/stock/item/price-list/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieve Price List Detail */
        get: operations["get-price-list-detail"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/stock/item/variant": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get variant from items */
        get: operations["get-variant-from-item"];
        put?: never;
        /** Create item variant */
        post: operations["create-item-variant"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/stock/item/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieve item detail base on code */
        get: operations["get-item-detail"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/stock/warehouse": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Warehouses */
        get: operations["get-warehouses"];
        put?: never;
        /** Create Warehouse */
        post: operations["create-warehouse"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/stock/warehouse/detail/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Warehouse Detail */
        get: operations["get-warehouse-detail"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/stock/warehouse/view/tree": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Warehouses Tree View */
        get: operations["get-warehouses-tree-view"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/supplier": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieve suppliers */
        get: operations["get suppliers"];
        put?: never;
        /** Create supplier */
        post: operations["create supplier"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/supplier/detail/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieve supplier */
        get: operations["get supplier"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/uom": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieve UOMs (Units of Measure) */
        get: operations["uom"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/user": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create User */
        post: operations["create user"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/user/profile": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get company profile users */
        get: operations["get company user profiles"];
        put?: never;
        /** Create User */
        post: operations["create user"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/user/profile/detail/${id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get profile detail */
        get: operations["get profile detail"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/user/profile/me": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get profile session */
        get: operations["get-profile-session"];
        /**
         * Update profile session
         * @description Update profile base on the currency session of the user
         */
        put: operations["update-profile-session"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        AccountPayableEntryDto: {
            currency: string;
            due_date: string;
            /** Format: int64 */
            invoiced_amount: number;
            /** Format: int64 */
            paid_amount: number;
            party_name: string;
            party_type: string;
            party_uuid: string;
            /** Format: date-time */
            posting_date: string;
            receivable_account: string;
            receivable_account_uuid: string;
            voucher_no: string;
            voucher_type: string;
        };
        AccountResponseBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            company: components["schemas"]["CompanyDto"];
            profile: components["schemas"]["ProfileDto"];
            role: components["schemas"]["RoleDto"];
            role_actions: components["schemas"]["RoleActionDto"][];
            user: components["schemas"]["UserDto"];
        };
        ActionDto: {
            /** Format: int64 */
            entity_id: number;
            /** Format: int64 */
            id: number;
            name: string;
        };
        ActionSelected: {
            /** Format: int64 */
            actionId: number;
            actionName: string;
            selected: boolean;
        };
        ActivityDto: {
            action: string;
            arg1: string | null;
            comment: string;
            /** Format: date-time */
            created_at: string;
            /** Format: int32 */
            id: number;
            profile_avatar: string | null;
            profile_family_name: string;
            profile_given_name: string;
            type: string;
        };
        AddCompanyModulesBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            modules: components["schemas"]["CompanyEntityDto"][];
        };
        AddPluginRequestBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            plugin: string;
        };
        AddPluginResponseBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            company_plugin: components["schemas"]["CompanyPlugins"];
        };
        AddStockLevelRequestBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            enabled: boolean;
            item_uuid: string;
            /** Format: int32 */
            outOfStockThreshold: number;
            /** Format: int32 */
            stock: number;
            warehouse_uuid: string;
        };
        AddressDto: {
            city: string;
            company: string | null;
            country_code: string | null;
            email: string | null;
            /** Format: int64 */
            id: number;
            identification_number: string | null;
            phone_number: string | null;
            postal_code: string | null;
            province: string | null;
            street_line1: string;
            street_line2: string;
            title: string;
            uuid: string;
        };
        AddressRequestData: {
            city: string;
            company?: string;
            country_code?: string;
            email?: string;
            enabled: boolean;
            identification_number?: string;
            is_billing_address: boolean;
            is_shipping_address: boolean;
            phone_number?: string;
            postal_code?: string;
            province?: string;
            street_line_1: string;
            street_line_2: string;
            title: string;
        };
        AvailableCourtDto: {
            /** Format: date-time */
            created_at: string;
            enabled: boolean;
            /** Format: int64 */
            id: number;
            name: string;
            /** Format: int64 */
            total_price: number;
            uuid: string;
        };
        BookingData: {
            available_courts?: components["schemas"]["AvailableCourtDto"][];
            /** Format: int64 */
            court_id: number;
            court_name: string;
            /** Format: int32 */
            day_week: number;
            /** Format: double */
            discount?: number;
            /** Format: date-time */
            end_date: string;
            is_reserved: boolean;
            /** Format: date-time */
            start_date: string;
            times: string[];
            /** Format: double */
            total_price?: number;
        };
        BookingDto: {
            code: string;
            /** Format: int64 */
            court_id: number;
            court_name: string;
            court_uuid: string;
            /** Format: date-time */
            created_at: string;
            /** Format: int32 */
            discount: number;
            /** Format: date-time */
            end_date: string;
            evento_name: string;
            evento_uuid: string;
            /** Format: int64 */
            id: number;
            /** Format: int32 */
            paid: number;
            party_name: string;
            party_uuid: string;
            /** Format: date-time */
            start_date: string;
            status: string;
            /** Format: int32 */
            total_price: number;
        };
        BookingPaymentBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            /** Format: int64 */
            booking_id: number;
            /** Format: double */
            paid_amount: number;
        };
        BookingRescheduleBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            booking: components["schemas"]["BookingData"];
            /** Format: int64 */
            booking_id: number;
        };
        ChangePasswordRequestBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            password: string;
            token: string;
        };
        ChartDashboardData: {
            booking_hours: components["schemas"]["ChartDataDto"][];
            booking_hours_avg: components["schemas"]["ChartDataDto"][];
            income: components["schemas"]["ChartDataDto"][];
            income_avg: components["schemas"]["ChartDataDto"][];
        };
        ChartDataBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            end_date: string;
            start_date: string;
            time_unit?: string;
        };
        ChartDataDto: {
            name: string;
            /** Format: double */
            value: number;
            /** Format: double */
            value2: number | null;
        };
        Client: {
            ClientKeyValueData: components["schemas"]["ClientKeyValueData"][];
            Code: string;
            Company: components["schemas"]["Company"];
            /** Format: int64 */
            CompanyID: number;
            CountryCode: string;
            /** Format: date-time */
            CreatedAt: string;
            DeletedAt?: components["schemas"]["DeletedAt"];
            EmailAddress: string;
            FamilyName: string;
            GivenName: string;
            /** Format: int64 */
            ID: number;
            OrganizationName: string;
            PhoneNumber: string;
            /** Format: date-time */
            UpdatedAt: string;
            /** Format: int64 */
            UserID: number;
            Uuid: string;
        };
        ClientKeyValueData: {
            /** Format: int64 */
            ID?: number;
            /** Format: int64 */
            baseId?: number;
            key: string;
            value: string;
        };
        Company: {
            code: string;
            /** Format: date-time */
            created_at: string;
            deleted_at: components["schemas"]["DeletedAt"];
            /** Format: int64 */
            id: number;
            is_parent: boolean;
            logo: string | null;
            name: string;
            /** Format: int32 */
            ordinal: number;
            /** Format: int64 */
            parent_id: number | null;
            site_url: string | null;
            /** Format: date-time */
            updated_at: string | null;
            uuid: string;
        };
        CompanyDto: {
            /** Format: date-time */
            created_at: string;
            /** Format: int64 */
            id: number;
            logo: string | null;
            name: string;
            /** Format: int64 */
            ordinal: number;
            site_url: string | null;
            uuid: string;
        };
        CompanyEntityDto: {
            /** Format: int64 */
            company_id: number | null;
            enabled: boolean;
            /** Format: int64 */
            entity_id: number;
            entity_name: string;
        };
        CompanyPlugins: {
            /** Format: int64 */
            CompanyID?: number;
            Credentials?: string;
            Plugin: string;
        };
        ContactData: {
            /** Format: email */
            email?: string | null;
            family_name?: string | null;
            gender?: string | null;
            given_name: string;
            phone_number?: string | null;
        };
        ContactDto: {
            /** Format: date-time */
            created_at: string;
            email: string | null;
            family_name: string | null;
            gender: string | null;
            given_name: string;
            /** Format: int64 */
            id: number;
            phone_number: string | null;
            uuid: string;
        };
        Country: {
            code: string;
            label?: string;
            phone?: string;
        };
        CourtDto: {
            /** Format: date-time */
            created_at: string;
            enabled: boolean;
            /** Format: int64 */
            id: number;
            name: string;
            uuid: string;
        };
        CourtRateData: {
            /** Format: int32 */
            day_week: number;
            enabled: boolean;
            /** Format: double */
            rate: number;
            time: string;
        };
        CourtRateDto: {
            currency: string;
            /** Format: int32 */
            day_week: number;
            enabled: boolean;
            /** Format: double */
            rate: number;
            time: string;
        };
        CreateActivityCommnetBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            comment: string;
            /** Format: int64 */
            party_id: number;
        };
        CreateBookingBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            /** Format: double */
            advance_payment?: number;
            bookings: components["schemas"]["BookingData"][];
            /** Format: int64 */
            customer_id: number;
            /** Format: int64 */
            event_id?: number;
        };
        CreateCompanyRequestBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            name: string;
            /** Format: int64 */
            parentId?: number | null;
        };
        CreateContactBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            contact: components["schemas"]["ContactData"];
            /** Format: int64 */
            party_reference?: number | null;
        };
        CreateCourtBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            enabled: boolean;
            name: string;
        };
        CreateCustomerBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            contact?: components["schemas"]["ContactData"];
            customer: components["schemas"]["CreateCustomerData"];
        };
        CreateCustomerData: {
            customer_type: string;
            group_uuid: string;
            name: string;
        };
        CreateEventBookingBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            description?: string | null;
            name: string;
        };
        CreateGroupRequestBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            enabled: boolean;
            is_group: boolean;
            name: string;
            /** Format: int64 */
            parent_id?: number | null;
            party_type_code: string;
        };
        CreateInvoice: {
            currency: string;
            /** Format: date-time */
            date: string;
            /** Format: date-time */
            due_date?: string | null;
            invoice_party_type: string;
            party_type: string;
            /** Format: uuid */
            party_uuid: string;
            /** Format: int64 */
            reference?: number | null;
        };
        CreateInvoiceBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            invoice: components["schemas"]["CreateInvoice"];
            items: components["schemas"]["CreateItemLines"];
        };
        CreateItemAttributeRequestBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            name: string;
            values: components["schemas"]["ItemAttributeValueDto"][];
        };
        CreateItemLines: {
            lines: components["schemas"]["LineItemDto"][];
        };
        CreateItemPriceBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            /** Format: int32 */
            itemQuantity: number;
            /** Format: int64 */
            item_id: number;
            item_uuid: string;
            /** Format: int64 */
            price_list_id?: number | null;
            price_list_uuid?: string | null;
            /** Format: double */
            rate: number;
            /** Format: int64 */
            tax_id?: number | null;
            tax_uuid?: string | null;
            /** Format: int64 */
            uom_id?: number | null;
            /** Format: date-time */
            validFrom?: string | null;
            /** Format: date-time */
            validUpTo?: string | null;
        };
        CreateItemRequestBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            /** Format: int64 */
            group_id: number;
            name: string;
            /** Format: int64 */
            uom_id: number;
        };
        CreateItemVariantRequestBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            /** Format: int32 */
            attribute_value_id: number;
            item_uuid: string;
            name: string;
        };
        CreateLedgerBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            account_type: string;
            currency?: string;
            description?: string;
            enabled: boolean;
            is_group?: boolean;
            ledger_no?: string | null;
            name: string;
            parent_uuid?: string | null;
        };
        CreateOrder: {
            currency: string;
            /** Format: date-time */
            date: string;
            /** Format: date-time */
            delivery_date?: string | null;
            order_party_type: string;
            party_type: string;
            party_uuid: string;
        };
        CreateOrderBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            items: components["schemas"]["CreateItemLines"];
            order: components["schemas"]["CreateOrder"];
        };
        CreatePartyAddressRequestBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            address: components["schemas"]["AddressRequestData"];
            /** Format: int64 */
            party_reference?: number | null;
        };
        CreatePayment: {
            /** Format: double */
            amount: number;
            payment_references: components["schemas"]["CreatePaymentReference"][];
            payment_type: string;
            /** Format: date-time */
            postuing_date: string;
        };
        CreatePaymentAccounts: {
            paid_from?: string;
            /** Format: int64 */
            paid_from_id?: number | null;
            paid_to?: string;
            /** Format: int64 */
            paid_to_id?: number | null;
        };
        CreatePaymentBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            payment: components["schemas"]["CreatePayment"];
            payment_accounts?: components["schemas"]["CreatePaymentAccounts"];
            payment_party: components["schemas"]["CreatePaymentParty"];
        };
        CreatePaymentParty: {
            company_bank_account?: string | null;
            party_bank_account?: string | null;
            /** Format: int64 */
            party_reference?: number;
            party_type: string;
            party_uuid: string;
        };
        CreatePaymentReference: {
            /** Format: double */
            allocated: number;
            /** Format: double */
            outstanding: number;
            party_code: string;
            /** Format: int64 */
            party_id: number;
            party_type: string;
            /** Format: double */
            total: number;
        };
        CreatePianoBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            "dropoff-city": string;
            "dropoff-flights": string;
            "dropoff-state": string;
            "dropoff-street": string;
            "dropoff-zip": string;
            email: string;
            "first-name": string;
            "last-name": string;
            "moving-date": string;
            phone: string;
            "piano-type": string;
            "pickup-city": string;
            "pickup-flights": string;
            "pickup-state": string;
            "pickup-street": string;
            "pickup-zip": string;
            "rent-piano": string;
            "stairs-dropoff": string;
            "stairs-pickup": string;
        };
        CreatePriceListRequestBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            currency: string;
            isBuying: boolean;
            isSelling: boolean;
            name: string;
        };
        CreatePurchaseOrderRequestBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            currency: components["schemas"]["CurrencyDto"];
            /** Format: date-time */
            date: string;
            /** Format: date-time */
            delivery_date?: string | null;
            lines: components["schemas"]["LineItemDto"][];
            party_type: string;
            party_uuid: string;
        };
        CreateReceipt: {
            currency: string;
            party_receipt: string;
            party_type: string;
            party_uuid: string;
            /** Format: date-time */
            posting_date: string;
            /** Format: int64 */
            reference?: number | null;
        };
        CreateReceiptBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            items: components["schemas"]["CreateItemLines"];
            receipt: components["schemas"]["CreateReceipt"];
        };
        CreateRoleRequestBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            description: string;
            name: string;
        };
        CreateSupplierRequestBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            enabled: boolean;
            group: components["schemas"]["GroupDto"];
            name: string;
        };
        CreateTaxRequestBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            enabled: boolean;
            name: string;
            /** Format: double */
            value: number;
        };
        CreateUserRequestBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            company_ids?: number[];
            /** Format: email */
            email: string;
            family_name: string;
            given_name: string;
            key_value_data?: components["schemas"]["KeyValueData"][];
            party_code: string;
            phone_number?: string;
            role_uuid: string;
        };
        CreateWareHouseRequestBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            enabled?: boolean;
            name: string;
            /** Format: int64 */
            parentId?: number | null;
        };
        CuatropfSubscriptionRequestBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            companyName: string;
            country?: components["schemas"]["Country"];
            deleteAt?: components["schemas"]["DeletedAt"];
            email: string;
            familyName: string;
            givenName: string;
            keyValues?: components["schemas"]["ClientKeyValueData"][];
            metadata?: string;
            phoneNumber: string;
            plugins?: components["schemas"]["CompanyPlugins"][];
        };
        CurrencyDto: {
            code: string;
        };
        CustomerDto: {
            /** Format: date-time */
            created_at: string;
            customer_type: string;
            group_name?: string;
            group_uuid?: string;
            /** Format: int64 */
            id: number;
            name: string;
            uuid: string;
        };
        CustomerType: {
            code: string;
            name: string;
        };
        DeletedAt: {
            /** Format: date-time */
            Time: string;
            Valid: boolean;
        };
        EditActivityCommnetBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            comment: string;
            /** Format: int32 */
            id: number;
        };
        EditClientRequestBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            familyName: string;
            givenName: string;
            organizationName: string;
            phoneNumber: components["schemas"]["PhoneNumber"];
        };
        EditRolePermissionActionsBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actionSelecteds: components["schemas"]["ActionSelected"][];
            entityName: string;
            role_uuid: string;
        };
        EditableProfileFields: {
            family_name: string;
            given_name: string;
            phone_number?: string | null;
        };
        EntityActionsDto: {
            actions: components["schemas"]["ActionDto"][];
            entity: components["schemas"]["EntityDto"];
        };
        EntityDto: {
            /** Format: int64 */
            id: number;
            name: string;
        };
        EntityResponseClientBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            associated_actions: {
                [key: string]: components["schemas"]["ActionDto"][] | undefined;
            };
            message: string;
            result: components["schemas"]["Client"];
        };
        EntityResponseCompanyBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            associated_actions: {
                [key: string]: components["schemas"]["ActionDto"][] | undefined;
            };
            message: string;
            result: components["schemas"]["Company"];
        };
        EntityResponseCompanyDtoBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            associated_actions: {
                [key: string]: components["schemas"]["ActionDto"][] | undefined;
            };
            message: string;
            result: components["schemas"]["CompanyDto"];
        };
        EntityResponseItemAttributeDtoBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            associated_actions: {
                [key: string]: components["schemas"]["ActionDto"][] | undefined;
            };
            message: string;
            result: components["schemas"]["ItemAttributeDto"];
        };
        EntityResponseItemDtoBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            associated_actions: {
                [key: string]: components["schemas"]["ActionDto"][] | undefined;
            };
            message: string;
            result: components["schemas"]["ItemDto"];
        };
        EntityResponseListAccountPayableEntryDtoBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            associated_actions: {
                [key: string]: components["schemas"]["ActionDto"][] | undefined;
            };
            message: string;
            result: components["schemas"]["AccountPayableEntryDto"][];
        };
        EntityResponseListCompanyEntityDtoBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            associated_actions: {
                [key: string]: components["schemas"]["ActionDto"][] | undefined;
            };
            message: string;
            result: components["schemas"]["CompanyEntityDto"][];
        };
        EntityResponseListGeneralLedgerEntryDtoBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            associated_actions: {
                [key: string]: components["schemas"]["ActionDto"][] | undefined;
            };
            message: string;
            result: components["schemas"]["GeneralLedgerEntryDto"][];
        };
        EntityResponseListStockBalanceEntryDtoBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            associated_actions: {
                [key: string]: components["schemas"]["ActionDto"][] | undefined;
            };
            message: string;
            result: components["schemas"]["StockBalanceEntryDto"][];
        };
        EntityResponseListStockLedgerEntryDtoBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            associated_actions: {
                [key: string]: components["schemas"]["ActionDto"][] | undefined;
            };
            message: string;
            result: components["schemas"]["StockLedgerEntryDto"][];
        };
        EntityResponseListSumaryEntryDtoBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            associated_actions: {
                [key: string]: components["schemas"]["ActionDto"][] | undefined;
            };
            message: string;
            result: components["schemas"]["SumaryEntryDto"][];
        };
        EntityResponseListUserDtoBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            associated_actions: {
                [key: string]: components["schemas"]["ActionDto"][] | undefined;
            };
            message: string;
            result: components["schemas"]["UserDto"][];
        };
        EntityResponseListUserRelationDtoBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            associated_actions: {
                [key: string]: components["schemas"]["ActionDto"][] | undefined;
            };
            message: string;
            result: components["schemas"]["UserRelationDto"][];
        };
        EntityResponseResultEntityAddressDtoBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            associated_actions: {
                [key: string]: components["schemas"]["ActionDto"][] | undefined;
            };
            message: string;
            result: components["schemas"]["ResultEntityAddressDto"];
        };
        EntityResponseResultEntityBookingDtoBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            associated_actions: {
                [key: string]: components["schemas"]["ActionDto"][] | undefined;
            };
            message: string;
            result: components["schemas"]["ResultEntityBookingDto"];
        };
        EntityResponseResultEntityCompanyDtoBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            associated_actions: {
                [key: string]: components["schemas"]["ActionDto"][] | undefined;
            };
            message: string;
            result: components["schemas"]["ResultEntityCompanyDto"];
        };
        EntityResponseResultEntityCourtDtoBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            associated_actions: {
                [key: string]: components["schemas"]["ActionDto"][] | undefined;
            };
            message: string;
            result: components["schemas"]["ResultEntityCourtDto"];
        };
        EntityResponseResultEntityCustomerDtoBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            associated_actions: {
                [key: string]: components["schemas"]["ActionDto"][] | undefined;
            };
            message: string;
            result: components["schemas"]["ResultEntityCustomerDto"];
        };
        EntityResponseResultEntityEventBookingDtoBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            associated_actions: {
                [key: string]: components["schemas"]["ActionDto"][] | undefined;
            };
            message: string;
            result: components["schemas"]["ResultEntityEventBookingDto"];
        };
        EntityResponseResultEntityGroupDtoBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            associated_actions: {
                [key: string]: components["schemas"]["ActionDto"][] | undefined;
            };
            message: string;
            result: components["schemas"]["ResultEntityGroupDto"];
        };
        EntityResponseResultEntityInvoiceDetailDtoBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            associated_actions: {
                [key: string]: components["schemas"]["ActionDto"][] | undefined;
            };
            message: string;
            result: components["schemas"]["ResultEntityInvoiceDetailDto"];
        };
        EntityResponseResultEntityItemAttributeDtoBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            associated_actions: {
                [key: string]: components["schemas"]["ActionDto"][] | undefined;
            };
            message: string;
            result: components["schemas"]["ResultEntityItemAttributeDto"];
        };
        EntityResponseResultEntityItemDetailDtoBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            associated_actions: {
                [key: string]: components["schemas"]["ActionDto"][] | undefined;
            };
            message: string;
            result: components["schemas"]["ResultEntityItemDetailDto"];
        };
        EntityResponseResultEntityItemPriceDtoBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            associated_actions: {
                [key: string]: components["schemas"]["ActionDto"][] | undefined;
            };
            message: string;
            result: components["schemas"]["ResultEntityItemPriceDto"];
        };
        EntityResponseResultEntityLedgerDetailDtoBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            associated_actions: {
                [key: string]: components["schemas"]["ActionDto"][] | undefined;
            };
            message: string;
            result: components["schemas"]["ResultEntityLedgerDetailDto"];
        };
        EntityResponseResultEntityListCourtRateDtoBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            associated_actions: {
                [key: string]: components["schemas"]["ActionDto"][] | undefined;
            };
            message: string;
            result: components["schemas"]["ResultEntityListCourtRateDto"];
        };
        EntityResponseResultEntityListCustomerTypeBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            associated_actions: {
                [key: string]: components["schemas"]["ActionDto"][] | undefined;
            };
            message: string;
            result: components["schemas"]["ResultEntityListCustomerType"];
        };
        EntityResponseResultEntityListEntityActionsDtoBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            associated_actions: {
                [key: string]: components["schemas"]["ActionDto"][] | undefined;
            };
            message: string;
            result: components["schemas"]["ResultEntityListEntityActionsDto"];
        };
        EntityResponseResultEntityListGroupHierarchyDtoBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            associated_actions: {
                [key: string]: components["schemas"]["ActionDto"][] | undefined;
            };
            message: string;
            result: components["schemas"]["ResultEntityListGroupHierarchyDto"];
        };
        EntityResponseResultEntityListItemPriceDtoBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            associated_actions: {
                [key: string]: components["schemas"]["ActionDto"][] | undefined;
            };
            message: string;
            result: components["schemas"]["ResultEntityListItemPriceDto"];
        };
        EntityResponseResultEntityListPartyDtoBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            associated_actions: {
                [key: string]: components["schemas"]["ActionDto"][] | undefined;
            };
            message: string;
            result: components["schemas"]["ResultEntityListPartyDto"];
        };
        EntityResponseResultEntityListPartyTypeDtoBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            associated_actions: {
                [key: string]: components["schemas"]["ActionDto"][] | undefined;
            };
            message: string;
            result: components["schemas"]["ResultEntityListPartyTypeDto"];
        };
        EntityResponseResultEntityOrderDtoBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            associated_actions: {
                [key: string]: components["schemas"]["ActionDto"][] | undefined;
            };
            message: string;
            result: components["schemas"]["ResultEntityOrderDto"];
        };
        EntityResponseResultEntityPaymentDetailDtoBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            associated_actions: {
                [key: string]: components["schemas"]["ActionDto"][] | undefined;
            };
            message: string;
            result: components["schemas"]["ResultEntityPaymentDetailDto"];
        };
        EntityResponseResultEntityPianoFormBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            associated_actions: {
                [key: string]: components["schemas"]["ActionDto"][] | undefined;
            };
            message: string;
            result: components["schemas"]["ResultEntityPianoForm"];
        };
        EntityResponseResultEntityPriceListDtoBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            associated_actions: {
                [key: string]: components["schemas"]["ActionDto"][] | undefined;
            };
            message: string;
            result: components["schemas"]["ResultEntityPriceListDto"];
        };
        EntityResponseResultEntityProfileDtoBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            associated_actions: {
                [key: string]: components["schemas"]["ActionDto"][] | undefined;
            };
            message: string;
            result: components["schemas"]["ResultEntityProfileDto"];
        };
        EntityResponseResultEntityReceiptDetailDtoBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            associated_actions: {
                [key: string]: components["schemas"]["ActionDto"][] | undefined;
            };
            message: string;
            result: components["schemas"]["ResultEntityReceiptDetailDto"];
        };
        EntityResponseResultEntityRoleDtoBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            associated_actions: {
                [key: string]: components["schemas"]["ActionDto"][] | undefined;
            };
            message: string;
            result: components["schemas"]["ResultEntityRoleDto"];
        };
        EntityResponseResultEntitySupplierDtoBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            associated_actions: {
                [key: string]: components["schemas"]["ActionDto"][] | undefined;
            };
            message: string;
            result: components["schemas"]["ResultEntitySupplierDto"];
        };
        EntityResponseResultEntityTaxDtoBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            associated_actions: {
                [key: string]: components["schemas"]["ActionDto"][] | undefined;
            };
            message: string;
            result: components["schemas"]["ResultEntityTaxDto"];
        };
        EntityResponseResultEntityWareHouseDtoBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            associated_actions: {
                [key: string]: components["schemas"]["ActionDto"][] | undefined;
            };
            message: string;
            result: components["schemas"]["ResultEntityWareHouseDto"];
        };
        ErrorDetail: {
            /** @description Where the error occurred, e.g. 'body.items[3].tags' or 'path.thing-id' */
            location?: string;
            /** @description Error message text */
            message?: string;
            /** @description The value at the given location */
            value?: unknown;
        };
        ErrorModel: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            /** @description A human-readable explanation specific to this occurrence of the problem. */
            detail?: string;
            /** @description Optional list of individual error details */
            errors?: components["schemas"]["ErrorDetail"][];
            /**
             * Format: uri
             * @description A URI reference that identifies the specific occurrence of the problem.
             */
            instance?: string;
            /**
             * Format: int64
             * @description HTTP status code
             */
            status?: number;
            /** @description A short, human-readable summary of the problem type. This value should not change between occurrences of the error. */
            title?: string;
            /**
             * Format: uri
             * @description A URI reference to human-readable documentation for the error.
             * @default about:blank
             */
            type: string;
        };
        EventBookingDto: {
            /** Format: date-time */
            created_at: string;
            description: string | null;
            /** Format: int64 */
            id: number;
            name: string;
            status: string;
            uuid: string;
        };
        GeneralLedgerEntryDto: {
            account: string;
            against_account: string;
            /** Format: int64 */
            balance: number;
            /** Format: int64 */
            credit: number;
            currency: string;
            /** Format: int64 */
            debit: number;
            party_name: string;
            party_type: string;
            /** Format: date-time */
            posting_date: string;
            voucher_no: string;
            voucher_subtype: string;
            voucher_type: string;
        };
        GreetingOutputBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            /** @description Greeting message */
            message: string;
        };
        GroupDto: {
            /** Format: date-time */
            created_at: string;
            enabled: boolean;
            /** Format: int64 */
            id: number;
            is_group: boolean;
            name: string;
            /** Format: int64 */
            ordinal: number;
            uuid: string;
        };
        GroupHierarchyDto: {
            /** Format: int64 */
            depth: number;
            is_group: boolean;
            name: string;
            parent_uuid: string | null;
            uuid: string;
        };
        InvoiceDetailDto: {
            invoice: components["schemas"]["InvoiceDto"];
            item_lines: components["schemas"]["ItemLineDto"][];
            totals: components["schemas"]["TotalsDto"];
        };
        InvoiceDto: {
            code: string;
            /** Format: date-time */
            created_at: string;
            currency: string;
            /** Format: date-time */
            date: string;
            /** Format: date-time */
            due_date: string | null;
            /** Format: int64 */
            id: number;
            party_name: string;
            party_type: string;
            party_uuid: string;
            status: string;
            uuid: string;
        };
        ItemAttributeDto: {
            /** Format: date-time */
            created_at: string;
            /** Format: int64 */
            id: number;
            item_attribute_values: components["schemas"]["ItemAttributeValueDto"][];
            name: string;
            uuid: string;
        };
        ItemAttributeValueDto: {
            abbreviation: string;
            /** Format: int32 */
            id?: number;
            /** Format: int64 */
            itemAttributeId?: number;
            /** Format: int32 */
            ordinal: number;
            value: string;
        };
        ItemDetailDto: {
            code: string;
            /** Format: date-time */
            created_at: string;
            group_name: string;
            group_uuid: string;
            /** Format: int64 */
            id: number;
            item_type: string;
            name: string;
            uom_code: string;
            uom_name: string;
            uuid: string;
        };
        ItemDto: {
            code: string;
            /** Format: date-time */
            created_at: string;
            /** Format: int64 */
            id: number;
            item_type: string;
            name: string;
            uuid: string;
        };
        ItemLineDto: {
            /** Format: int64 */
            id: number;
            item_code: string;
            item_name: string;
            item_price_uuid: string;
            item_uuid: string;
            line_type: string;
            /** Format: int32 */
            quantity: number;
            /** Format: int32 */
            rate: number;
            uom: string;
        };
        ItemPrice: {
            /** Format: int64 */
            company_id: number;
            /** Format: date-time */
            created_at: string;
            deleted_at: components["schemas"]["DeletedAt"];
            /** Format: int64 */
            id: number;
            /** Format: int64 */
            item_id: number;
            /** Format: int32 */
            item_quantity: number;
            /** Format: int64 */
            price_list_id: number | null;
            /** Format: int32 */
            rate: number;
            /** Format: int64 */
            tax_id: number | null;
            /** Format: int64 */
            unit_of_measure_id: number;
            /** Format: date-time */
            updated_at: string | null;
            uuid: string;
            /** Format: date-time */
            valid_from: string | null;
            /** Format: date-time */
            valid_up_to: string | null;
        };
        ItemPriceDto: {
            code: string;
            /** Format: date-time */
            created_at: string;
            /** Format: int64 */
            id: number;
            item_code: string;
            item_name: string;
            /** Format: int32 */
            item_quantity: number;
            item_uuid: string;
            price_list_currency: string;
            price_list_name: string;
            price_list_uuid: string;
            /** Format: int32 */
            rate: number;
            tax_name: string;
            tax_uuid: string;
            /** Format: double */
            tax_value: number;
            uom: string;
            uuid: string;
            /** Format: date-time */
            valid_from?: string | null;
            /** Format: date-time */
            valid_up_to?: string | null;
        };
        ItemVariantDto: {
            attibute_abbreviation: string;
            attibute_value: string;
            code: string;
            /** Format: date-time */
            created_at: string;
            name: string;
            uuid: string;
        };
        KeyValueData: {
            key: string;
            value: string;
        };
        LedgerDetailDto: {
            account_type: string;
            /** Format: date-time */
            created_at: string;
            description: string;
            enabled: boolean;
            /** Format: int64 */
            id: number;
            is_group: boolean;
            ledger_no: string | null;
            name: string;
            parent_name: string;
            parent_uuid: string;
            uuid: string;
        };
        LedgerDto: {
            account_type: string;
            /** Format: date-time */
            created_at: string;
            description: string;
            enabled: boolean;
            /** Format: int64 */
            id: number;
            is_group: boolean;
            ledger_no: string | null;
            name: string;
            uuid: string;
        };
        LineItemDto: {
            /** Format: int32 */
            item_line_reference?: number;
            item_price_uuid: string;
            line_receipt?: components["schemas"]["LineItemReceiptDto"];
            /** Format: int32 */
            quantity: number;
            /** Format: int32 */
            rate: number;
        };
        LineItemReceiptDto: {
            /** Format: int32 */
            accepted_quantity: number;
            /** Format: int64 */
            accepted_warehouse?: number;
            /** Format: int32 */
            rejected_quantity: number;
            /** Format: int64 */
            rejected_warehouse?: number;
        };
        OrderDto: {
            /** Format: int32 */
            billed_amount: number;
            code: string;
            /** Format: date-time */
            created_at: string;
            currency: string;
            /** Format: date-time */
            date: string;
            /** Format: date-time */
            delivery_date: string | null;
            /** Format: int64 */
            id: number;
            order_lines: components["schemas"]["ItemLineDto"][];
            party_name: string;
            party_type: string;
            party_uuid: string;
            /** Format: int32 */
            received_items: number;
            status: string;
            /** Format: int32 */
            total_amount: number;
            /** Format: int32 */
            total_items: number;
            uuid: string;
        };
        PaginationResponsePaginationResultListAddressDtoBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            pagination_result: components["schemas"]["PaginationResultListAddressDto"];
        };
        PaginationResponsePaginationResultListBookingDtoBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            pagination_result: components["schemas"]["PaginationResultListBookingDto"];
        };
        PaginationResponsePaginationResultListCompanyDtoBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            pagination_result: components["schemas"]["PaginationResultListCompanyDto"];
        };
        PaginationResponsePaginationResultListContactDtoBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            pagination_result: components["schemas"]["PaginationResultListContactDto"];
        };
        PaginationResponsePaginationResultListCourtDtoBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            pagination_result: components["schemas"]["PaginationResultListCourtDto"];
        };
        PaginationResponsePaginationResultListCurrencyDtoBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            pagination_result: components["schemas"]["PaginationResultListCurrencyDto"];
        };
        PaginationResponsePaginationResultListCustomerDtoBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            pagination_result: components["schemas"]["PaginationResultListCustomerDto"];
        };
        PaginationResponsePaginationResultListEventBookingDtoBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            pagination_result: components["schemas"]["PaginationResultListEventBookingDto"];
        };
        PaginationResponsePaginationResultListGroupDtoBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            pagination_result: components["schemas"]["PaginationResultListGroupDto"];
        };
        PaginationResponsePaginationResultListInvoiceDtoBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            pagination_result: components["schemas"]["PaginationResultListInvoiceDto"];
        };
        PaginationResponsePaginationResultListItemAttributeDtoBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            pagination_result: components["schemas"]["PaginationResultListItemAttributeDto"];
        };
        PaginationResponsePaginationResultListItemDtoBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            pagination_result: components["schemas"]["PaginationResultListItemDto"];
        };
        PaginationResponsePaginationResultListItemPriceDtoBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            pagination_result: components["schemas"]["PaginationResultListItemPriceDto"];
        };
        PaginationResponsePaginationResultListItemVariantDtoBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            pagination_result: components["schemas"]["PaginationResultListItemVariantDto"];
        };
        PaginationResponsePaginationResultListLedgerDtoBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            pagination_result: components["schemas"]["PaginationResultListLedgerDto"];
        };
        PaginationResponsePaginationResultListOrderDtoBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            pagination_result: components["schemas"]["PaginationResultListOrderDto"];
        };
        PaginationResponsePaginationResultListPartyReferenceDtoBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            pagination_result: components["schemas"]["PaginationResultListPartyReferenceDto"];
        };
        PaginationResponsePaginationResultListPaymentDtoBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            pagination_result: components["schemas"]["PaginationResultListPaymentDto"];
        };
        PaginationResponsePaginationResultListPianoFormBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            pagination_result: components["schemas"]["PaginationResultListPianoForm"];
        };
        PaginationResponsePaginationResultListPriceListDtoBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            pagination_result: components["schemas"]["PaginationResultListPriceListDto"];
        };
        PaginationResponsePaginationResultListProfileLBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            pagination_result: components["schemas"]["PaginationResultListProfileL"];
        };
        PaginationResponsePaginationResultListReceiptDtoBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            pagination_result: components["schemas"]["PaginationResultListReceiptDto"];
        };
        PaginationResponsePaginationResultListRoleActionDtoBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            pagination_result: components["schemas"]["PaginationResultListRoleActionDto"];
        };
        PaginationResponsePaginationResultListRoleDtoBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            pagination_result: components["schemas"]["PaginationResultListRoleDto"];
        };
        PaginationResponsePaginationResultListStockLevelDtoBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            pagination_result: components["schemas"]["PaginationResultListStockLevelDto"];
        };
        PaginationResponsePaginationResultListSupplierDtoBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            pagination_result: components["schemas"]["PaginationResultListSupplierDto"];
        };
        PaginationResponsePaginationResultListTaxDtoBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            pagination_result: components["schemas"]["PaginationResultListTaxDto"];
        };
        PaginationResponsePaginationResultListWareHouseDtoBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            pagination_result: components["schemas"]["PaginationResultListWareHouseDto"];
        };
        PaginationResultListAddressDto: {
            results: components["schemas"]["AddressDto"][];
            /** Format: int64 */
            total: number;
        };
        PaginationResultListBookingDto: {
            results: components["schemas"]["BookingDto"][];
            /** Format: int64 */
            total: number;
        };
        PaginationResultListCompanyDto: {
            results: components["schemas"]["CompanyDto"][];
            /** Format: int64 */
            total: number;
        };
        PaginationResultListContactDto: {
            results: components["schemas"]["ContactDto"][];
            /** Format: int64 */
            total: number;
        };
        PaginationResultListCourtDto: {
            results: components["schemas"]["CourtDto"][];
            /** Format: int64 */
            total: number;
        };
        PaginationResultListCurrencyDto: {
            results: components["schemas"]["CurrencyDto"][];
            /** Format: int64 */
            total: number;
        };
        PaginationResultListCustomerDto: {
            results: components["schemas"]["CustomerDto"][];
            /** Format: int64 */
            total: number;
        };
        PaginationResultListEventBookingDto: {
            results: components["schemas"]["EventBookingDto"][];
            /** Format: int64 */
            total: number;
        };
        PaginationResultListGroupDto: {
            results: components["schemas"]["GroupDto"][];
            /** Format: int64 */
            total: number;
        };
        PaginationResultListInvoiceDto: {
            results: components["schemas"]["InvoiceDto"][];
            /** Format: int64 */
            total: number;
        };
        PaginationResultListItemAttributeDto: {
            results: components["schemas"]["ItemAttributeDto"][];
            /** Format: int64 */
            total: number;
        };
        PaginationResultListItemDto: {
            results: components["schemas"]["ItemDto"][];
            /** Format: int64 */
            total: number;
        };
        PaginationResultListItemPriceDto: {
            results: components["schemas"]["ItemPriceDto"][];
            /** Format: int64 */
            total: number;
        };
        PaginationResultListItemVariantDto: {
            results: components["schemas"]["ItemVariantDto"][];
            /** Format: int64 */
            total: number;
        };
        PaginationResultListLedgerDto: {
            results: components["schemas"]["LedgerDto"][];
            /** Format: int64 */
            total: number;
        };
        PaginationResultListOrderDto: {
            results: components["schemas"]["OrderDto"][];
            /** Format: int64 */
            total: number;
        };
        PaginationResultListPartyReferenceDto: {
            results: components["schemas"]["PartyReferenceDto"][];
            /** Format: int64 */
            total: number;
        };
        PaginationResultListPaymentDto: {
            results: components["schemas"]["PaymentDto"][];
            /** Format: int64 */
            total: number;
        };
        PaginationResultListPianoForm: {
            results: components["schemas"]["PianoForm"][];
            /** Format: int64 */
            total: number;
        };
        PaginationResultListPriceListDto: {
            results: components["schemas"]["PriceListDto"][];
            /** Format: int64 */
            total: number;
        };
        PaginationResultListProfileL: {
            results: components["schemas"]["ProfileL"][];
            /** Format: int64 */
            total: number;
        };
        PaginationResultListReceiptDto: {
            results: components["schemas"]["ReceiptDto"][];
            /** Format: int64 */
            total: number;
        };
        PaginationResultListRoleActionDto: {
            results: components["schemas"]["RoleActionDto"][];
            /** Format: int64 */
            total: number;
        };
        PaginationResultListRoleDto: {
            results: components["schemas"]["RoleDto"][];
            /** Format: int64 */
            total: number;
        };
        PaginationResultListStockLevelDto: {
            results: components["schemas"]["StockLevelDto"][];
            /** Format: int64 */
            total: number;
        };
        PaginationResultListSupplierDto: {
            results: components["schemas"]["SupplierDto"][];
            /** Format: int64 */
            total: number;
        };
        PaginationResultListTaxDto: {
            results: components["schemas"]["TaxDto"][];
            /** Format: int64 */
            total: number;
        };
        PaginationResultListWareHouseDto: {
            results: components["schemas"]["WareHouseDto"][];
            /** Format: int64 */
            total: number;
        };
        PartyConnections: {
            /** Format: int32 */
            connections: number;
            party_type: string;
        };
        PartyDto: {
            /** Format: int64 */
            id: number;
            name: string;
            uuid: string;
        };
        PartyReferenceDto: {
            code: string;
            name: string;
            reference: string;
            uuid: string;
        };
        PartyTypeDto: {
            code: string;
            name: string;
        };
        PaymentDetailDto: {
            PartyBankAccount: string | null;
            /** Format: int64 */
            amount: number;
            code: string;
            company_bank_account: string | null;
            /** Format: date-time */
            created_at: string;
            /** Format: int64 */
            id: number;
            paid_from_currency: string;
            paid_from_name: string;
            paid_from_uuid: string;
            paid_to_currency: string;
            paid_to_name: string;
            paid_to_uuid: string;
            party_name: string;
            party_type: string;
            party_uuid: string;
            payment_references: components["schemas"]["PaymentReferenceDto"][];
            payment_type: string;
            /** Format: date-time */
            posting_date: string;
            status: string;
        };
        PaymentDto: {
            PartyBankAccount: string | null;
            /** Format: int64 */
            amount: number;
            code: string;
            company_bank_account: string | null;
            /** Format: date-time */
            created_at: string;
            /** Format: int64 */
            id: number;
            party_name: string;
            party_type: string;
            party_uuid: string;
            payment_type: string;
            /** Format: date-time */
            posting_date: string;
            status: string;
        };
        PaymentReferenceDto: {
            /** Format: int32 */
            allocated: number;
            /** Format: int32 */
            outstanding: number;
            party_code: string;
            /** Format: int64 */
            party_id: number;
            party_type: string;
            /** Format: int32 */
            total: number;
        };
        PhoneNumber: {
            countryCode: string;
            number: string;
        };
        PianoExportRequestBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            /** Format: date-time */
            from_date: string;
            /** Format: date-time */
            to_date: string;
        };
        PianoForm: {
            /** Format: int64 */
            company_id: number;
            /** Format: date-time */
            created_at: string;
            deleted_at: components["schemas"]["DeletedAt"];
            dropoff_city: string;
            dropoff_flights: string;
            dropoff_state: string;
            dropoff_street: string;
            dropoff_zip: string;
            email: string;
            first_name: string;
            /** Format: int64 */
            id: number;
            last_name: string;
            /** Format: date-time */
            moving_date: string;
            phone_number: string;
            piano_type: string;
            pickup_city: string;
            pickup_flights: string;
            pickup_state: string;
            pickup_street: string;
            pickup_zip: string;
            rent_piano: boolean;
            stairs_dropoff: boolean;
            stairs_pickup: boolean;
            /** Format: date-time */
            updated_at: string | null;
        };
        PluginApp: {
            Name: string;
        };
        PluginDetailResponseBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            company_plugin: components["schemas"]["CompanyPlugins"];
        };
        PluginsResponseBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            plugins: components["schemas"]["PluginApp"][];
        };
        PriceList: {
            /** Format: int64 */
            company_id: number;
            /** Format: date-time */
            created_at: string;
            currency: string;
            deleted_at: components["schemas"]["DeletedAt"];
            /** Format: int64 */
            id: number;
            is_buying: boolean;
            is_selling: boolean;
            name: string;
            /** Format: date-time */
            updated_at: string | null;
            uuid: string;
        };
        PriceListDto: {
            /** Format: date-time */
            created_at: string;
            currency: string;
            /** Format: int64 */
            id: number;
            is_buying: boolean;
            is_selling: boolean;
            name: string;
            uuid: string;
        };
        ProfileDto: {
            email: string;
            family_name: string;
            given_name: string;
            /** Format: int64 */
            id: number;
            phone_number: string | null;
            uuid: string;
        };
        ProfileL: {
            /** Format: date-time */
            createdAt: string;
            emailAddress: string;
            familyName: string;
            givenName: string;
            /** Format: int64 */
            id: number;
            partyCode: string;
            partyName: string;
            phoneNumber: string;
            uuid: string;
        };
        ReceiptDetailDto: {
            item_lines: components["schemas"]["ItemLineDto"][];
            receipt: components["schemas"]["ReceiptDto"];
        };
        ReceiptDto: {
            code: string;
            /** Format: date-time */
            created_at: string;
            currency: string;
            /** Format: int64 */
            id: number;
            party_name: string;
            party_type: string;
            party_uuid: string;
            /** Format: date-time */
            posting_date: string;
            status: string;
        };
        RequestAddPartyReferenceBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            /** Format: int64 */
            party_id: number;
            /** Format: int64 */
            reference_id: number;
        };
        ResetPasswordRequestBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            email: string;
        };
        ResponseDataChartDashboardDataBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            associated_actions: {
                [key: string]: components["schemas"]["ActionDto"][] | undefined;
            };
            message: string;
            result: components["schemas"]["ChartDashboardData"];
        };
        ResponseDataContactDtoBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            associated_actions: {
                [key: string]: components["schemas"]["ActionDto"][] | undefined;
            };
            message: string;
            result: components["schemas"]["ContactDto"];
        };
        ResponseDataCourtDtoBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            associated_actions: {
                [key: string]: components["schemas"]["ActionDto"][] | undefined;
            };
            message: string;
            result: components["schemas"]["CourtDto"];
        };
        ResponseDataEventBookingDtoBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            associated_actions: {
                [key: string]: components["schemas"]["ActionDto"][] | undefined;
            };
            message: string;
            result: components["schemas"]["EventBookingDto"];
        };
        "ResponseDataInterface {}Body": {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            associated_actions: {
                [key: string]: components["schemas"]["ActionDto"][] | undefined;
            };
            message: string;
            result: unknown;
        };
        ResponseDataInvoiceDtoBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            associated_actions: {
                [key: string]: components["schemas"]["ActionDto"][] | undefined;
            };
            message: string;
            result: components["schemas"]["InvoiceDto"];
        };
        ResponseDataItemPriceDtoBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            associated_actions: {
                [key: string]: components["schemas"]["ActionDto"][] | undefined;
            };
            message: string;
            result: components["schemas"]["ItemPriceDto"];
        };
        ResponseDataLedgerDtoBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            associated_actions: {
                [key: string]: components["schemas"]["ActionDto"][] | undefined;
            };
            message: string;
            result: components["schemas"]["LedgerDto"];
        };
        ResponseDataListBookingDataBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            associated_actions: {
                [key: string]: components["schemas"]["ActionDto"][] | undefined;
            };
            message: string;
            result: components["schemas"]["BookingData"][];
        };
        ResponseDataListChartDataDtoBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            associated_actions: {
                [key: string]: components["schemas"]["ActionDto"][] | undefined;
            };
            message: string;
            result: components["schemas"]["ChartDataDto"][];
        };
        ResponseDataListPartyConnectionsBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            associated_actions: {
                [key: string]: components["schemas"]["ActionDto"][] | undefined;
            };
            message: string;
            result: components["schemas"]["PartyConnections"][];
        };
        ResponseDataListPartyTypeDtoBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            associated_actions: {
                [key: string]: components["schemas"]["ActionDto"][] | undefined;
            };
            message: string;
            result: components["schemas"]["PartyTypeDto"][];
        };
        ResponseDataListTreeEntryDtoBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            associated_actions: {
                [key: string]: components["schemas"]["ActionDto"][] | undefined;
            };
            message: string;
            result: components["schemas"]["TreeEntryDto"][];
        };
        ResponseDataPaymentDtoBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            associated_actions: {
                [key: string]: components["schemas"]["ActionDto"][] | undefined;
            };
            message: string;
            result: components["schemas"]["PaymentDto"];
        };
        ResponseDataReceiptDtoBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            associated_actions: {
                [key: string]: components["schemas"]["ActionDto"][] | undefined;
            };
            message: string;
            result: components["schemas"]["ReceiptDto"];
        };
        ResponseMessageBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            errors: {
                [key: string]: string | undefined;
            };
            message: string;
        };
        ResultEntityAddressDto: {
            activities: components["schemas"]["ActivityDto"][];
            addresses: components["schemas"]["AddressDto"][];
            contacts: components["schemas"]["ContactDto"][];
            entity: components["schemas"]["AddressDto"];
        };
        ResultEntityBookingDto: {
            activities: components["schemas"]["ActivityDto"][];
            addresses: components["schemas"]["AddressDto"][];
            contacts: components["schemas"]["ContactDto"][];
            entity: components["schemas"]["BookingDto"];
        };
        ResultEntityCompanyDto: {
            activities: components["schemas"]["ActivityDto"][];
            addresses: components["schemas"]["AddressDto"][];
            contacts: components["schemas"]["ContactDto"][];
            entity: components["schemas"]["CompanyDto"];
        };
        ResultEntityCourtDto: {
            activities: components["schemas"]["ActivityDto"][];
            addresses: components["schemas"]["AddressDto"][];
            contacts: components["schemas"]["ContactDto"][];
            entity: components["schemas"]["CourtDto"];
        };
        ResultEntityCustomerDto: {
            activities: components["schemas"]["ActivityDto"][];
            addresses: components["schemas"]["AddressDto"][];
            contacts: components["schemas"]["ContactDto"][];
            entity: components["schemas"]["CustomerDto"];
        };
        ResultEntityEventBookingDto: {
            activities: components["schemas"]["ActivityDto"][];
            addresses: components["schemas"]["AddressDto"][];
            contacts: components["schemas"]["ContactDto"][];
            entity: components["schemas"]["EventBookingDto"];
        };
        ResultEntityGroupDto: {
            activities: components["schemas"]["ActivityDto"][];
            addresses: components["schemas"]["AddressDto"][];
            contacts: components["schemas"]["ContactDto"][];
            entity: components["schemas"]["GroupDto"];
        };
        ResultEntityInvoiceDetailDto: {
            activities: components["schemas"]["ActivityDto"][];
            addresses: components["schemas"]["AddressDto"][];
            contacts: components["schemas"]["ContactDto"][];
            entity: components["schemas"]["InvoiceDetailDto"];
        };
        ResultEntityItemAttributeDto: {
            activities: components["schemas"]["ActivityDto"][];
            addresses: components["schemas"]["AddressDto"][];
            contacts: components["schemas"]["ContactDto"][];
            entity: components["schemas"]["ItemAttributeDto"];
        };
        ResultEntityItemDetailDto: {
            activities: components["schemas"]["ActivityDto"][];
            addresses: components["schemas"]["AddressDto"][];
            contacts: components["schemas"]["ContactDto"][];
            entity: components["schemas"]["ItemDetailDto"];
        };
        ResultEntityItemPriceDto: {
            activities: components["schemas"]["ActivityDto"][];
            addresses: components["schemas"]["AddressDto"][];
            contacts: components["schemas"]["ContactDto"][];
            entity: components["schemas"]["ItemPriceDto"];
        };
        ResultEntityLedgerDetailDto: {
            activities: components["schemas"]["ActivityDto"][];
            addresses: components["schemas"]["AddressDto"][];
            contacts: components["schemas"]["ContactDto"][];
            entity: components["schemas"]["LedgerDetailDto"];
        };
        ResultEntityListCourtRateDto: {
            activities: components["schemas"]["ActivityDto"][];
            addresses: components["schemas"]["AddressDto"][];
            contacts: components["schemas"]["ContactDto"][];
            entity: components["schemas"]["CourtRateDto"][];
        };
        ResultEntityListCustomerType: {
            activities: components["schemas"]["ActivityDto"][];
            addresses: components["schemas"]["AddressDto"][];
            contacts: components["schemas"]["ContactDto"][];
            entity: components["schemas"]["CustomerType"][];
        };
        ResultEntityListEntityActionsDto: {
            activities: components["schemas"]["ActivityDto"][];
            addresses: components["schemas"]["AddressDto"][];
            contacts: components["schemas"]["ContactDto"][];
            entity: components["schemas"]["EntityActionsDto"][];
        };
        ResultEntityListGroupHierarchyDto: {
            activities: components["schemas"]["ActivityDto"][];
            addresses: components["schemas"]["AddressDto"][];
            contacts: components["schemas"]["ContactDto"][];
            entity: components["schemas"]["GroupHierarchyDto"][];
        };
        ResultEntityListItemPriceDto: {
            activities: components["schemas"]["ActivityDto"][];
            addresses: components["schemas"]["AddressDto"][];
            contacts: components["schemas"]["ContactDto"][];
            entity: components["schemas"]["ItemPriceDto"][];
        };
        ResultEntityListPartyDto: {
            activities: components["schemas"]["ActivityDto"][];
            addresses: components["schemas"]["AddressDto"][];
            contacts: components["schemas"]["ContactDto"][];
            entity: components["schemas"]["PartyDto"][];
        };
        ResultEntityListPartyTypeDto: {
            activities: components["schemas"]["ActivityDto"][];
            addresses: components["schemas"]["AddressDto"][];
            contacts: components["schemas"]["ContactDto"][];
            entity: components["schemas"]["PartyTypeDto"][];
        };
        ResultEntityOrderDto: {
            activities: components["schemas"]["ActivityDto"][];
            addresses: components["schemas"]["AddressDto"][];
            contacts: components["schemas"]["ContactDto"][];
            entity: components["schemas"]["OrderDto"];
        };
        ResultEntityPaymentDetailDto: {
            activities: components["schemas"]["ActivityDto"][];
            addresses: components["schemas"]["AddressDto"][];
            contacts: components["schemas"]["ContactDto"][];
            entity: components["schemas"]["PaymentDetailDto"];
        };
        ResultEntityPianoForm: {
            activities: components["schemas"]["ActivityDto"][];
            addresses: components["schemas"]["AddressDto"][];
            contacts: components["schemas"]["ContactDto"][];
            entity: components["schemas"]["PianoForm"];
        };
        ResultEntityPriceListDto: {
            activities: components["schemas"]["ActivityDto"][];
            addresses: components["schemas"]["AddressDto"][];
            contacts: components["schemas"]["ContactDto"][];
            entity: components["schemas"]["PriceListDto"];
        };
        ResultEntityProfileDto: {
            activities: components["schemas"]["ActivityDto"][];
            addresses: components["schemas"]["AddressDto"][];
            contacts: components["schemas"]["ContactDto"][];
            entity: components["schemas"]["ProfileDto"];
        };
        ResultEntityReceiptDetailDto: {
            activities: components["schemas"]["ActivityDto"][];
            addresses: components["schemas"]["AddressDto"][];
            contacts: components["schemas"]["ContactDto"][];
            entity: components["schemas"]["ReceiptDetailDto"];
        };
        ResultEntityRoleDto: {
            activities: components["schemas"]["ActivityDto"][];
            addresses: components["schemas"]["AddressDto"][];
            contacts: components["schemas"]["ContactDto"][];
            entity: components["schemas"]["RoleDto"];
        };
        ResultEntitySupplierDto: {
            activities: components["schemas"]["ActivityDto"][];
            addresses: components["schemas"]["AddressDto"][];
            contacts: components["schemas"]["ContactDto"][];
            entity: components["schemas"]["SupplierDto"];
        };
        ResultEntityTaxDto: {
            activities: components["schemas"]["ActivityDto"][];
            addresses: components["schemas"]["AddressDto"][];
            contacts: components["schemas"]["ContactDto"][];
            entity: components["schemas"]["TaxDto"];
        };
        ResultEntityWareHouseDto: {
            activities: components["schemas"]["ActivityDto"][];
            addresses: components["schemas"]["AddressDto"][];
            contacts: components["schemas"]["ContactDto"][];
            entity: components["schemas"]["WareHouseDto"];
        };
        RoleActionDto: {
            action: components["schemas"]["ActionDto"];
            /** Format: int64 */
            action_id: number;
            /** Format: int64 */
            role_id: number;
        };
        RoleDto: {
            code: string;
            /** Format: date-time */
            created_at: string;
            description: string | null;
            /** Format: date-time */
            updated_at: string | null;
            uuid: string;
        };
        SignInRequestBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            /** @description Email of the user */
            email: string;
            /** @description Password of the user */
            password: string;
        };
        SignInResponseBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            /** @description Access token of the user */
            access_token: string;
            user: components["schemas"]["UserDto"];
            user_relation: components["schemas"]["UserRelationDto"];
        };
        StockBalanceEntryDto: {
            /** Format: int32 */
            average_rate: number;
            /** Format: int32 */
            balance_qty: number;
            /** Format: int32 */
            balance_value: number;
            currency: string;
            /** Format: date-time */
            date: string;
            /** Format: int32 */
            in_qty: number;
            item_group_name: string;
            item_group_uuid: string;
            item_name: string;
            item_uuid: string;
            /** Format: int32 */
            out_qty: number;
            stock_uom: string;
            warehouse_name: string;
            warehouse_uuid: string;
        };
        StockLedgerEntryDto: {
            /** Format: int32 */
            average_rate: number;
            /** Format: int32 */
            balance_qty: number;
            /** Format: int32 */
            balance_value: number;
            currency: string;
            /** Format: date-time */
            date: string;
            /** Format: int32 */
            in_qty: number;
            /** Format: int32 */
            incoming_rate: number;
            item_group_name: string;
            item_group_uuid: string;
            item_name: string;
            item_uuid: string;
            /** Format: int32 */
            out_qty: number;
            stock_uom: string;
            /** Format: int32 */
            valuation_rate: number;
            voucher_no: string;
            voucher_type: string;
            warehouse_name: string;
            warehouse_uuid: string;
        };
        StockLevelDto: {
            /** Format: date-time */
            created_at: string;
            enabled: boolean;
            item_name: string;
            item_uuid: string;
            /** Format: int32 */
            out_of_stock_threshold: number;
            /** Format: int32 */
            stock: number;
            uuid: string;
            warehouse_name: string;
            warehouse_uuid: string;
        };
        SumaryEntryDto: {
            currency: string;
            party_name: string;
            party_type: string;
            party_uuid: string;
            receivable_account: string;
            receivable_account_uuid: string;
            /** Format: int64 */
            total_invoiced_amount: number;
            /** Format: int64 */
            total_paid_amount: number;
        };
        SupplierDto: {
            /** Format: date-time */
            created_at: string;
            enabled: boolean;
            group?: components["schemas"]["GroupDto"];
            /** Format: int64 */
            id: number;
            name: string;
            uuid: string;
        };
        TaxDto: {
            /** Format: date-time */
            created_at: string;
            enabled: boolean;
            /** Format: int64 */
            id: number;
            name: string;
            uuid: string;
            /** Format: double */
            value: number;
        };
        TotalsDto: {
            /** Format: int32 */
            paid: number;
            /** Format: int32 */
            total: number;
        };
        TreeEntryDto: {
            /** Format: int64 */
            id: number;
            is_group: boolean;
            name: string;
            /** Format: int64 */
            parent: number;
            uuid: string;
        };
        UOMDto: {
            code: string;
            /** Format: int64 */
            id: number;
            name: string;
        };
        UOMsResponseBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            results: components["schemas"]["UOMDto"][];
        };
        UpdateCourtRatesBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            court_rate: components["schemas"]["CourtRateData"][];
            court_uuid: string;
        };
        UpdateCredentialsPluginRequestBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            credentials: string;
        };
        UpdateItemLineBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            /** Format: int32 */
            item_line: number;
            /** Format: uuid */
            item_price_uuid: string;
            party_type: string;
            /** Format: int32 */
            quantity: number;
            /** Format: double */
            rate: number;
        };
        UpdateItemRequestBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            item_type: string;
            name: string;
        };
        UpdatePasswordRequestBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            newPassword: string;
            password: string;
        };
        UpdateProfileRequestBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            profile: components["schemas"]["EditableProfileFields"];
        };
        UpdateStateWithEventBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            current_state: string;
            events: number[];
            party_id: string;
            party_type?: string;
        };
        UpsertItemAttributeValueRequestBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            abbreviation: string;
            /** Format: int32 */
            id?: number;
            /** Format: int64 */
            itemAttributeId?: number;
            /** Format: int32 */
            ordinal: number;
            value: string;
        };
        UpsertItemPriceRequestBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            itemPrice: components["schemas"]["ItemPrice"];
        };
        UpsertPriceListRequestBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            itemPriceList: components["schemas"]["PriceList"];
        };
        UserDto: {
            /** Format: date-time */
            created_at: string;
            /** Format: int64 */
            id: number;
            identifier: string;
            /** Format: date-time */
            last_login: string | null;
            uuid: string;
        };
        UserRelationDto: {
            company: components["schemas"]["CompanyDto"];
            profile: components["schemas"]["ProfileDto"];
            role: components["schemas"]["RoleDto"];
            uuid: string;
        };
        ValidateBookingBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            /** Format: int64 */
            booking_id?: number;
            bookings: components["schemas"]["BookingData"][];
        };
        WareHouseDto: {
            /** Format: date-time */
            created_at: string;
            enabled: boolean;
            /** Format: int64 */
            id: number;
            name: string;
            uuid: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    "get-account": {
        parameters: {
            query?: {
                query?: string;
                order?: string;
                column?: string;
                parentId?: string;
            };
            header?: {
                Authorization?: string;
                "Active-Company"?: string;
                "User-Session-Uuid"?: string;
                Role?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AccountResponseBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "change-password": {
        parameters: {
            query?: never;
            header?: {
                "Accept-Language"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ChangePasswordRequestBody"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseMessageBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "update-password": {
        parameters: {
            query?: {
                query?: string;
                order?: string;
                column?: string;
                parentId?: string;
            };
            header?: {
                Authorization?: string;
                "Active-Company"?: string;
                "User-Session-Uuid"?: string;
                Role?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdatePasswordRequestBody"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseMessageBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "reset-password": {
        parameters: {
            query?: never;
            header?: {
                "Accept-Language"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ResetPasswordRequestBody"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseMessageBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "get-sessions": {
        parameters: {
            query?: {
                query?: string;
                order?: string;
                column?: string;
                parentId?: string;
            };
            header?: {
                Authorization?: string;
                "Active-Company"?: string;
                "User-Session-Uuid"?: string;
                Role?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EntityResponseListUserRelationDtoBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "sign-in": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SignInRequestBody"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SignInResponseBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "get-account-payable": {
        parameters: {
            query: {
                query?: string;
                order?: string;
                column?: string;
                parentId?: string;
                from_date: string;
                to_date: string;
                parties?: string;
            };
            header?: {
                Authorization?: string;
                "Active-Company"?: string;
                "User-Session-Uuid"?: string;
                Role?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EntityResponseListAccountPayableEntryDtoBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "get-account-payable-sumary": {
        parameters: {
            query: {
                query?: string;
                order?: string;
                column?: string;
                parentId?: string;
                from_date: string;
                to_date: string;
                parties?: string;
            };
            header?: {
                Authorization?: string;
                "Active-Company"?: string;
                "User-Session-Uuid"?: string;
                Role?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EntityResponseListSumaryEntryDtoBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "get-general-ledger": {
        parameters: {
            query: {
                query?: string;
                order?: string;
                column?: string;
                parentId?: string;
                from_date: string;
                to_date: string;
                account?: string;
                voucher_no?: string;
                agains_voucher_no?: string;
                party_type?: string;
                party?: string;
                currency?: string;
            };
            header?: {
                Authorization?: string;
                "Active-Company"?: string;
                "User-Session-Uuid"?: string;
                Role?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EntityResponseListGeneralLedgerEntryDtoBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "get-taxes": {
        parameters: {
            query: {
                page: string;
                size: string;
                enabled?: string;
                is_group?: string;
                query?: string;
                order?: string;
                column?: string;
                parentId?: string;
            };
            header?: {
                Authorization?: string;
                "Active-Company"?: string;
                "User-Session-Uuid"?: string;
                Role?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginationResponsePaginationResultListTaxDtoBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "create-tax": {
        parameters: {
            query?: {
                query?: string;
                order?: string;
                column?: string;
                parentId?: string;
            };
            header?: {
                Authorization?: string;
                "Active-Company"?: string;
                "User-Session-Uuid"?: string;
                Role?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateTaxRequestBody"];
            };
        };
        responses: {
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseMessageBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "get-tax-detail": {
        parameters: {
            query?: {
                query?: string;
                order?: string;
                column?: string;
                parentId?: string;
            };
            header?: {
                Authorization?: string;
                "Active-Company"?: string;
                "User-Session-Uuid"?: string;
                Role?: string;
            };
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EntityResponseResultEntityTaxDtoBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "edit-activity-comment": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["EditActivityCommnetBody"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseMessageBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "delete-activity-comment": {
        parameters: {
            query?: {
                id?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseMessageBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "activity-comment": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateActivityCommnetBody"];
            };
        };
        responses: {
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseMessageBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "a-companies": {
        parameters: {
            query: {
                page: string;
                size: string;
                enabled?: string;
                is_group?: string;
                query?: string;
                order?: string;
                column?: string;
                parentId?: string;
            };
            header?: {
                Authorization?: string;
                "Active-Company"?: string;
                "User-Session-Uuid"?: string;
                Role?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginationResponsePaginationResultListCompanyDtoBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "a-company-detail": {
        parameters: {
            query?: {
                query?: string;
                order?: string;
                column?: string;
                parentId?: string;
            };
            header?: {
                Authorization?: string;
                "Active-Company"?: string;
                "User-Session-Uuid"?: string;
                Role?: string;
            };
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EntityResponseResultEntityCompanyDtoBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "a-company-modules": {
        parameters: {
            query?: {
                id?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EntityResponseListCompanyEntityDtoBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "a-add-company-modules": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AddCompanyModulesBody"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseMessageBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "a-company-users": {
        parameters: {
            query?: {
                id?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EntityResponseListUserDtoBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "sign-in-admin": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SignInRequestBody"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SignInResponseBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "get-client-profile": {
        parameters: {
            query?: {
                query?: string;
                order?: string;
                column?: string;
                parentId?: string;
            };
            header?: {
                Authorization?: string;
                "Active-Company"?: string;
                "User-Session-Uuid"?: string;
                Role?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EntityResponseClientBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "update-client-profile": {
        parameters: {
            query?: {
                query?: string;
                order?: string;
                column?: string;
                parentId?: string;
            };
            header?: {
                Authorization?: string;
                "Active-Company"?: string;
                "User-Session-Uuid"?: string;
                Role?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["EditClientRequestBody"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseMessageBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    companies: {
        parameters: {
            query: {
                page: string;
                size: string;
                enabled?: string;
                is_group?: string;
                query?: string;
                order?: string;
                column?: string;
                parentId?: string;
            };
            header?: {
                Authorization?: string;
                "Active-Company"?: string;
                "User-Session-Uuid"?: string;
                Role?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginationResponsePaginationResultListCompanyDtoBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "create-company": {
        parameters: {
            query?: {
                query?: string;
                order?: string;
                column?: string;
                parentId?: string;
            };
            header?: {
                Authorization?: string;
                "Active-Company"?: string;
                "User-Session-Uuid"?: string;
                Role?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateCompanyRequestBody"];
            };
        };
        responses: {
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseMessageBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "company-detail": {
        parameters: {
            query?: {
                query?: string;
                order?: string;
                column?: string;
                parentId?: string;
            };
            header?: {
                Authorization?: string;
                "Active-Company"?: string;
                "User-Session-Uuid"?: string;
                Role?: string;
            };
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EntityResponseCompanyDtoBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "user-companies": {
        parameters: {
            query: {
                page: string;
                size: string;
                enabled?: string;
                is_group?: string;
                query?: string;
                order?: string;
                column?: string;
                parentId?: string;
            };
            header?: {
                Authorization?: string;
                "Active-Company"?: string;
                "User-Session-Uuid"?: string;
                Role?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginationResponsePaginationResultListCompanyDtoBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "valid-parent-companies": {
        parameters: {
            query: {
                page: string;
                size: string;
                enabled?: string;
                is_group?: string;
                query?: string;
                order?: string;
                column?: string;
                parentId?: string;
            };
            header?: {
                Authorization?: string;
                "Active-Company"?: string;
                "User-Session-Uuid"?: string;
                Role?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginationResponsePaginationResultListCompanyDtoBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "get-company-by-uuid": {
        parameters: {
            query?: never;
            header?: {
                "Accept-Language"?: string;
            };
            path: {
                uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EntityResponseCompanyBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "get courts": {
        parameters: {
            query: {
                page: string;
                size: string;
                enabled?: string;
                is_group?: string;
                query?: string;
                order?: string;
                column?: string;
                parentId?: string;
            };
            header?: {
                Authorization?: string;
                "Active-Company"?: string;
                "User-Session-Uuid"?: string;
                Role?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginationResponsePaginationResultListCourtDtoBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "create court": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateCourtBody"];
            };
        };
        responses: {
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseDataCourtDtoBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "update-court-rates": {
        parameters: {
            query?: {
                query?: string;
                order?: string;
                column?: string;
                parentId?: string;
            };
            header?: {
                Authorization?: string;
                "Active-Company"?: string;
                "User-Session-Uuid"?: string;
                Role?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateCourtRatesBody"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseDataCourtDtoBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "get-court-rates": {
        parameters: {
            query?: {
                query?: string;
                order?: string;
                column?: string;
                parentId?: string;
            };
            header?: {
                Authorization?: string;
                "Active-Company"?: string;
                "User-Session-Uuid"?: string;
                Role?: string;
            };
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EntityResponseResultEntityListCourtRateDtoBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "get court": {
        parameters: {
            query?: {
                query?: string;
                order?: string;
                column?: string;
                parentId?: string;
            };
            header?: {
                Authorization?: string;
                "Active-Company"?: string;
                "User-Session-Uuid"?: string;
                Role?: string;
            };
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EntityResponseResultEntityCourtDtoBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "cuatropf-subscription": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                companyUuid: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CuatropfSubscriptionRequestBody"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseMessageBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "get currencies": {
        parameters: {
            query: {
                page: string;
                size: string;
                enabled?: string;
                is_group?: string;
                query?: string;
                order?: string;
                column?: string;
                parentId?: string;
            };
            header?: {
                Authorization?: string;
                "Active-Company"?: string;
                "User-Session-Uuid"?: string;
                Role?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginationResponsePaginationResultListCurrencyDtoBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "get customers": {
        parameters: {
            query: {
                page: string;
                size: string;
                enabled?: string;
                is_group?: string;
                query?: string;
                order?: string;
                column?: string;
                parentId?: string;
            };
            header?: {
                Authorization?: string;
                "Active-Company"?: string;
                "User-Session-Uuid"?: string;
                Role?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginationResponsePaginationResultListCustomerDtoBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "create customer": {
        parameters: {
            query?: {
                query?: string;
                order?: string;
                column?: string;
                parentId?: string;
            };
            header?: {
                Authorization?: string;
                "Active-Company"?: string;
                "User-Session-Uuid"?: string;
                Role?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateCustomerBody"];
            };
        };
        responses: {
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseMessageBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "customer types": {
        parameters: {
            query?: {
                query?: string;
                order?: string;
                column?: string;
                parentId?: string;
            };
            header?: {
                Authorization?: string;
                "Active-Company"?: string;
                "User-Session-Uuid"?: string;
                Role?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EntityResponseResultEntityListCustomerTypeBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "get customer": {
        parameters: {
            query?: {
                query?: string;
                order?: string;
                column?: string;
                parentId?: string;
            };
            header?: {
                Authorization?: string;
                "Active-Company"?: string;
                "User-Session-Uuid"?: string;
                Role?: string;
            };
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EntityResponseResultEntityCustomerDtoBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "get-greeting-by-name": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description Name to greet
                 * @example world
                 */
                name: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GreetingOutputBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "create group": {
        parameters: {
            query?: {
                query?: string;
                order?: string;
                column?: string;
                parentId?: string;
            };
            header?: {
                Authorization?: string;
                "Active-Company"?: string;
                "User-Session-Uuid"?: string;
                Role?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateGroupRequestBody"];
            };
        };
        responses: {
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseMessageBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "get group descendents": {
        parameters: {
            query: {
                query?: string;
                order?: string;
                column?: string;
                parentId?: string;
                party: string;
            };
            header?: {
                Authorization?: string;
                "Active-Company"?: string;
                "User-Session-Uuid"?: string;
                Role?: string;
            };
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EntityResponseResultEntityListGroupHierarchyDtoBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "get group": {
        parameters: {
            query: {
                query?: string;
                order?: string;
                column?: string;
                parentId?: string;
                party: string;
            };
            header?: {
                Authorization?: string;
                "Active-Company"?: string;
                "User-Session-Uuid"?: string;
                Role?: string;
            };
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EntityResponseResultEntityGroupDtoBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "get groups by party code": {
        parameters: {
            query: {
                page: string;
                size: string;
                enabled?: string;
                is_group?: string;
                query?: string;
                order?: string;
                column?: string;
                parentId?: string;
            };
            header?: {
                Authorization?: string;
                "Active-Company"?: string;
                "User-Session-Uuid"?: string;
                Role?: string;
            };
            path: {
                party: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginationResponsePaginationResultListGroupDtoBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "create invoice": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateInvoiceBody"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseDataInvoiceDtoBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "get invoice": {
        parameters: {
            query: {
                query?: string;
                order?: string;
                column?: string;
                parentId?: string;
                party: string;
            };
            header?: {
                Authorization?: string;
                "Active-Company"?: string;
                "User-Session-Uuid"?: string;
                Role?: string;
            };
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EntityResponseResultEntityInvoiceDetailDtoBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "update invoice state": {
        parameters: {
            query?: {
                query?: string;
                order?: string;
                column?: string;
                parentId?: string;
            };
            header?: {
                Authorization?: string;
                "Active-Company"?: string;
                "User-Session-Uuid"?: string;
                Role?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateStateWithEventBody"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseMessageBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "get invoices": {
        parameters: {
            query: {
                page: string;
                size: string;
                enabled?: string;
                is_group?: string;
                query?: string;
                order?: string;
                column?: string;
                parentId?: string;
            };
            header?: {
                Authorization?: string;
                "Active-Company"?: string;
                "User-Session-Uuid"?: string;
                Role?: string;
            };
            path: {
                party: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginationResponsePaginationResultListInvoiceDtoBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "update-item-line": {
        parameters: {
            query?: {
                query?: string;
                order?: string;
                column?: string;
                parentId?: string;
            };
            header?: {
                Authorization?: string;
                "Active-Company"?: string;
                "User-Session-Uuid"?: string;
                Role?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateItemLineBody"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseMessageBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "get-acconts": {
        parameters: {
            query: {
                page: string;
                size: string;
                enabled?: string;
                is_group?: string;
                query?: string;
                order?: string;
                column?: string;
                parentId?: string;
                is_credit_balance?: string;
                is_debit_balance?: string;
            };
            header?: {
                Authorization?: string;
                "Active-Company"?: string;
                "User-Session-Uuid"?: string;
                Role?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginationResponsePaginationResultListLedgerDtoBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "create-ledger": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateLedgerBody"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseDataLedgerDtoBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "get-ledger-detail": {
        parameters: {
            query?: {
                query?: string;
                order?: string;
                column?: string;
                parentId?: string;
            };
            header?: {
                Authorization?: string;
                "Active-Company"?: string;
                "User-Session-Uuid"?: string;
                Role?: string;
            };
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EntityResponseResultEntityLedgerDetailDtoBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "get-general-ledger": {
        parameters: {
            query: {
                query?: string;
                order?: string;
                column?: string;
                parentId?: string;
                from_date: string;
                to_date: string;
                account?: string;
                voucher_no?: string;
                agains_voucher_no?: string;
                party_type?: string;
                party?: string;
                currency?: string;
            };
            header?: {
                Authorization?: string;
                "Active-Company"?: string;
                "User-Session-Uuid"?: string;
                Role?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EntityResponseListGeneralLedgerEntryDtoBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "get-ledgers-tree-view": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseDataListTreeEntryDtoBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "create order": {
        parameters: {
            query?: {
                query?: string;
                order?: string;
                column?: string;
                parentId?: string;
            };
            header?: {
                Authorization?: string;
                "Active-Company"?: string;
                "User-Session-Uuid"?: string;
                Role?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateOrderBody"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EntityResponseResultEntityOrderDtoBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "get order": {
        parameters: {
            query: {
                query?: string;
                order?: string;
                column?: string;
                parentId?: string;
                party: string;
            };
            header?: {
                Authorization?: string;
                "Active-Company"?: string;
                "User-Session-Uuid"?: string;
                Role?: string;
            };
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EntityResponseResultEntityOrderDtoBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "update-order-status": {
        parameters: {
            query?: {
                query?: string;
                order?: string;
                column?: string;
                parentId?: string;
            };
            header?: {
                Authorization?: string;
                "Active-Company"?: string;
                "User-Session-Uuid"?: string;
                Role?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateStateWithEventBody"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseMessageBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "get orders": {
        parameters: {
            query: {
                page: string;
                size: string;
                enabled?: string;
                is_group?: string;
                query?: string;
                order?: string;
                column?: string;
                parentId?: string;
            };
            header?: {
                Authorization?: string;
                "Active-Company"?: string;
                "User-Session-Uuid"?: string;
                Role?: string;
            };
            path: {
                party: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginationResponsePaginationResultListOrderDtoBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "get addresses": {
        parameters: {
            query: {
                page: string;
                size: string;
                enabled?: string;
                is_group?: string;
                query?: string;
                order?: string;
                column?: string;
                parentId?: string;
            };
            header?: {
                Authorization?: string;
                "Active-Company"?: string;
                "User-Session-Uuid"?: string;
                Role?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginationResponsePaginationResultListAddressDtoBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "create address": {
        parameters: {
            query?: {
                query?: string;
                order?: string;
                column?: string;
                parentId?: string;
            };
            header?: {
                Authorization?: string;
                "Active-Company"?: string;
                "User-Session-Uuid"?: string;
                Role?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreatePartyAddressRequestBody"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseMessageBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "get address": {
        parameters: {
            query?: {
                query?: string;
                order?: string;
                column?: string;
                parentId?: string;
            };
            header?: {
                Authorization?: string;
                "Active-Company"?: string;
                "User-Session-Uuid"?: string;
                Role?: string;
            };
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EntityResponseResultEntityAddressDtoBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "get address references": {
        parameters: {
            query?: {
                query?: string;
                order?: string;
                column?: string;
                parentId?: string;
            };
            header?: {
                Authorization?: string;
                "Active-Company"?: string;
                "User-Session-Uuid"?: string;
                Role?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EntityResponseResultEntityListPartyTypeDtoBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "get party connections": {
        parameters: {
            query: {
                query?: string;
                order?: string;
                column?: string;
                parentId?: string;
                party: string;
            };
            header?: {
                Authorization?: string;
                "Active-Company"?: string;
                "User-Session-Uuid"?: string;
                Role?: string;
            };
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseDataListPartyConnectionsBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "get contacts": {
        parameters: {
            query: {
                page: string;
                size: string;
                enabled?: string;
                is_group?: string;
                query?: string;
                order?: string;
                column?: string;
                parentId?: string;
            };
            header?: {
                Authorization?: string;
                "Active-Company"?: string;
                "User-Session-Uuid"?: string;
                Role?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginationResponsePaginationResultListContactDtoBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "create contact": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateContactBody"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseDataContactDtoBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "get contact": {
        parameters: {
            query?: {
                query?: string;
                order?: string;
                column?: string;
                parentId?: string;
            };
            header?: {
                Authorization?: string;
                "Active-Company"?: string;
                "User-Session-Uuid"?: string;
                Role?: string;
            };
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseDataContactDtoBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "get party by reference": {
        parameters: {
            query?: {
                query?: string;
                order?: string;
                column?: string;
                parentId?: string;
            };
            header?: {
                Authorization?: string;
                "Active-Company"?: string;
                "User-Session-Uuid"?: string;
                Role?: string;
            };
            path: {
                party_type: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EntityResponseResultEntityListPartyDtoBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "get party references": {
        parameters: {
            query: {
                page: string;
                size: string;
                enabled?: string;
                is_group?: string;
                query?: string;
                order?: string;
                column?: string;
                parentId?: string;
            };
            header?: {
                Authorization?: string;
                "Active-Company"?: string;
                "User-Session-Uuid"?: string;
                Role?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginationResponsePaginationResultListPartyReferenceDtoBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "add party reference": {
        parameters: {
            query?: {
                query?: string;
                order?: string;
                column?: string;
                parentId?: string;
            };
            header?: {
                Authorization?: string;
                "Active-Company"?: string;
                "User-Session-Uuid"?: string;
                Role?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["RequestAddPartyReferenceBody"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseMessageBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "get party type references": {
        parameters: {
            query?: {
                query?: string;
                order?: string;
                column?: string;
                parentId?: string;
            };
            header?: {
                Authorization?: string;
                "Active-Company"?: string;
                "User-Session-Uuid"?: string;
                Role?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseDataListPartyTypeDtoBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "get party user types": {
        parameters: {
            query?: {
                query?: string;
                order?: string;
                column?: string;
                parentId?: string;
            };
            header?: {
                Authorization?: string;
                "Active-Company"?: string;
                "User-Session-Uuid"?: string;
                Role?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EntityResponseResultEntityListPartyTypeDtoBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "get-payments": {
        parameters: {
            query: {
                page: string;
                size: string;
                enabled?: string;
                is_group?: string;
                query?: string;
                order?: string;
                column?: string;
                parentId?: string;
                invoice_id?: string;
                status?: string;
            };
            header?: {
                Authorization?: string;
                "Active-Company"?: string;
                "User-Session-Uuid"?: string;
                Role?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginationResponsePaginationResultListPaymentDtoBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "create-payment": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreatePaymentBody"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseDataPaymentDtoBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "get payment actions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseDataInterface {}Body"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "get payment detail": {
        parameters: {
            query?: {
                query?: string;
                order?: string;
                column?: string;
                parentId?: string;
            };
            header?: {
                Authorization?: string;
                "Active-Company"?: string;
                "User-Session-Uuid"?: string;
                Role?: string;
            };
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EntityResponseResultEntityPaymentDetailDtoBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "get-parties-type": {
        parameters: {
            query?: {
                query?: string;
                order?: string;
                column?: string;
                parentId?: string;
            };
            header?: {
                Authorization?: string;
                "Active-Company"?: string;
                "User-Session-Uuid"?: string;
                Role?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseDataListPartyTypeDtoBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "update payment state": {
        parameters: {
            query?: {
                query?: string;
                order?: string;
                column?: string;
                parentId?: string;
            };
            header?: {
                Authorization?: string;
                "Active-Company"?: string;
                "User-Session-Uuid"?: string;
                Role?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateStateWithEventBody"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseMessageBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "get piano forms": {
        parameters: {
            query: {
                page: string;
                size: string;
                enabled?: string;
                is_group?: string;
                query?: string;
                order?: string;
                column?: string;
                parentId?: string;
            };
            header?: {
                Authorization?: string;
                "Active-Company"?: string;
                "User-Session-Uuid"?: string;
                Role?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginationResponsePaginationResultListPianoFormBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "create piano form": {
        parameters: {
            query?: never;
            header?: {
                "Accept-Language"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreatePianoBody"];
            };
        };
        responses: {
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseMessageBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "export data": {
        parameters: {
            query?: {
                query?: string;
                order?: string;
                column?: string;
                parentId?: string;
            };
            header?: {
                Authorization?: string;
                "Active-Company"?: string;
                "User-Session-Uuid"?: string;
                Role?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PianoExportRequestBody"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "get piano form": {
        parameters: {
            query?: {
                query?: string;
                order?: string;
                column?: string;
                parentId?: string;
            };
            header?: {
                Authorization?: string;
                "Active-Company"?: string;
                "User-Session-Uuid"?: string;
                Role?: string;
            };
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EntityResponseResultEntityPianoFormBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    plugins: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PluginsResponseBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "add-plugin": {
        parameters: {
            query?: {
                query?: string;
                order?: string;
                column?: string;
                parentId?: string;
            };
            header?: {
                Authorization?: string;
                "Active-Company"?: string;
                "User-Session-Uuid"?: string;
                Role?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AddPluginRequestBody"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AddPluginResponseBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "get-plugin": {
        parameters: {
            query?: {
                query?: string;
                order?: string;
                column?: string;
                parentId?: string;
            };
            header?: {
                Authorization?: string;
                "Active-Company"?: string;
                "User-Session-Uuid"?: string;
                Role?: string;
            };
            path: {
                plugin: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PluginDetailResponseBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "update-plugin-credentials": {
        parameters: {
            query?: {
                query?: string;
                order?: string;
                column?: string;
                parentId?: string;
            };
            header?: {
                Authorization?: string;
                "Active-Company"?: string;
                "User-Session-Uuid"?: string;
                Role?: string;
            };
            path: {
                plugin: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateCredentialsPluginRequestBody"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseMessageBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "create purchase order": {
        parameters: {
            query?: {
                query?: string;
                order?: string;
                column?: string;
                parentId?: string;
            };
            header?: {
                Authorization?: string;
                "Active-Company"?: string;
                "User-Session-Uuid"?: string;
                Role?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreatePurchaseOrderRequestBody"];
            };
        };
        responses: {
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EntityResponseResultEntityOrderDtoBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "create-receipt": {
        parameters: {
            query?: {
                query?: string;
                order?: string;
                column?: string;
                parentId?: string;
            };
            header?: {
                Authorization?: string;
                "Active-Company"?: string;
                "User-Session-Uuid"?: string;
                Role?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateReceiptBody"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseDataReceiptDtoBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "get-receipt-detail": {
        parameters: {
            query: {
                query?: string;
                order?: string;
                column?: string;
                parentId?: string;
                party: string;
            };
            header?: {
                Authorization?: string;
                "Active-Company"?: string;
                "User-Session-Uuid"?: string;
                Role?: string;
            };
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EntityResponseResultEntityReceiptDetailDtoBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "update-receipt-state": {
        parameters: {
            query?: {
                query?: string;
                order?: string;
                column?: string;
                parentId?: string;
            };
            header?: {
                Authorization?: string;
                "Active-Company"?: string;
                "User-Session-Uuid"?: string;
                Role?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateStateWithEventBody"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseMessageBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "get-receipts": {
        parameters: {
            query: {
                page: string;
                size: string;
                enabled?: string;
                is_group?: string;
                query?: string;
                order?: string;
                column?: string;
                parentId?: string;
            };
            header?: {
                Authorization?: string;
                "Active-Company"?: string;
                "User-Session-Uuid"?: string;
                Role?: string;
            };
            path: {
                party: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginationResponsePaginationResultListReceiptDtoBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "get-bookings": {
        parameters: {
            query: {
                event_id?: string;
                customer_id?: string;
                court_id?: string;
                page: string;
                size: string;
                enabled?: string;
                is_group?: string;
                query?: string;
                order?: string;
                column?: string;
                parentId?: string;
            };
            header?: {
                Authorization?: string;
                "Active-Company"?: string;
                "User-Session-Uuid"?: string;
                Role?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginationResponsePaginationResultListBookingDtoBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "create booking": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateBookingBody"];
            };
        };
        responses: {
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseMessageBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "get-booking": {
        parameters: {
            query?: {
                query?: string;
                order?: string;
                column?: string;
                parentId?: string;
            };
            header?: {
                Authorization?: string;
                "Active-Company"?: string;
                "User-Session-Uuid"?: string;
                Role?: string;
            };
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EntityResponseResultEntityBookingDtoBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "update-paid-amount": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["BookingPaymentBody"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseMessageBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "booking-reschedule": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["BookingRescheduleBody"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseMessageBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "update-booking-status": {
        parameters: {
            query?: {
                query?: string;
                order?: string;
                column?: string;
                parentId?: string;
            };
            header?: {
                Authorization?: string;
                "Active-Company"?: string;
                "User-Session-Uuid"?: string;
                Role?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateStateWithEventBody"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseMessageBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "validate-booking": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ValidateBookingBody"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseDataListBookingDataBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "get-chart-dashboard-data": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ChartDataBody"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseDataChartDashboardDataBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "get-chart-data": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                chart: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ChartDataBody"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseDataListChartDataDtoBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "get-event-bookings": {
        parameters: {
            query: {
                page: string;
                size: string;
                enabled?: string;
                is_group?: string;
                query?: string;
                order?: string;
                column?: string;
                parentId?: string;
            };
            header?: {
                Authorization?: string;
                "Active-Company"?: string;
                "User-Session-Uuid"?: string;
                Role?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginationResponsePaginationResultListEventBookingDtoBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "create-event-booking": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateEventBookingBody"];
            };
        };
        responses: {
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseDataEventBookingDtoBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "get-event-booking": {
        parameters: {
            query?: {
                query?: string;
                order?: string;
                column?: string;
                parentId?: string;
            };
            header?: {
                Authorization?: string;
                "Active-Company"?: string;
                "User-Session-Uuid"?: string;
                Role?: string;
            };
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EntityResponseResultEntityEventBookingDtoBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "get roles": {
        parameters: {
            query: {
                page: string;
                size: string;
                enabled?: string;
                is_group?: string;
                query?: string;
                order?: string;
                column?: string;
                parentId?: string;
            };
            header?: {
                Authorization?: string;
                "Active-Company"?: string;
                "User-Session-Uuid"?: string;
                Role?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginationResponsePaginationResultListRoleDtoBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "create role": {
        parameters: {
            query?: {
                query?: string;
                order?: string;
                column?: string;
                parentId?: string;
            };
            header?: {
                Authorization?: string;
                "Active-Company"?: string;
                "User-Session-Uuid"?: string;
                Role?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateRoleRequestBody"];
            };
        };
        responses: {
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseMessageBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "get role": {
        parameters: {
            query?: {
                query?: string;
                order?: string;
                column?: string;
                parentId?: string;
            };
            header?: {
                Authorization?: string;
                "Active-Company"?: string;
                "User-Session-Uuid"?: string;
                Role?: string;
            };
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EntityResponseResultEntityRoleDtoBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "get entity actions": {
        parameters: {
            query?: {
                query?: string;
                order?: string;
                column?: string;
                parentId?: string;
            };
            header?: {
                Authorization?: string;
                "Active-Company"?: string;
                "User-Session-Uuid"?: string;
                Role?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EntityResponseResultEntityListEntityActionsDtoBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "update role permision action": {
        parameters: {
            query?: {
                query?: string;
                order?: string;
                column?: string;
                parentId?: string;
            };
            header?: {
                Authorization?: string;
                "Active-Company"?: string;
                "User-Session-Uuid"?: string;
                Role?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["EditRolePermissionActionsBody"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseMessageBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "get role definitions": {
        parameters: {
            query: {
                page: string;
                size: string;
                enabled?: string;
                is_group?: string;
                query?: string;
                order?: string;
                column?: string;
                parentId?: string;
            };
            header?: {
                Authorization?: string;
                "Active-Company"?: string;
                "User-Session-Uuid"?: string;
                Role?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginationResponsePaginationResultListRoleActionDtoBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "get-stock-balance-report": {
        parameters: {
            query?: {
                query?: string;
                order?: string;
                column?: string;
                parentId?: string;
                from_date?: string;
                to_date?: string;
                item?: string;
                warehouse?: string;
            };
            header?: {
                Authorization?: string;
                "Active-Company"?: string;
                "User-Session-Uuid"?: string;
                Role?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EntityResponseListStockBalanceEntryDtoBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "get-stock_ledger-report": {
        parameters: {
            query: {
                query?: string;
                order?: string;
                column?: string;
                parentId?: string;
                from_date: string;
                to_date: string;
                voucher_no?: string;
                item?: string;
                warehouse?: string;
            };
            header?: {
                Authorization?: string;
                "Active-Company"?: string;
                "User-Session-Uuid"?: string;
                Role?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EntityResponseListStockLedgerEntryDtoBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "get-items": {
        parameters: {
            query: {
                page: string;
                size: string;
                enabled?: string;
                is_group?: string;
                query?: string;
                order?: string;
                column?: string;
                parentId?: string;
            };
            header?: {
                Authorization?: string;
                "Active-Company"?: string;
                "User-Session-Uuid"?: string;
                Role?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginationResponsePaginationResultListItemDtoBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "update-item": {
        parameters: {
            query?: {
                query?: string;
                order?: string;
                column?: string;
                parentId?: string;
            };
            header?: {
                Authorization?: string;
                "Active-Company"?: string;
                "User-Session-Uuid"?: string;
                Role?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateItemRequestBody"];
            };
        };
        responses: {
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseMessageBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "create-item": {
        parameters: {
            query?: {
                query?: string;
                order?: string;
                column?: string;
                parentId?: string;
            };
            header?: {
                Authorization?: string;
                "Active-Company"?: string;
                "User-Session-Uuid"?: string;
                Role?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateItemRequestBody"];
            };
        };
        responses: {
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EntityResponseItemDtoBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "item-attributes": {
        parameters: {
            query: {
                page: string;
                size: string;
                enabled?: string;
                is_group?: string;
                query?: string;
                order?: string;
                column?: string;
                parentId?: string;
            };
            header?: {
                Authorization?: string;
                "Active-Company"?: string;
                "User-Session-Uuid"?: string;
                Role?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginationResponsePaginationResultListItemAttributeDtoBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "create-item-attribute": {
        parameters: {
            query?: {
                query?: string;
                order?: string;
                column?: string;
                parentId?: string;
            };
            header?: {
                Authorization?: string;
                "Active-Company"?: string;
                "User-Session-Uuid"?: string;
                Role?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateItemAttributeRequestBody"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EntityResponseItemAttributeDtoBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "update-item-attribute-value": {
        parameters: {
            query?: {
                query?: string;
                order?: string;
                column?: string;
                parentId?: string;
            };
            header?: {
                Authorization?: string;
                "Active-Company"?: string;
                "User-Session-Uuid"?: string;
                Role?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpsertItemAttributeValueRequestBody"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseMessageBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "create-item-attribute-value": {
        parameters: {
            query?: {
                query?: string;
                order?: string;
                column?: string;
                parentId?: string;
            };
            header?: {
                Authorization?: string;
                "Active-Company"?: string;
                "User-Session-Uuid"?: string;
                Role?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpsertItemAttributeValueRequestBody"];
            };
        };
        responses: {
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseMessageBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "item-attribute": {
        parameters: {
            query?: {
                query?: string;
                order?: string;
                column?: string;
                parentId?: string;
            };
            header?: {
                Authorization?: string;
                "Active-Company"?: string;
                "User-Session-Uuid"?: string;
                Role?: string;
            };
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EntityResponseResultEntityItemAttributeDtoBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "get-item-prices": {
        parameters: {
            query: {
                page: string;
                size: string;
                enabled?: string;
                is_group?: string;
                query?: string;
                order?: string;
                column?: string;
                parentId?: string;
            };
            header?: {
                Authorization?: string;
                "Active-Company"?: string;
                "User-Session-Uuid"?: string;
                Role?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginationResponsePaginationResultListItemPriceDtoBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "update-item-price": {
        parameters: {
            query?: {
                query?: string;
                order?: string;
                column?: string;
                parentId?: string;
            };
            header?: {
                Authorization?: string;
                "Active-Company"?: string;
                "User-Session-Uuid"?: string;
                Role?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpsertItemPriceRequestBody"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseMessageBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "create-item-price": {
        parameters: {
            query?: {
                query?: string;
                order?: string;
                column?: string;
                parentId?: string;
            };
            header?: {
                Authorization?: string;
                "Active-Company"?: string;
                "User-Session-Uuid"?: string;
                Role?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateItemPriceBody"];
            };
        };
        responses: {
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseDataItemPriceDtoBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "associated-actions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseDataInterface {}Body"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "get-item-price-detail": {
        parameters: {
            query?: {
                query?: string;
                order?: string;
                column?: string;
                parentId?: string;
            };
            header?: {
                Authorization?: string;
                "Active-Company"?: string;
                "User-Session-Uuid"?: string;
                Role?: string;
            };
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EntityResponseResultEntityItemPriceDtoBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "get-item-prices-for-order": {
        parameters: {
            query: {
                query?: string;
                order?: string;
                column?: string;
                parentId?: string;
                currency: string;
                isBuying?: boolean;
                isSelling?: boolean;
                enabled?: string;
            };
            header?: {
                Authorization?: string;
                "Active-Company"?: string;
                "User-Session-Uuid"?: string;
                Role?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EntityResponseResultEntityListItemPriceDtoBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "get-list-by-item": {
        parameters: {
            query: {
                page: string;
                size: string;
                enabled?: string;
                is_group?: string;
                query?: string;
                order?: string;
                column?: string;
                parentId?: string;
            };
            header?: {
                Authorization?: string;
                "Active-Company"?: string;
                "User-Session-Uuid"?: string;
                Role?: string;
            };
            path: {
                item_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginationResponsePaginationResultListItemPriceDtoBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "edit-item-to-warehouse": {
        parameters: {
            query?: {
                query?: string;
                order?: string;
                column?: string;
                parentId?: string;
            };
            header?: {
                Authorization?: string;
                "Active-Company"?: string;
                "User-Session-Uuid"?: string;
                Role?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AddStockLevelRequestBody"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseMessageBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "add-item-to-warehouse": {
        parameters: {
            query?: {
                query?: string;
                order?: string;
                column?: string;
                parentId?: string;
            };
            header?: {
                Authorization?: string;
                "Active-Company"?: string;
                "User-Session-Uuid"?: string;
                Role?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AddStockLevelRequestBody"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseMessageBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "get-item-stock-levels": {
        parameters: {
            query: {
                page: string;
                size: string;
                enabled?: string;
                is_group?: string;
                query?: string;
                order?: string;
                column?: string;
                parentId?: string;
            };
            header?: {
                Authorization?: string;
                "Active-Company"?: string;
                "User-Session-Uuid"?: string;
                Role?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginationResponsePaginationResultListStockLevelDtoBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "get-warehouse-stock-levels": {
        parameters: {
            query: {
                page: string;
                size: string;
                enabled?: string;
                is_group?: string;
                query?: string;
                order?: string;
                column?: string;
                parentId?: string;
            };
            header?: {
                Authorization?: string;
                "Active-Company"?: string;
                "User-Session-Uuid"?: string;
                Role?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginationResponsePaginationResultListStockLevelDtoBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "get-price-lists": {
        parameters: {
            query: {
                page: string;
                size: string;
                enabled?: string;
                is_group?: string;
                query?: string;
                order?: string;
                column?: string;
                parentId?: string;
            };
            header?: {
                Authorization?: string;
                "Active-Company"?: string;
                "User-Session-Uuid"?: string;
                Role?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginationResponsePaginationResultListPriceListDtoBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "update-item-price-list": {
        parameters: {
            query?: {
                query?: string;
                order?: string;
                column?: string;
                parentId?: string;
            };
            header?: {
                Authorization?: string;
                "Active-Company"?: string;
                "User-Session-Uuid"?: string;
                Role?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpsertPriceListRequestBody"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseMessageBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "create-price-list": {
        parameters: {
            query?: {
                query?: string;
                order?: string;
                column?: string;
                parentId?: string;
            };
            header?: {
                Authorization?: string;
                "Active-Company"?: string;
                "User-Session-Uuid"?: string;
                Role?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreatePriceListRequestBody"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseMessageBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "get-price-list-detail": {
        parameters: {
            query?: {
                query?: string;
                order?: string;
                column?: string;
                parentId?: string;
            };
            header?: {
                Authorization?: string;
                "Active-Company"?: string;
                "User-Session-Uuid"?: string;
                Role?: string;
            };
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EntityResponseResultEntityPriceListDtoBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "get-variant-from-item": {
        parameters: {
            query: {
                page: string;
                size: string;
                enabled?: string;
                is_group?: string;
                query?: string;
                order?: string;
                column?: string;
                parentId?: string;
            };
            header?: {
                Authorization?: string;
                "Active-Company"?: string;
                "User-Session-Uuid"?: string;
                Role?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginationResponsePaginationResultListItemVariantDtoBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "create-item-variant": {
        parameters: {
            query?: {
                query?: string;
                order?: string;
                column?: string;
                parentId?: string;
            };
            header?: {
                Authorization?: string;
                "Active-Company"?: string;
                "User-Session-Uuid"?: string;
                Role?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateItemVariantRequestBody"];
            };
        };
        responses: {
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseMessageBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "get-item-detail": {
        parameters: {
            query?: {
                query?: string;
                order?: string;
                column?: string;
                parentId?: string;
            };
            header?: {
                Authorization?: string;
                "Active-Company"?: string;
                "User-Session-Uuid"?: string;
                Role?: string;
            };
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EntityResponseResultEntityItemDetailDtoBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "get-warehouses": {
        parameters: {
            query: {
                page: string;
                size: string;
                enabled?: string;
                is_group?: string;
                query?: string;
                order?: string;
                column?: string;
                parentId?: string;
            };
            header?: {
                Authorization?: string;
                "Active-Company"?: string;
                "User-Session-Uuid"?: string;
                Role?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginationResponsePaginationResultListWareHouseDtoBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "create-warehouse": {
        parameters: {
            query?: {
                query?: string;
                order?: string;
                column?: string;
                parentId?: string;
            };
            header?: {
                Authorization?: string;
                "Active-Company"?: string;
                "User-Session-Uuid"?: string;
                Role?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateWareHouseRequestBody"];
            };
        };
        responses: {
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseMessageBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "get-warehouse-detail": {
        parameters: {
            query?: {
                query?: string;
                order?: string;
                column?: string;
                parentId?: string;
            };
            header?: {
                Authorization?: string;
                "Active-Company"?: string;
                "User-Session-Uuid"?: string;
                Role?: string;
            };
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EntityResponseResultEntityWareHouseDtoBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "get-warehouses-tree-view": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseDataListTreeEntryDtoBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "get suppliers": {
        parameters: {
            query: {
                page: string;
                size: string;
                enabled?: string;
                is_group?: string;
                query?: string;
                order?: string;
                column?: string;
                parentId?: string;
            };
            header?: {
                Authorization?: string;
                "Active-Company"?: string;
                "User-Session-Uuid"?: string;
                Role?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginationResponsePaginationResultListSupplierDtoBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "create supplier": {
        parameters: {
            query?: {
                query?: string;
                order?: string;
                column?: string;
                parentId?: string;
            };
            header?: {
                Authorization?: string;
                "Active-Company"?: string;
                "User-Session-Uuid"?: string;
                Role?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateSupplierRequestBody"];
            };
        };
        responses: {
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseMessageBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "get supplier": {
        parameters: {
            query?: {
                query?: string;
                order?: string;
                column?: string;
                parentId?: string;
            };
            header?: {
                Authorization?: string;
                "Active-Company"?: string;
                "User-Session-Uuid"?: string;
                Role?: string;
            };
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EntityResponseResultEntitySupplierDtoBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    uom: {
        parameters: {
            query?: {
                query?: string;
                order?: string;
                column?: string;
                parentId?: string;
            };
            header?: {
                Authorization?: string;
                "Active-Company"?: string;
                "User-Session-Uuid"?: string;
                Role?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UOMsResponseBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "create user": {
        parameters: {
            query?: {
                query?: string;
                order?: string;
                column?: string;
                parentId?: string;
            };
            header?: {
                Authorization?: string;
                "Active-Company"?: string;
                "User-Session-Uuid"?: string;
                Role?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateUserRequestBody"];
            };
        };
        responses: {
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseMessageBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "get company user profiles": {
        parameters: {
            query: {
                page: string;
                size: string;
                enabled?: string;
                is_group?: string;
                query?: string;
                order?: string;
                column?: string;
                parentId?: string;
            };
            header?: {
                Authorization?: string;
                "Active-Company"?: string;
                "User-Session-Uuid"?: string;
                Role?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginationResponsePaginationResultListProfileLBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "create user": {
        parameters: {
            query?: {
                query?: string;
                order?: string;
                column?: string;
                parentId?: string;
            };
            header?: {
                Authorization?: string;
                "Active-Company"?: string;
                "User-Session-Uuid"?: string;
                Role?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateUserRequestBody"];
            };
        };
        responses: {
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseMessageBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "get profile detail": {
        parameters: {
            query?: {
                query?: string;
                order?: string;
                column?: string;
                parentId?: string;
            };
            header?: {
                Authorization?: string;
                "Active-Company"?: string;
                "User-Session-Uuid"?: string;
                Role?: string;
            };
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EntityResponseResultEntityProfileDtoBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "get-profile-session": {
        parameters: {
            query?: {
                query?: string;
                order?: string;
                column?: string;
                parentId?: string;
            };
            header?: {
                Authorization?: string;
                "Active-Company"?: string;
                "User-Session-Uuid"?: string;
                Role?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EntityResponseResultEntityProfileDtoBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "update-profile-session": {
        parameters: {
            query?: {
                query?: string;
                order?: string;
                column?: string;
                parentId?: string;
            };
            header?: {
                Authorization?: string;
                "Active-Company"?: string;
                "User-Session-Uuid"?: string;
                Role?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateProfileRequestBody"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseMessageBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
}
