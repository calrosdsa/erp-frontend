/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/account": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get user account */
        get: operations["get-account"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/account/change/password": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Change Password */
        post: operations["change-password"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/account/password": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Update password */
        put: operations["update-password"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/account/reset/password": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Reset Password */
        post: operations["reset-password"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/account/sessions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get user sessions */
        get: operations["get-sessions"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/account/sign-in": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Sign in a user */
        post: operations["sign-in"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/accounting/report/account-balance": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Account Balance */
        get: operations["account-balance"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/accounting/report/account-payable": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Account Payable */
        get: operations["get-account-payable"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/accounting/report/account-payable/sumary": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Account Payable Sumary */
        get: operations["get-account-payable-sumary"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/accounting/report/account-receivable": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Account Receivable */
        get: operations["account-receivable"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/accounting/report/account-receivable/sumary": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Receivable Sumary */
        get: operations["receivable-sumary"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/accounting/report/general": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get General Ledger */
        get: operations["get-general-ledger"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/accounting/tax": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Taxes */
        get: operations["get-taxes"];
        put?: never;
        /** Create Tax */
        post: operations["create-tax"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/accounting/tax/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Tax Detail */
        get: operations["get-tax-detail"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/activity": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Edit Activity */
        put: operations["edit-activity"];
        /** Create Activity */
        post: operations["activity"];
        /** Delete  Activity */
        delete: operations["delete-activity"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/address": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Addresses */
        get: operations["get-addresses"];
        put?: never;
        /** Create Address */
        post: operations["create-address"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/address/detail/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Address */
        get: operations["get-address"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/address/references": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Address References */
        get: operations["get-address-references"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/admin/company": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Admin Companies */
        get: operations["a-companies"];
        put?: never;
        /** Create Company Adm */
        post: operations["a-create-company"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/admin/company/detail/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Admin Company Detail */
        get: operations["a-company-detail"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/admin/company/modules": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Admin Company Modules */
        get: operations["a-company-modules"];
        put?: never;
        /** Add Company Modules */
        post: operations["a-add-company-modules"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/admin/company/user": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Company Users */
        get: operations["a-company-users"];
        put?: never;
        /** Add Company User */
        post: operations["add-company-user"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/admin/core/entity": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Entities */
        get: operations["entities"];
        put?: never;
        /** Create Entity */
        post: operations["create-entity"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/admin/core/entity/action": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Add Entity Action */
        post: operations["add-entity-action"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/admin/core/entity/detail/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Entity */
        get: operations["entity"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/admin/role-template": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Role Templates */
        get: operations["role-templates"];
        put?: never;
        /** Create Role Template */
        post: operations["create-role-template"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/admin/role-template/detail/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Role Template */
        get: operations["role-template"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth-admin/sign-in": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Sign in user admin */
        post: operations["sign-in-admin"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/bank": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Bank */
        get: operations["bank"];
        /** Edit Bank */
        put: operations["edit-bank"];
        /** Create Bank */
        post: operations["create-bank"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/bank-account": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Bank Account */
        get: operations["bank-account"];
        /** Edit Bank Account */
        put: operations["edit-bank_account"];
        /** Create Bank Account */
        post: operations["create-bank-account"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/bank-account/detail/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Bank Account Detail */
        get: operations["bank-account-detail"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/bank-account/update-status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Update Status Bank Account */
        put: operations["update-status-bank-account"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/bank/detail/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Bank Detail */
        get: operations["bank-detail"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/bank/update-status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Update Status Bank */
        put: operations["update-status-bank"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/batch-bundle": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Bath Bundles */
        get: operations["batch-bundles"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/batch-bundle/detail/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Batch Bundle */
        get: operations["batch-bundle"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cash-outflow": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Cash Outflow */
        get: operations["cash-outflow"];
        /** Edit Cash Outflow */
        put: operations["edit-cash-outflow"];
        /** Create Cash Outflow */
        post: operations["create-cash-outflow"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cash-outflow/detail/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Cash Outflow Detail */
        get: operations["cash-outflow-detail"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cash-outflow/export/document": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Export Cash Outflow */
        post: operations["export-cash-outflow"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cash-outflow/update-status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Update Status Cash Outflow */
        put: operations["update-status-cash-outflow"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/charge-template": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Charges Templates */
        get: operations["charges-templates"];
        /** Edit Charges Template */
        put: operations["edit-charges-template"];
        /** Create Charge Template */
        post: operations["create-charge-template"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/charge-template/detail/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Charges Template */
        get: operations["charges-template"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/chat": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Chat */
        get: operations["chat"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/chat/detail/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Chat Detail */
        get: operations["chat-detail"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/chat/message": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Chat Messages */
        get: operations["message"];
        put?: never;
        /** Chat Message */
        post: operations["create-chat-message"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/chat/update-member-last-read/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Update Member Last Read */
        put: operations["update-member-last-read"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/client": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get client Profile */
        get: operations["get-client-profile"];
        /** Update client Profile */
        put: operations["update-client-profile"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/company": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create Company */
        post: operations["create-company"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/company/detail/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get company Detial */
        get: operations["company-detail"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/company/setting/account": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Company Account Setting */
        get: operations["company-account-setting"];
        /** Edit Company Account Setting */
        put: operations["edit-company-account-setting"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/company/user/companies": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get user companies */
        get: operations["user-companies"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/company/{uuid}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get company by uuid */
        get: operations["get-company-by-uuid"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cost-center": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Cost Centers */
        get: operations["cost-centers"];
        put?: never;
        /** Create Cost Center */
        post: operations["create-cost-center"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cost-center/detail/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Cost Center */
        get: operations["cost-center"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/court": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** get courts */
        get: operations["courts"];
        /** Edit court */
        put: operations["edit-court"];
        /** Create Court */
        post: operations["create-court"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/court-rate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Update Court Rates */
        post: operations["update-court-rates"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/court-rate/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Court Rates */
        get: operations["get-court-rates"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/court/detail/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Create User */
        get: operations["court"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cuatropf/subscription/{companyUuid}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Cuatropf Subscription */
        post: operations["cuatropf-subscription"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/currency": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get currencies */
        get: operations["get currencies"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/currency-exchange": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Currency Exchanges */
        get: operations["currency-exchanges"];
        /** Edit Currency Exchange */
        put: operations["edit-currency-exchange"];
        /** Create Currency Exchange */
        post: operations["create-currency-exchange"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/currency-exchange/detail/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Currency Exchange */
        get: operations["currency-exchange"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/currency-exchange/update-status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Update Status Currency Exchange */
        put: operations["update-status-currency-exchange"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/customer": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieve customers */
        get: operations["get customers"];
        /** Edit customer */
        put: operations["edit-customer"];
        /** Create customer */
        post: operations["create customer"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/customer/customer-types": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Customer types */
        get: operations["customer types"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/customer/detail/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieve customer */
        get: operations["get customer"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/customer/update-status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Update Status Customer */
        put: operations["update-status-customer"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/deal": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Deal */
        get: operations["deal"];
        /** Edit Deal */
        put: operations["edit-deal"];
        /** Create Deal */
        post: operations["create-deal"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/deal/detail/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Deal Detail */
        get: operations["deal-detail"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/deal/transition": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Deal Transition */
        put: operations["deal-transition"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/delete-collectors": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** Test Request */
        delete: operations["test-request"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/document/info/address-and-contact": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Edit Address & Contact */
        put: operations["edit-address-and-contact"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/document/info/address-and-contact/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Address & Contact */
        get: operations["address-and-contact"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/document/info/doc-accounting": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Edit Doc Accounts */
        put: operations["edit-doc-accounts"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/document/info/doc-accounting/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Doc Accounting */
        get: operations["doc-accounting"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/document/info/doc-term": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Edit Doc Terms */
        put: operations["edit-doc-terms"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/document/info/doc-term/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Doc Terms */
        get: operations["doc-terms"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/financial-statement/balance-sheet": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Balance Sheet */
        get: operations["balance-sheet"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/financial-statement/cash-flow": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Cash flow Statement */
        get: operations["cash-flow"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/financial-statement/profit-and-loss": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Profit and Loss Statement */
        get: operations["profit-and-loss"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/greeting/{name}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get greeting by name */
        get: operations["get-greeting-by-name"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/group": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Edit Group */
        put: operations["edit-group"];
        /** Create Group */
        post: operations["create group"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/group/descendents/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get group descendents */
        get: operations["get group descendents"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/group/detail/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieve group */
        get: operations["get group"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/group/{party}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieve groups by party code */
        get: operations["get groups by party code"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/invoice": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Edit Invoice */
        put: operations["edit-invoice"];
        /** Create Invoice */
        post: operations["create-invoice"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/invoice/export/document": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Export Invoice */
        post: operations["export-invoice"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/invoice/purchase/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Invoice
         * @description Get invoice
         */
        get: operations["invoice"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/invoice/update-state": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Update Invoice State */
        put: operations["update invoice state"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/invoice/{party}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Invoices */
        get: operations["invoices"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/item-line": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Item Lines */
        get: operations["item-lines"];
        /** EditItemLine */
        put: operations["update-item-line"];
        /** Add Line Item */
        post: operations["add-line-item"];
        /** Delete Line Item */
        delete: operations["delete-line-item"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/journal": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Journal Entries */
        get: operations["journal-entries"];
        put?: never;
        /** Create Journal Entry */
        post: operations["create-journal-entry"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/journal/detail/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Journal Entry */
        get: operations["journal-entry"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/journal/update-status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Update Journal Entry Status */
        put: operations["update-journal-entry-status"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ledger": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Accounts */
        get: operations["get-acconts"];
        /** Edit Ledger */
        put: operations["edit-ledger"];
        /** Create Ledger */
        post: operations["create-ledger"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ledger/detail/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Ledger Detail */
        get: operations["get-ledger-detail"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ledger/general": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get General Ledger */
        get: operations["get-general-ledger"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ledger/view/tree": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Ledgers Tree View */
        get: operations["get-ledgers-tree-view"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/module": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Modules */
        get: operations["modules"];
        /** Edit module */
        put: operations["edit-module"];
        /** Create Module */
        post: operations["create-module"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/module/detail/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Module Detail */
        get: operations["module-detail"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/module/search-entities": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Search Entities */
        get: operations["search-entities"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/module/update-status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Update Status module */
        put: operations["update-status-module"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/module/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Module */
        get: operations["module"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/notification": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Notification */
        get: operations["notification"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/notification/count": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Notification Count */
        get: operations["notification-count"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/order": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Edit Order */
        put: operations["edit-order"];
        /** Create Order */
        post: operations["create-order"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/order/detail/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieve order */
        get: operations["order"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/order/export/document": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Export Order */
        post: operations["export-order"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/order/update-status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Update Order Status */
        put: operations["update-order-status"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/order/{party}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieve orders */
        get: operations["orders"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/party/connections/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Party connections */
        get: operations["get party connections"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/party/contact": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Contacts */
        get: operations["contacts"];
        /** Edit contact */
        put: operations["edit-contact"];
        /** Create Contact */
        post: operations["create-contact"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/party/contact/bulk": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Contact Bulk */
        post: operations["contact-bulk"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/party/contact/detail/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Contact */
        get: operations["contact"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/party/parties-by-references/{party_type}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Party by reference
         * @description Retrieve parties by party type.
         */
        get: operations["get party by reference"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/party/references": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Party references */
        get: operations["get party references"];
        put?: never;
        /** add party reference */
        post: operations["add party reference"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/party/references/type": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Party type references
         * @description Retrieve the allowed party types for reference
         */
        get: operations["get party type references"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/party/type/users": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Party User Types */
        get: operations["get party user types"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/payment": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Payments */
        get: operations["get-payments"];
        /** Edit Payment */
        put: operations["edit-payment"];
        /** Create Payment */
        post: operations["create-payment"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/payment-terms": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Payment Terms */
        get: operations["payment-terms"];
        /** Edit Payment Terms */
        put: operations["edit-payment-terms"];
        /** Create Payment Terms */
        post: operations["create-payment-terms"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/payment-terms-template": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Payment Terms Template */
        get: operations["payment-terms-template"];
        /** Edit Payment Terms Template */
        put: operations["edit-payment-terms-template"];
        /** Create Payment Terms Template */
        post: operations["create-payment-terms-template"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/payment-terms-template/detail/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Payment Terms Template Detail */
        get: operations["payment-terms-template-details"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/payment-terms-template/greet": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Greet */
        get: operations["greet"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/payment-terms-template/update-status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Update Status Payment Terms-template */
        put: operations["update-status-payment-terms-template"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/payment-terms/detail/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Payment Terms Detail */
        get: operations["payment-terms-details"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/payment-terms/update-status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Update Status Payment Terms */
        put: operations["update-status-payment-terms"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/payment-terms/{id}/lines": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Payment Term Lines */
        get: operations["payment-term-lines"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/payment/associated-actions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Payment Actions */
        get: operations["get payment actions"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/payment/detail/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Payment Detial */
        get: operations["get payment detail"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/payment/export/document": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Export Payment */
        post: operations["export-payment"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/payment/parties": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Parties Type */
        get: operations["get-parties-type"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/payment/payment-accounts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Payment Accounts */
        get: operations["payment-accouts"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/payment/update-state": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Update Payment State */
        put: operations["update payment state"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/pianoForms": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Piano Forms */
        get: operations["get piano forms"];
        put?: never;
        /** Create Piano Form */
        post: operations["create piano form"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/pianoForms/export": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** export data */
        post: operations["export data"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/pianoForms/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Piano Form */
        get: operations["get piano form"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/plugin": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get available plugins */
        get: operations["plugins"];
        put?: never;
        /** Add plugin */
        post: operations["add-plugin"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/plugin/{plugin}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get plugin from company */
        get: operations["get-plugin"];
        /** Update plugin credentials */
        put: operations["update-plugin-credentials"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/pricing": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Pricings */
        get: operations["pricings"];
        /** Edit Pricing */
        put: operations["edit-pricing"];
        /** Create pricing */
        post: operations["create-pricing"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/pricing/detail/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Pricing */
        get: operations["pricing"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/pricing/generate-po": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Pricing Generate Po */
        post: operations["pricing-generate-po"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/pricing/generate-quotation": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Pricing Generate Quotation */
        post: operations["pricing-generate-quotation"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/pricing/update-status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Update Status Pricing */
        put: operations["update-status-pricing"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/profile": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Profiles */
        get: operations["profiles"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/profile/detail/${id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get profile detail */
        get: operations["get-profile-detail"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/profile/me": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get profile session */
        get: operations["get-profile-session"];
        /**
         * Update profile session
         * @description Update profile base on the currency session of the user
         */
        put: operations["update-profile-session"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/project": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Projects */
        get: operations["projects"];
        put?: never;
        /** Create Project */
        post: operations["create-cost-project"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/project/detail/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Project */
        get: operations["project"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/purchase-record": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Purchase Records */
        get: operations["purchase-records"];
        /** Edit Purchase Record */
        put: operations["edit-purchase-record"];
        /** Create Purchase Record */
        post: operations["create-purchase-record"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/purchase-record/detail/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Purchase Record */
        get: operations["purchase-record"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/purchase-record/export": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Purchase Record Export */
        post: operations["purchase-record-export"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/purchase-record/export/document": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Export Purchase Record */
        post: operations["export-purchase-record"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/purchase-record/update-status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Update Status Purchase Record */
        put: operations["update-status-purchase-record"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/purchase/order/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create purchase order */
        post: operations["create purchase order"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/quotation": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Edit Quotation */
        put: operations["edit-quotation"];
        /** Create Quotation */
        post: operations["create-quotation"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/quotation/detail/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Quotation */
        get: operations["quotation"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/quotation/update-status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Update Quotation Status */
        put: operations["update-quotation-status"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/quotation/{party}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Quotations */
        get: operations["quotations"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/receipt": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Edit Receipt */
        put: operations["edit-receipt"];
        /** Create Receipt` */
        post: operations["create-receipt"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/receipt/detail/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Receipt Detail */
        get: operations["get-receipt-detail"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/receipt/export/document": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Export Receipt */
        post: operations["export-receipt"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/receipt/update-state": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Update Receipt State */
        put: operations["update-receipt-state"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/receipt/{party}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Receipts */
        get: operations["get-receipts"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/regate/booking": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Bookings */
        get: operations["get-bookings"];
        put?: never;
        /** Create Booking */
        post: operations["create booking"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/regate/booking-slot": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Booking Slots */
        get: operations["booking-slots"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/regate/booking/detail/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Booking */
        get: operations["get-booking"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/regate/booking/paid-amount": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Update Paid Amount */
        put: operations["update-paid-amount"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/regate/booking/reschedule": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Booking reschedule */
        put: operations["booking-reschedule"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/regate/booking/update-booking-batch": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Update Booking Batch */
        post: operations["update-booking-batch"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/regate/booking/update-status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Update Booking Status */
        put: operations["update-booking-status"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/regate/booking/validate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Validate Booking */
        post: operations["validate-booking"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/regate/chart": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Get Chart Dashboard Data */
        post: operations["get-chart-dashboard-data"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/regate/chart/{chart}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Get Chart Data */
        post: operations["get-chart-data"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/regate/event": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Event Booking */
        get: operations["get-event-bookings"];
        /** Edit event */
        put: operations["edit-event"];
        /** Create Event */
        post: operations["create-event-booking"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/regate/event/delete-in-batch": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** Delete Event Batch */
        delete: operations["delete-event-batch"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/regate/event/detail/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Event Booking */
        get: operations["get-event-booking"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/regate/event/update-status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Event Update Status */
        put: operations["event-update-status"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/role": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get roles */
        get: operations["get roles"];
        /** Edit Role */
        put: operations["edit-role"];
        /** Create Role */
        post: operations["create-role"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/role/detail/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get role */
        get: operations["get role"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/role/entity-actions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get entity actions */
        get: operations["get entity actions"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/role/permision/actions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Update Permission Actions */
        post: operations["update role permision action"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/role/role-definitions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get role definitions */
        get: operations["get role definitions"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sales-record": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Sales Records */
        get: operations["sales-records"];
        /** Edit Sales Record */
        put: operations["edit-sales-record"];
        /** Create Sales Record */
        post: operations["create-sales-record"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sales-record/detail/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Sales Record */
        get: operations["sales-record"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sales-record/export": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Sales Record Export */
        post: operations["sales-record-export"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sales-record/update-status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Update Status Sales Record */
        put: operations["update-status-sales-record"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/serial-no": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Serial Nos */
        get: operations["serial-nos"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/serial-no/detail/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Serial No */
        get: operations["serial-no"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/serial-no/transactions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Serial No Transactions */
        get: operations["serial-no-transactions"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/stage": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Stage */
        get: operations["stage"];
        /** Edit Stage */
        put: operations["edit-stage"];
        /** Create Stage */
        post: operations["create-stage"];
        /** Delete Stage */
        delete: operations["delete-stage"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/stage/transition": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Stage Transition */
        put: operations["stage-transition"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/stock-entry": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Stock Entries */
        get: operations["stock-entries"];
        /** Edit Stock Entry */
        put: operations["edit-stock-entry"];
        /** Create Stock Entry */
        post: operations["create-stock-entry"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/stock-entry/detail/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Stock Entry */
        get: operations["stock-entry"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/stock-entry/update-status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Update Stock Entry Status */
        put: operations["update-stock-entry-status"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/stock-ledger/balance": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Stock Balance Report */
        get: operations["get-stock-balance-report"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/stock-ledger/report": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Stock Ledger Report */
        get: operations["get-stock_ledger-report"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/stock/item": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Items
         * @description Retrieve Items
         */
        get: operations["get-items"];
        /** Edit item */
        put: operations["edit-item"];
        /** Create item */
        post: operations["create-item"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/stock/item/actions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Item Actions */
        get: operations["item-actions"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/stock/item/inventory-setting": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** edit-item-inventory-setting */
        put: operations["edit-item-inventory-setting"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/stock/item/inventory-setting/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** item-inventory-setting */
        get: operations["item-inventory-setting"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/stock/item/item-attribute": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Item attributes */
        get: operations["item-attributes"];
        put?: never;
        /** Create item attribute */
        post: operations["create-item-attribute"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/stock/item/item-attribute/item-attribute-value": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Update Item Attribute Value */
        put: operations["update-item-attribute-value"];
        /** Create Item Attribute Value */
        post: operations["create-item-attribute-value"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/stock/item/item-attribute/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Item attribute */
        get: operations["item-attribute"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/stock/item/item-price": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Item Prices
         * @description Retrieve Item Prices
         */
        get: operations["get-item-prices"];
        /** Edit item price */
        put: operations["edit-item-price"];
        /** Create item price */
        post: operations["create-item-price"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/stock/item/item-price/associated-actions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Associated Actions */
        get: operations["associated-actions"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/stock/item/item-price/detail/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Item Price
         * @description Retrieve Item Price Datail
         */
        get: operations["get-item-price-detail"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/stock/item/item-price/order": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Item Price For Order */
        get: operations["get-item-prices-for-order"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/stock/item/item-price/{itemCode}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get List by item
         * @description Retrieve Item Prices by Item Code
         */
        get: operations["get-list-by-item"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/stock/item/level": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Edit item to warehouse */
        put: operations["edit-item-to-warehouse"];
        /** Add item to warehouse */
        post: operations["add-item-to-warehouse"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/stock/item/level/item": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieve item stock levels */
        get: operations["get-item-stock-levels"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/stock/item/level/warehouse": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieve warehouse stock levels */
        get: operations["get-warehouse-stock-levels"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/stock/item/price-list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieve Price List items */
        get: operations["get-price-lists"];
        /** Edit Price List */
        put: operations["edit-price-list"];
        /** Create price list */
        post: operations["create-price-list"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/stock/item/price-list/detail/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieve Price List Detail */
        get: operations["get-price-list-detail"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/stock/item/variant": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get variant from items */
        get: operations["get-variant-from-item"];
        put?: never;
        /** Create item variant */
        post: operations["create-item-variant"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/stock/item/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieve item detail base on code */
        get: operations["get-item-detail"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/stock/warehouse": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Warehouses */
        get: operations["get-warehouses"];
        /** Edit Warehouse */
        put: operations["edit-warehouse"];
        /** Create Warehouse */
        post: operations["create-warehouse"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/stock/warehouse/detail/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Warehouse Detail */
        get: operations["get-warehouse-detail"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/stock/warehouse/view/tree": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Warehouses Tree View */
        get: operations["get-warehouses-tree-view"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/supplier": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieve suppliers */
        get: operations["get suppliers"];
        /** Edit Supplier */
        put: operations["edit-supplier"];
        /** Create supplier */
        post: operations["create supplier"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/supplier/detail/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieve supplier */
        get: operations["get supplier"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/supplier/update-status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Update Status Supplier */
        put: operations["update-status-supplier"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/taxes-and-charges": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Tax and charges */
        get: operations["tax-and-charges"];
        /** Edit tax and charge */
        put: operations["edit-tax-and-charge"];
        /** Add tax and charge */
        post: operations["add-tax-and-charge"];
        /** Delete tax and charge */
        delete: operations["delete-tax-and-charge"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/terms-and-conditions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Terms & Conditions */
        get: operations["terms-and-conditions"];
        /** Edit Terms & Conditions */
        put: operations["edit-terms-and-conditions"];
        /** Create Terms & Conditions */
        post: operations["create-terms-and-conditions"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/terms-and-conditions/detail/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Terms & Conditions Detail */
        get: operations["terms-and-conditions-details"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/terms-and-conditions/update-status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Update Status Terms & Conditions */
        put: operations["update-status-terms-and-conditions"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/uom": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieve UOMs (Units of Measure) */
        get: operations["uom"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/user": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create User */
        post: operations["create user"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/workspace": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** WorkSpaces */
        get: operations["workspace"];
        /** Edit WorkSpace */
        put: operations["edit-workspace"];
        /** Create WorkSpace */
        post: operations["create-workspace"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/workspace/detail/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** WorkSpace Detail */
        get: operations["workspace-detail"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/workspace/update-status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Update Status WorkSpace */
        put: operations["update-status-workspace"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        AccountPayableEntryDto: {
            currency: string;
            due_date: string;
            /** Format: int64 */
            invoiced_amount: number;
            /** Format: int64 */
            paid_amount: number;
            party_name: string;
            party_type: string;
            party_uuid: string;
            /** Format: date-time */
            posting_date: string;
            receivable_account: string;
            receivable_account_uuid: string;
            voucher_no: string;
            voucher_type: string;
        };
        AccountReceivableEntryDto: {
            currency: string;
            due_date: string;
            /** Format: int64 */
            invoiced_amount: number;
            /** Format: int64 */
            paid_amount: number;
            party_name: string;
            party_type: string;
            party_uuid: string;
            /** Format: date-time */
            posting_date: string;
            receivable_account: string;
            receivable_account_uuid: string;
            voucher_no: string;
            voucher_type: string;
        };
        AccountResponseBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            company: components["schemas"]["CompanyDto"];
            company_defaults: components["schemas"]["CompanyDefaultsDto"];
            profile: components["schemas"]["ProfileDto"];
            role: components["schemas"]["RoleDto"];
            role_actions: components["schemas"]["RoleActionDto"][];
            user: components["schemas"]["UserDto"];
        };
        AccountSettingData: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            fields: components["schemas"]["AccountSettingFields"];
            /** Format: int64 */
            id: number;
        };
        AccountSettingFields: {
            /** Format: int64 */
            bank_account: number;
            /** Format: int64 */
            cash_accunt: number;
            /** Format: int64 */
            cost_of_good_sold_account: number;
            /** Format: int64 */
            income_account: number;
            /** Format: int64 */
            payable_account: number;
            /** Format: int64 */
            receivable_account: number;
        };
        AccountSettingsDto: {
            bank_acct: string;
            /** Format: int64 */
            bank_acct_id: number;
            bank_acct_uuid: string;
            cash_acct: string;
            /** Format: int64 */
            cash_acct_id: number;
            cash_acct_uuid: string;
            cost_of_goods_sold_acct: string;
            /** Format: int64 */
            cost_of_goods_sold_acct_id: number;
            cost_of_goods_sold_acct_uuid: string;
            income_acct: string;
            /** Format: int64 */
            income_acct_id: number;
            income_acct_uuid: string;
            payable_acct: string;
            /** Format: int64 */
            payable_acct_id: number;
            payable_acct_uuid: string;
            receivable_acct: string;
            /** Format: int64 */
            receivable_acct_id: number;
            receivable_acct_uuid: string;
        };
        AccountingDimensionDto: {
            cost_center: string | null;
            /** Format: int64 */
            cost_center_id: number | null;
            cost_center_uuid: string | null;
            project: string | null;
            /** Format: int64 */
            project_id: number | null;
            project_uuid: string | null;
        };
        ActionDto: {
            /** Format: int64 */
            entity_id: number;
            /** Format: int64 */
            id: number;
            name: string;
        };
        ActionSelected: {
            /** Format: int64 */
            actionId: number;
            actionName: string;
            selected: boolean;
        };
        ActivityCommentData: {
            fields: components["schemas"]["ActivityCommentFields"];
            mentions: components["schemas"]["ActivityMentionData"][];
        };
        ActivityCommentFields: {
            /** Format: int32 */
            activity_id: number;
            comment: string;
        };
        ActivityData: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            activity_comment?: components["schemas"]["ActivityCommentData"];
            activity_deadline?: components["schemas"]["ActivityDeadlineData"];
            /** Format: int64 */
            entity_id: number;
            is_pinned?: boolean | null;
            /** Format: int64 */
            party_id: number;
            party_name: string;
            type: string;
        };
        ActivityDeadlineData: {
            fields: components["schemas"]["ActivityDeadlineFields"];
        };
        ActivityDeadlineFields: {
            /** Format: int32 */
            activity_id: number;
            address?: string | null;
            color: string;
            content?: string | null;
            /** Format: date-time */
            deadline: string;
            is_completed: boolean;
            link?: string | null;
            /** Format: int64 */
            party_id?: number | null;
            /** Format: int64 */
            profile_id: number | null;
            title?: string | null;
        };
        ActivityDto: {
            address: string | null;
            color: string | null;
            comment: string | null;
            content: string | null;
            /** Format: date-time */
            created_at: string;
            data: string | null;
            /** Format: date-time */
            deadline: string | null;
            /** Format: int32 */
            id: number;
            is_completed: boolean | null;
            is_pinned: boolean | null;
            link: string | null;
            mentions: components["schemas"]["ActivityMentionDto"][];
            /** Format: int64 */
            party_id: number | null;
            profile_avatar: string | null;
            profile_family_name: string;
            profile_given_name: string;
            /** Format: int64 */
            profile_id: number;
            profile_uuid: string;
            title: string | null;
            type: string;
        };
        ActivityMentionData: {
            action: string;
            fields: components["schemas"]["ActivityMentionFields"];
            /** Format: int32 */
            id: number;
        };
        ActivityMentionDto: {
            /** Format: int32 */
            activity_id: number;
            /** Format: int32 */
            end_index: number;
            family_name: string;
            given_name: string;
            /** Format: int32 */
            id: number;
            profile_uuid: string;
            /** Format: int32 */
            start_index: number;
        };
        ActivityMentionFields: {
            /** Format: int32 */
            activity_id: number;
            /** Format: int32 */
            end_index: number;
            /** Format: int64 */
            profile_id: number;
            /** Format: int32 */
            start_index: number;
        };
        AddCompanyModulesBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            modules: components["schemas"]["CompanyEntityDto"][];
        };
        AddEntityActionRequestBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            /** Format: int64 */
            entity_id: number;
            name: string;
        };
        AddLineItemRequestBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            charges?: components["schemas"]["TaxAndChargeLineDto"][];
            /** Format: int64 */
            doc_party_id?: number;
            doc_party_type?: string;
            line_item_data: components["schemas"]["LineItemData"];
            /** Format: double */
            total_amount?: number;
            /** Format: double */
            total_amount_items?: number;
            /** Format: int32 */
            total_items?: number;
            update_stock?: boolean;
        };
        AddPluginRequestBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            plugin: string;
        };
        AddPluginResponseBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            company_plugin: components["schemas"]["CompanyPlugins"];
        };
        AddStockLevelRequestBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            enabled: boolean;
            item_uuid: string;
            /** Format: int32 */
            outOfStockThreshold: number;
            /** Format: int32 */
            stock: number;
            warehouse_uuid: string;
        };
        AddTaxLineRequestBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            /** Format: double */
            amount: number;
            /** Format: int64 */
            doc_party_id?: number;
            doc_party_type?: string;
            is_deducted: boolean;
            /** Format: int64 */
            ledger: number;
            /** Format: int32 */
            tax_rate: number;
            /** Format: double */
            total_amount: number;
            type: string;
        };
        AddressAndContactData: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            fields: components["schemas"]["AddressAndContactFields"];
            /** Format: int64 */
            id: number;
            party_type?: string;
        };
        AddressAndContactDto: {
            billing_address: string | null;
            /** Format: int64 */
            billing_address_id: number | null;
            billing_address_uuid: string | null;
            contact: string | null;
            /** Format: int64 */
            contact_id: number | null;
            contact_uuid: string | null;
            party_address: string | null;
            /** Format: int64 */
            party_address_id: number | null;
            party_address_uuid: string | null;
            shipping_address: string | null;
            /** Format: int64 */
            shipping_address_id: number | null;
            shipping_address_uuid: string | null;
        };
        AddressAndContactFields: {
            /** Format: int64 */
            billing_address_id?: number | null;
            /** Format: int64 */
            contact_id?: number | null;
            /** Format: int64 */
            party_address_id?: number | null;
            /** Format: int64 */
            shipping_address_id?: number | null;
        };
        AddressDto: {
            city: string;
            company: string | null;
            country_code: string | null;
            email: string | null;
            /** Format: int64 */
            id: number;
            identification_number: string | null;
            phone_number: string | null;
            postal_code: string | null;
            province: string | null;
            street_line1: string;
            street_line2: string;
            title: string;
            uuid: string;
        };
        AddressRequestData: {
            city: string;
            company?: string;
            country_code?: string;
            email?: string;
            enabled: boolean;
            identification_number?: string;
            is_billing_address: boolean;
            is_shipping_address: boolean;
            phone_number?: string;
            postal_code?: string;
            province?: string;
            street_line_1: string;
            street_line_2: string;
            title: string;
        };
        AvailableCourtDto: {
            /** Format: date-time */
            created_at: string;
            /** Format: int64 */
            id: number;
            name: string;
            status: string;
            /** Format: int64 */
            total_price: number;
            uuid: string;
        };
        BalanceSheetEntryDto: {
            account_name: string;
            account_root_type: string;
            account_type: string;
            /** Format: int64 */
            credit: number;
            /** Format: int64 */
            debit: number;
        };
        BankAccountData: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            fields: components["schemas"]["BankAccountFields"];
            /** Format: int64 */
            id: number;
        };
        BankAccountDto: {
            account_name: string;
            bank: string;
            bank_account_number: string | null;
            bank_account_type: string;
            /** Format: int64 */
            bank_id: number;
            bank_uuid: string;
            branch_code: string | null;
            company_account: string | null;
            company_account_currency: string | null;
            /** Format: int64 */
            company_account_id: number | null;
            company_account_uuid: string | null;
            iban: string | null;
            /** Format: int64 */
            id: number;
            is_comapny_account: boolean;
            party: string | null;
            /** Format: int64 */
            party_id: number | null;
            party_type: string | null;
            party_uuid: string | null;
            status: string;
            uuid: string;
        };
        BankAccountFields: {
            account_name: string;
            bank_account_number?: string | null;
            bank_account_type: string;
            /** Format: int64 */
            bank_id: number;
            branch_code?: string | null;
            /** Format: int64 */
            company_account_id?: number | null;
            iban?: string | null;
            is_company_account: boolean;
            /** Format: int64 */
            party_id: number | null;
        };
        BankData: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            fields: components["schemas"]["BankFields"];
            /** Format: int64 */
            id: number;
        };
        BankDto: {
            /** Format: int64 */
            id: number;
            name: string;
            status: string;
            uuid: string;
        };
        BankFields: {
            name: string;
        };
        BatchBundleDto: {
            batch_bundle_no: string;
            created_at: string;
            /** Format: int64 */
            id: number;
            item: string;
            item_code: string;
            voucher_type: string;
            warehouse: string;
            warehouse_uuid: string;
        };
        BookingData: {
            available_courts?: components["schemas"]["AvailableCourtDto"][];
            /** Format: int64 */
            court_id: number;
            court_name: string;
            /** Format: int32 */
            day_week: number;
            /** Format: double */
            discount?: number;
            /** Format: date-time */
            end_date: string;
            is_reserved: boolean;
            /** Format: date-time */
            start_date: string;
            times: string[];
            /** Format: double */
            total_price?: number;
        };
        BookingDto: {
            code: string;
            contacts: components["schemas"]["ContactDto"][];
            /** Format: int64 */
            court_id: number;
            court_name: string;
            court_uuid: string;
            /** Format: date-time */
            created_at: string;
            /** Format: int64 */
            discount: number;
            /** Format: date-time */
            end_date: string;
            /** Format: int64 */
            event_id: number | null;
            evento_name: string | null;
            /** Format: int64 */
            id: number;
            /** Format: int64 */
            paid: number;
            /** Format: int64 */
            party_id: number;
            party_name: string;
            party_uuid: string;
            /** Format: date-time */
            start_date: string;
            status: string;
            /** Format: int64 */
            total_price: number;
        };
        BookingPaymentBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            /** Format: double */
            added_amount: number;
            /** Format: int64 */
            booking_id: number;
            /** Format: double */
            total_paid_amount: number;
        };
        BookingRescheduleBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            booking: components["schemas"]["BookingData"];
            booking_code: string;
            /** Format: int64 */
            booking_id: number;
            /** Format: int32 */
            paid_amount: number;
            /** Format: int64 */
            party_id: number;
        };
        BookingScheduleBodyBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            booking_slots: components["schemas"]["BookingSlotDto"][];
            cour_rates: components["schemas"]["CourtRateDto"][];
        };
        BookingSlotDto: {
            booking_code: string;
            /** Format: int64 */
            booking_id: number;
            /** Format: date-time */
            datetime: string;
            /** Format: int32 */
            paid_price: number;
            party_name: string;
            /** Format: int32 */
            total_price: number;
            type: string;
        };
        CashFlowEntryDto: {
            account_name: string;
            account_type: string;
            /** Format: int64 */
            amount: number;
            cash_flow_section: string;
        };
        CashOutflowData: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            fields: components["schemas"]["CashOutflowFields"];
            /** Format: int64 */
            id: number;
            tax_and_charges: components["schemas"]["CreateTaxAndChanges"];
        };
        CashOutflowDto: {
            /** Format: int64 */
            amount: number;
            auth_code: string | null;
            cash_outflow_type: string | null;
            code: string;
            concept: string | null;
            cost_center: string | null;
            /** Format: int64 */
            cost_center_id: number | null;
            cost_center_uuid: string | null;
            ctrl_code: string | null;
            /** Format: date-time */
            emision_date: string | null;
            /** Format: int64 */
            id: number;
            invoice_no: string | null;
            nit: string | null;
            party: string;
            /** Format: int64 */
            party_id: number;
            party_type: string;
            party_uuid: string;
            /** Format: date-time */
            posting_date: string;
            posting_time: string;
            project: string | null;
            /** Format: int64 */
            project_id: number | null;
            project_uuid: string | null;
            status: string;
            tz: string;
        };
        CashOutflowFields: {
            /** Format: int64 */
            amount: number;
            auth_code?: string | null;
            cash_outflow_type?: string | null;
            concept?: string | null;
            /** Format: int64 */
            cost_center_id?: number | null;
            ctrl_code?: string | null;
            /** Format: date-time */
            emision_date?: string | null;
            invoice_no?: string | null;
            nit?: string | null;
            /** Format: int64 */
            party_id: number;
            party_type: string;
            /** Format: date-time */
            posting_date: string;
            posting_time: string;
            /** Format: int64 */
            project_id?: number | null;
            tz: string;
        };
        ChangePasswordRequestBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            password: string;
            token: string;
        };
        ChargesTemplateBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            charges_template: components["schemas"]["ChargesTemplateData"];
            tax_and_charges: components["schemas"]["CreateTaxAndChanges"];
        };
        ChargesTemplateData: {
            name: string;
        };
        ChargesTemplateDto: {
            created_at: string;
            /** Format: int64 */
            id: number;
            name: string;
            status: string;
            uuid: string;
        };
        ChartDashboardData: {
            booking_hours: components["schemas"]["ChartDataDto"][];
            booking_hours_avg: components["schemas"]["ChartDataDto"][];
            income: components["schemas"]["ChartDataDto"][];
            income_avg: components["schemas"]["ChartDataDto"][];
        };
        ChartDataBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            end_date: string;
            start_date: string;
            time_unit?: string;
        };
        ChartDataDto: {
            name: string;
            /** Format: double */
            value: number;
            /** Format: double */
            value2: number | null;
        };
        ChatDetailDto: {
            /** Format: date-time */
            created_at: string;
            entity_href: string;
            /** Format: int64 */
            id: number;
            members: components["schemas"]["ChatMemberDto"][];
            name: string;
            /** Format: int64 */
            party_id: number;
            type: string;
        };
        ChatDto: {
            /** Format: int64 */
            id: number;
            last_message_content: string | null;
            /** Format: date-time */
            last_message_created_at: string | null;
            last_message_type: string | null;
            name: string | null;
            profile_fn: string | null;
            profile_gn: string | null;
            /** Format: int64 */
            profile_id: number | null;
            type: string;
            /** Format: int64 */
            unread_count: number;
        };
        ChatMemberDto: {
            chat: string;
            /** Format: int64 */
            chat_id: number;
            /** Format: int64 */
            id: number;
            /** Format: date-time */
            last_read_at: string;
            profile_fn: string;
            profile_gn: string;
            /** Format: int64 */
            profile_id: number;
        };
        ChatMessageData: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            fields: components["schemas"]["ChatMessageFields"];
            /** Format: int64 */
            id?: number;
            profile_fn?: string;
            profile_gn?: string;
        };
        ChatMessageDto: {
            /** Format: int64 */
            chat_id: number;
            content: string;
            /** Format: date-time */
            created_at: string;
            /** Format: int64 */
            id: number;
            profile_fn: string;
            profile_gn: string;
            /** Format: int64 */
            profile_id: number;
            type: string;
        };
        ChatMessageFields: {
            /** Format: int64 */
            chat_id: number;
            content: string;
            /** Format: int64 */
            profile_id: number;
            type: string;
        };
        Client: {
            ClientKeyValueData: components["schemas"]["ClientKeyValueData"][];
            Code: string;
            Company: components["schemas"]["Company"];
            /** Format: int64 */
            CompanyID: number;
            CountryCode: string;
            /** Format: date-time */
            CreatedAt: string;
            DeletedAt?: components["schemas"]["DeletedAt"];
            EmailAddress: string;
            FamilyName: string;
            GivenName: string;
            /** Format: int64 */
            ID: number;
            OrganizationName: string;
            PhoneNumber: string;
            /** Format: date-time */
            UpdatedAt: string;
            /** Format: int64 */
            UserID: number;
            Uuid: string;
        };
        ClientKeyValueData: {
            /** Format: int64 */
            ID?: number;
            /** Format: int64 */
            baseId?: number;
            key: string;
            value: string;
        };
        Company: {
            code: string;
            /** Format: date-time */
            created_at: string;
            deleted_at: components["schemas"]["DeletedAt"];
            /** Format: int64 */
            id: number;
            is_group: boolean;
            logo: string | null;
            name: string;
            /** Format: int32 */
            ordinal: number;
            /** Format: int64 */
            parent_id: number | null;
            site_url: string | null;
            /** Format: date-time */
            updated_at: string | null;
            uuid: string;
        };
        CompanyAdminData: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            company_modules: components["schemas"]["CompanyModule"][];
            name: string;
        };
        CompanyDefaultsDto: {
            currency: string;
        };
        CompanyDto: {
            /** Format: date-time */
            created_at: string;
            /** Format: int64 */
            id: number;
            logo: string | null;
            name: string;
            /** Format: int64 */
            ordinal: number;
            site_url: string | null;
            uuid: string;
        };
        CompanyEntityDto: {
            /** Format: int64 */
            company_id: number | null;
            enabled: boolean;
            /** Format: int64 */
            entity_id: number;
            entity_name: string;
        };
        CompanyModule: {
            icon_code: string;
            icon_name: string;
            label: string;
            name: string;
            /** Format: int32 */
            priority: number;
        };
        CompanyPlugins: {
            /** Format: int64 */
            CompanyID?: number;
            Credentials?: string;
            Plugin: string;
        };
        ContactBulkData: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            contacts: components["schemas"]["ContactData"][];
            /** Format: int64 */
            party_id?: number;
        };
        ContactData: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            action?: string;
            fields: components["schemas"]["ContactFields"];
            /** Format: int64 */
            id?: number;
            /** Format: int64 */
            reference_id?: number | null;
        };
        ContactDto: {
            /** Format: date-time */
            created_at: string;
            email: string | null;
            gender: string | null;
            /** Format: int64 */
            id: number;
            name: string;
            phone_number: string | null;
            uuid: string;
        };
        ContactFields: {
            /** Format: email */
            email?: string | null;
            gender?: string | null;
            name: string;
            phone_number?: string | null;
        };
        CostCenterDto: {
            /** Format: date-time */
            created_at: string;
            /** Format: int64 */
            id: number;
            name: string;
            status: string;
        };
        Country: {
            code: string;
            label?: string;
            phone?: string;
        };
        CourtDto: {
            /** Format: date-time */
            created_at: string;
            /** Format: int64 */
            id: number;
            name: string;
            status: string;
            uuid: string;
        };
        CourtRateData: {
            /** Format: int32 */
            day_week: number;
            enabled: boolean;
            /** Format: double */
            rate: number;
            time: string;
        };
        CourtRateDto: {
            currency: string;
            /** Format: int32 */
            day_week: number;
            enabled: boolean;
            /** Format: double */
            rate: number;
            time: string;
        };
        CreateBookingBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            /** Format: double */
            advance_payment?: number;
            bookings: components["schemas"]["BookingData"][];
            comment?: string;
            /** Format: int64 */
            customer_id: number;
            /** Format: int64 */
            event_id?: number | null;
        };
        CreateCompanyRequestBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            name: string;
            /** Format: int64 */
            parentId?: number | null;
        };
        CreateCostCenterRequetBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            name: string;
            status: string;
        };
        CreateCourtBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            name: string;
        };
        CreateCurrencyExchangeRequestBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            /** Format: double */
            exchange_rate: number;
            for_buying: boolean;
            for_selling: boolean;
            from_currency: string;
            name: string;
            to_currency: string;
        };
        CreateEntityRequestBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            name: string;
        };
        CreateGroupRequestBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            name: string;
            party_type_code: string;
        };
        CreateItemAttributeRequestBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            name: string;
            values: components["schemas"]["ItemAttributeValueDto"][];
        };
        CreateItemData: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            item: components["schemas"]["ItemData"];
            item_inventory: components["schemas"]["ItemInventoryData"];
            item_price_lines: components["schemas"]["ItemPriceLine"][];
        };
        CreateItemLines: {
            lines: components["schemas"]["LineItemData"][];
        };
        CreateItemVariantRequestBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            /** Format: int32 */
            attribute_value_id: number;
            item_uuid: string;
            name: string;
        };
        CreateJorunalEntryBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            entry_lines: components["schemas"]["JournalEntryLineData"][];
            entry_type: string;
            /** Format: date-time */
            posting_date: string;
        };
        CreatePartyAddressRequestBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            address: components["schemas"]["AddressRequestData"];
            /** Format: int64 */
            party_reference?: number | null;
        };
        CreatePaymentReference: {
            /** Format: double */
            allocated: number;
            currency: string;
            /** Format: double */
            outstanding: number;
            party_code: string;
            /** Format: int64 */
            party_id: number;
            party_type: string;
            /** Format: double */
            total: number;
        };
        CreatePianoBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            "dropoff-city": string;
            "dropoff-flights": string;
            "dropoff-state": string;
            "dropoff-street": string;
            "dropoff-zip": string;
            email: string;
            "first-name": string;
            "last-name": string;
            "moving-date": string;
            phone: string;
            "piano-type": string;
            "pickup-city": string;
            "pickup-flights": string;
            "pickup-state": string;
            "pickup-street": string;
            "pickup-zip": string;
            "rent-piano": string;
            "stairs-dropoff": string;
            "stairs-pickup": string;
        };
        CreateProjectRequestBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            name: string;
            status: string;
        };
        CreatePurchaseOrderRequestBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            currency: components["schemas"]["CurrencyDto"];
            /** Format: date-time */
            date: string;
            /** Format: date-time */
            delivery_date?: string | null;
            lines: components["schemas"]["LineItemData"][];
            party_type: string;
            party_uuid: string;
        };
        CreateRoleTemplateRequestBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            name: string;
        };
        CreateTaxAndChanges: {
            lines: components["schemas"]["TaxAndChargeLineData"][];
        };
        CreateTaxRequestBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            enabled: boolean;
            name: string;
            /** Format: double */
            value: number;
        };
        CreateUserAdminRequestBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            /** Format: int64 */
            company_id: number;
            first_name: string;
            identifier: string;
            last_name?: string;
        };
        CreateUserRequestBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            company_ids?: number[];
            /** Format: email */
            email: string;
            family_name: string;
            given_name: string;
            key_value_data?: components["schemas"]["KeyValueData"][];
            party_code: string;
            phone_number?: string;
            role_uuid: string;
        };
        CreateWareHouseRequestBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            is_group: boolean;
            name: string;
            /** Format: int64 */
            parent_id?: number;
        };
        CuatropfSubscriptionRequestBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            companyName: string;
            country?: components["schemas"]["Country"];
            deleteAt?: components["schemas"]["DeletedAt"];
            email: string;
            familyName: string;
            givenName: string;
            keyValues?: components["schemas"]["ClientKeyValueData"][];
            metadata?: string;
            phoneNumber: string;
            plugins?: components["schemas"]["CompanyPlugins"][];
        };
        CurrencyDto: {
            code: string;
        };
        CurrencyExchangeDto: {
            /** Format: int32 */
            exchange_rate: number;
            for_buying: boolean;
            for_selling: boolean;
            from_currency: string;
            /** Format: int64 */
            id: number;
            name: string;
            status: string;
            to_currency: string;
            uuid: string;
        };
        CustomerData: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            contacts: components["schemas"]["ContactData"][];
            fields: components["schemas"]["CustomerFields"];
            /** Format: int64 */
            id?: number;
        };
        CustomerDto: {
            /** Format: date-time */
            created_at: string;
            customer_type: string;
            /** Format: int64 */
            group_id: number | null;
            group_name?: string | null;
            group_uuid?: string | null;
            /** Format: int64 */
            id: number;
            name: string;
            status: string;
            uuid: string;
        };
        CustomerFields: {
            customer_type: string;
            /** Format: int64 */
            group_id?: number | null;
            name: string;
        };
        CustomerType: {
            code: string;
            name: string;
        };
        DealData: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            contacts: components["schemas"]["ContactData"][];
            fields: components["schemas"]["DealFields"];
            /** Format: int64 */
            id: number;
            participants: components["schemas"]["ParticipantData"][];
        };
        DealDetailDto: {
            deal: components["schemas"]["DealDto"];
            participants: components["schemas"]["ProfileDto"][];
        };
        DealDto: {
            /** Format: int64 */
            amount: number;
            available_for_everyone: boolean;
            /** Format: date-time */
            created_at: string;
            currency: string;
            customer: string | null;
            /** Format: int64 */
            customer_id: number | null;
            deal_type: string | null;
            /** Format: date-time */
            end_date: string | null;
            /** Format: int64 */
            id: number;
            /** Format: int32 */
            index: number;
            name: string;
            responsible_family_name: string;
            responsible_given_name: string;
            /** Format: int64 */
            responsible_id: number;
            responsible_uuid: string;
            source: string | null;
            source_information: string | null;
            stage: string;
            /** Format: int32 */
            stage_id: number;
            /** Format: int32 */
            stage_index: number;
            /** Format: date-time */
            start_date: string;
            uuid: string;
        };
        DealFields: {
            /** Format: int64 */
            amount: number;
            available_for_everyone: boolean;
            currency: string;
            /** Format: int64 */
            customer_id?: number | null;
            deal_type?: string | null;
            /** Format: date-time */
            end_date?: string | null;
            /** Format: int32 */
            index: number;
            name: string;
            /** Format: int64 */
            responsible_id: number;
            source?: string | null;
            source_information?: string | null;
            /** Format: int64 */
            stage_id: number;
            /** Format: date-time */
            start_date: string;
        };
        DeleteEventBatchRequestBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            event_ids: number[];
        };
        DeleteLineItemRequestBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            charges?: components["schemas"]["TaxAndChargeLineDto"][];
            /** Format: int64 */
            doc_party_id?: number;
            doc_party_type?: string;
            /** Format: int32 */
            id: number;
            /** Format: double */
            total_amount?: number;
            /** Format: double */
            total_amount_items?: number;
            /** Format: int32 */
            total_items: number;
            update_stock?: boolean;
        };
        DeleteTaxLineRequestBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            /** Format: int64 */
            doc_party_id?: number;
            doc_party_type?: string;
            /** Format: int32 */
            id: number;
            /** Format: double */
            total_amount: number;
        };
        DeletedAt: {
            /** Format: date-time */
            Time: string;
            Valid: boolean;
        };
        DeliveryLineItemData: {
            /** Format: int64 */
            source_warehouse: number;
        };
        DocAccountingData: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            /** Format: int64 */
            doc_id: number;
            doc_party_type: string;
            fields: components["schemas"]["DocAccountingFields"];
        };
        DocAccountingDto: {
            credit_account: string | null;
            /** Format: int64 */
            credit_account_id: number | null;
            credit_account_uuid: string | null;
            debit_account: string | null;
            /** Format: int64 */
            debit_account_id: number | null;
            debit_account_uuid: string | null;
        };
        DocAccountingFields: {
            /** Format: int64 */
            credit_account_id?: number | null;
            /** Format: int64 */
            debit_account_id?: number | null;
        };
        DocTermsData: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            /** Format: int64 */
            doc_id: number;
            doc_party_type: string;
            fields: components["schemas"]["DocTermsFields"];
        };
        DocTermsDto: {
            payment_term_template: string | null;
            /** Format: int64 */
            payment_term_template_id: number | null;
            payment_term_template_uuid: string | null;
            terms_and_condition: string | null;
            /** Format: int64 */
            terms_and_condition_id: number | null;
            terms_and_condition_uuid: string | null;
        };
        DocTermsFields: {
            /** Format: int64 */
            payment_term_template_id?: number | null;
            /** Format: int64 */
            terms_and_condition_id?: number | null;
        };
        EditChargesTemplateRequestBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            /** Format: int64 */
            id: number;
            name: string;
        };
        EditClientRequestBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            familyName: string;
            givenName: string;
            organizationName: string;
            phoneNumber: components["schemas"]["PhoneNumber"];
        };
        EditCourtBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            /** Format: int64 */
            court_id: number;
            name: string;
        };
        EditCurrencyExchangeRequestBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            /** Format: double */
            exchange_rate: number;
            for_buying: boolean;
            for_selling: boolean;
            from_currency: string;
            /** Format: int64 */
            id: number;
            name: string;
            to_currency: string;
        };
        EditGroupRequestBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            /** Format: int64 */
            id: number;
            name: string;
            party_type_code: string;
        };
        EditItemPriceRequestBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            /** Format: int64 */
            id: number;
            /** Format: int64 */
            item_id: number;
            /** Format: int32 */
            item_quantity: number;
            /** Format: int64 */
            price_list_id: number;
            /** Format: double */
            rate: number;
            /** Format: int64 */
            uom_id: number;
        };
        EditItemRequestBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            description?: string | null;
            /** Format: int64 */
            group_id?: number;
            /** Format: int64 */
            id: number;
            item_code: string;
            maintain_stock: boolean;
            name: string;
            /** Format: int64 */
            uom_id: number;
        };
        EditLineItemRequestBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            charges?: components["schemas"]["TaxAndChargeLineDto"][];
            /** Format: int64 */
            doc_party_id?: number;
            doc_party_type?: string;
            /** Format: int32 */
            id: number;
            line_item_data: components["schemas"]["LineItemData"];
            /** Format: double */
            total_amount?: number;
            /** Format: double */
            total_amount_items?: number;
            /** Format: int32 */
            total_items: number;
            update_stock?: boolean;
        };
        EditPriceListRequestBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            currency: string;
            /** Format: int64 */
            id: number;
            isBuying: boolean;
            isSelling: boolean;
            name: string;
        };
        EditRolePermissionActionsBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actionSelecteds: components["schemas"]["ActionSelected"][];
            entityName: string;
            entity_actions: components["schemas"]["EntityActionsDto"];
            role_uuid: string;
        };
        EditTaxLineRequestBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            /** Format: double */
            amount: number;
            /** Format: int64 */
            doc_party_id?: number;
            doc_party_type?: string;
            /** Format: int32 */
            id: number;
            is_deducted: boolean;
            /** Format: int64 */
            ledger: number;
            /** Format: int32 */
            tax_rate: number;
            /** Format: double */
            total_amount: number;
            type: string;
        };
        EditWarehouseRequestBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            /** Format: int64 */
            id: number;
            is_group: boolean;
            name: string;
            /** Format: int64 */
            parent_id?: number;
        };
        EditableProfileFields: {
            family_name: string;
            given_name: string;
            phone_number?: string | null;
        };
        EntityActionsDto: {
            actions: components["schemas"]["ActionDto"][];
            entity: components["schemas"]["EntityDto"];
        };
        EntityDetailDto: {
            actions: components["schemas"]["ActionDto"][];
            entity: components["schemas"]["EntityDto"];
        };
        EntityDto: {
            href: string;
            /** Format: int64 */
            id: number;
            name: string;
        };
        EntityResponseAccountSettingsDtoBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            associated_actions: {
                [key: string]: components["schemas"]["ActionDto"][] | undefined;
            };
            message: string;
            result: components["schemas"]["AccountSettingsDto"];
        };
        EntityResponseClientBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            associated_actions: {
                [key: string]: components["schemas"]["ActionDto"][] | undefined;
            };
            message: string;
            result: components["schemas"]["Client"];
        };
        EntityResponseCompanyBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            associated_actions: {
                [key: string]: components["schemas"]["ActionDto"][] | undefined;
            };
            message: string;
            result: components["schemas"]["Company"];
        };
        EntityResponseGeneralLedgerDataBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            associated_actions: {
                [key: string]: components["schemas"]["ActionDto"][] | undefined;
            };
            message: string;
            result: components["schemas"]["GeneralLedgerData"];
        };
        EntityResponseGeneralLedgerOpeningBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            associated_actions: {
                [key: string]: components["schemas"]["ActionDto"][] | undefined;
            };
            message: string;
            result: components["schemas"]["GeneralLedgerOpening"];
        };
        EntityResponseItemAttributeDtoBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            associated_actions: {
                [key: string]: components["schemas"]["ActionDto"][] | undefined;
            };
            message: string;
            result: components["schemas"]["ItemAttributeDto"];
        };
        EntityResponseItemDtoBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            associated_actions: {
                [key: string]: components["schemas"]["ActionDto"][] | undefined;
            };
            message: string;
            result: components["schemas"]["ItemDto"];
        };
        EntityResponseListAccountPayableEntryDtoBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            associated_actions: {
                [key: string]: components["schemas"]["ActionDto"][] | undefined;
            };
            message: string;
            result: components["schemas"]["AccountPayableEntryDto"][];
        };
        EntityResponseListAccountReceivableEntryDtoBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            associated_actions: {
                [key: string]: components["schemas"]["ActionDto"][] | undefined;
            };
            message: string;
            result: components["schemas"]["AccountReceivableEntryDto"][];
        };
        EntityResponseListBalanceSheetEntryDtoBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            associated_actions: {
                [key: string]: components["schemas"]["ActionDto"][] | undefined;
            };
            message: string;
            result: components["schemas"]["BalanceSheetEntryDto"][];
        };
        EntityResponseListCashFlowEntryDtoBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            associated_actions: {
                [key: string]: components["schemas"]["ActionDto"][] | undefined;
            };
            message: string;
            result: components["schemas"]["CashFlowEntryDto"][];
        };
        EntityResponseListCompanyEntityDtoBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            associated_actions: {
                [key: string]: components["schemas"]["ActionDto"][] | undefined;
            };
            message: string;
            result: components["schemas"]["CompanyEntityDto"][];
        };
        EntityResponseListGeneralLedgerEntryDtoBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            associated_actions: {
                [key: string]: components["schemas"]["ActionDto"][] | undefined;
            };
            message: string;
            result: components["schemas"]["GeneralLedgerEntryDto"][];
        };
        EntityResponseListProfitAndLossEntryDtoBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            associated_actions: {
                [key: string]: components["schemas"]["ActionDto"][] | undefined;
            };
            message: string;
            result: components["schemas"]["ProfitAndLossEntryDto"][];
        };
        EntityResponseListStockBalanceEntryDtoBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            associated_actions: {
                [key: string]: components["schemas"]["ActionDto"][] | undefined;
            };
            message: string;
            result: components["schemas"]["StockBalanceEntryDto"][];
        };
        EntityResponseListStockLedgerEntryDtoBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            associated_actions: {
                [key: string]: components["schemas"]["ActionDto"][] | undefined;
            };
            message: string;
            result: components["schemas"]["StockLedgerEntryDto"][];
        };
        EntityResponseListSumaryEntryDtoBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            associated_actions: {
                [key: string]: components["schemas"]["ActionDto"][] | undefined;
            };
            message: string;
            result: components["schemas"]["SumaryEntryDto"][];
        };
        EntityResponseListUserDtoBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            associated_actions: {
                [key: string]: components["schemas"]["ActionDto"][] | undefined;
            };
            message: string;
            result: components["schemas"]["UserDto"][];
        };
        EntityResponseListUserRelationDtoBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            associated_actions: {
                [key: string]: components["schemas"]["ActionDto"][] | undefined;
            };
            message: string;
            result: components["schemas"]["UserRelationDto"][];
        };
        EntityResponseResultEntityAddressDtoBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            associated_actions: {
                [key: string]: components["schemas"]["ActionDto"][] | undefined;
            };
            message: string;
            result: components["schemas"]["ResultEntityAddressDto"];
        };
        EntityResponseResultEntityBankAccountDtoBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            associated_actions: {
                [key: string]: components["schemas"]["ActionDto"][] | undefined;
            };
            message: string;
            result: components["schemas"]["ResultEntityBankAccountDto"];
        };
        EntityResponseResultEntityBankDtoBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            associated_actions: {
                [key: string]: components["schemas"]["ActionDto"][] | undefined;
            };
            message: string;
            result: components["schemas"]["ResultEntityBankDto"];
        };
        EntityResponseResultEntityBatchBundleDtoBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            associated_actions: {
                [key: string]: components["schemas"]["ActionDto"][] | undefined;
            };
            message: string;
            result: components["schemas"]["ResultEntityBatchBundleDto"];
        };
        EntityResponseResultEntityBookingDtoBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            associated_actions: {
                [key: string]: components["schemas"]["ActionDto"][] | undefined;
            };
            message: string;
            result: components["schemas"]["ResultEntityBookingDto"];
        };
        EntityResponseResultEntityCashOutflowDtoBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            associated_actions: {
                [key: string]: components["schemas"]["ActionDto"][] | undefined;
            };
            message: string;
            result: components["schemas"]["ResultEntityCashOutflowDto"];
        };
        EntityResponseResultEntityChargesTemplateDtoBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            associated_actions: {
                [key: string]: components["schemas"]["ActionDto"][] | undefined;
            };
            message: string;
            result: components["schemas"]["ResultEntityChargesTemplateDto"];
        };
        EntityResponseResultEntityCompanyDtoBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            associated_actions: {
                [key: string]: components["schemas"]["ActionDto"][] | undefined;
            };
            message: string;
            result: components["schemas"]["ResultEntityCompanyDto"];
        };
        EntityResponseResultEntityContactDtoBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            associated_actions: {
                [key: string]: components["schemas"]["ActionDto"][] | undefined;
            };
            message: string;
            result: components["schemas"]["ResultEntityContactDto"];
        };
        EntityResponseResultEntityCostCenterDtoBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            associated_actions: {
                [key: string]: components["schemas"]["ActionDto"][] | undefined;
            };
            message: string;
            result: components["schemas"]["ResultEntityCostCenterDto"];
        };
        EntityResponseResultEntityCourtDtoBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            associated_actions: {
                [key: string]: components["schemas"]["ActionDto"][] | undefined;
            };
            message: string;
            result: components["schemas"]["ResultEntityCourtDto"];
        };
        EntityResponseResultEntityCurrencyExchangeDtoBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            associated_actions: {
                [key: string]: components["schemas"]["ActionDto"][] | undefined;
            };
            message: string;
            result: components["schemas"]["ResultEntityCurrencyExchangeDto"];
        };
        EntityResponseResultEntityCustomerDtoBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            associated_actions: {
                [key: string]: components["schemas"]["ActionDto"][] | undefined;
            };
            message: string;
            result: components["schemas"]["ResultEntityCustomerDto"];
        };
        EntityResponseResultEntityDealDetailDtoBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            associated_actions: {
                [key: string]: components["schemas"]["ActionDto"][] | undefined;
            };
            message: string;
            result: components["schemas"]["ResultEntityDealDetailDto"];
        };
        EntityResponseResultEntityEntityDetailDtoBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            associated_actions: {
                [key: string]: components["schemas"]["ActionDto"][] | undefined;
            };
            message: string;
            result: components["schemas"]["ResultEntityEntityDetailDto"];
        };
        EntityResponseResultEntityEventBookingDetailBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            associated_actions: {
                [key: string]: components["schemas"]["ActionDto"][] | undefined;
            };
            message: string;
            result: components["schemas"]["ResultEntityEventBookingDetail"];
        };
        EntityResponseResultEntityGroupDtoBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            associated_actions: {
                [key: string]: components["schemas"]["ActionDto"][] | undefined;
            };
            message: string;
            result: components["schemas"]["ResultEntityGroupDto"];
        };
        EntityResponseResultEntityInvoiceDetailDtoBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            associated_actions: {
                [key: string]: components["schemas"]["ActionDto"][] | undefined;
            };
            message: string;
            result: components["schemas"]["ResultEntityInvoiceDetailDto"];
        };
        EntityResponseResultEntityItemAttributeDtoBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            associated_actions: {
                [key: string]: components["schemas"]["ActionDto"][] | undefined;
            };
            message: string;
            result: components["schemas"]["ResultEntityItemAttributeDto"];
        };
        EntityResponseResultEntityItemDetailDtoBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            associated_actions: {
                [key: string]: components["schemas"]["ActionDto"][] | undefined;
            };
            message: string;
            result: components["schemas"]["ResultEntityItemDetailDto"];
        };
        EntityResponseResultEntityItemPriceDtoBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            associated_actions: {
                [key: string]: components["schemas"]["ActionDto"][] | undefined;
            };
            message: string;
            result: components["schemas"]["ResultEntityItemPriceDto"];
        };
        EntityResponseResultEntityJournalEntryDetailDtoBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            associated_actions: {
                [key: string]: components["schemas"]["ActionDto"][] | undefined;
            };
            message: string;
            result: components["schemas"]["ResultEntityJournalEntryDetailDto"];
        };
        EntityResponseResultEntityLedgerDetailDtoBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            associated_actions: {
                [key: string]: components["schemas"]["ActionDto"][] | undefined;
            };
            message: string;
            result: components["schemas"]["ResultEntityLedgerDetailDto"];
        };
        EntityResponseResultEntityListCustomerTypeBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            associated_actions: {
                [key: string]: components["schemas"]["ActionDto"][] | undefined;
            };
            message: string;
            result: components["schemas"]["ResultEntityListCustomerType"];
        };
        EntityResponseResultEntityListEntityActionsDtoBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            associated_actions: {
                [key: string]: components["schemas"]["ActionDto"][] | undefined;
            };
            message: string;
            result: components["schemas"]["ResultEntityListEntityActionsDto"];
        };
        EntityResponseResultEntityListGroupHierarchyDtoBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            associated_actions: {
                [key: string]: components["schemas"]["ActionDto"][] | undefined;
            };
            message: string;
            result: components["schemas"]["ResultEntityListGroupHierarchyDto"];
        };
        EntityResponseResultEntityListItemPriceDtoBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            associated_actions: {
                [key: string]: components["schemas"]["ActionDto"][] | undefined;
            };
            message: string;
            result: components["schemas"]["ResultEntityListItemPriceDto"];
        };
        EntityResponseResultEntityListPartyDtoBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            associated_actions: {
                [key: string]: components["schemas"]["ActionDto"][] | undefined;
            };
            message: string;
            result: components["schemas"]["ResultEntityListPartyDto"];
        };
        EntityResponseResultEntityListPartyTypeDtoBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            associated_actions: {
                [key: string]: components["schemas"]["ActionDto"][] | undefined;
            };
            message: string;
            result: components["schemas"]["ResultEntityListPartyTypeDto"];
        };
        EntityResponseResultEntityModuleDetailDtoBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            associated_actions: {
                [key: string]: components["schemas"]["ActionDto"][] | undefined;
            };
            message: string;
            result: components["schemas"]["ResultEntityModuleDetailDto"];
        };
        EntityResponseResultEntityOrderDetailDtoBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            associated_actions: {
                [key: string]: components["schemas"]["ActionDto"][] | undefined;
            };
            message: string;
            result: components["schemas"]["ResultEntityOrderDetailDto"];
        };
        EntityResponseResultEntityOrderDtoBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            associated_actions: {
                [key: string]: components["schemas"]["ActionDto"][] | undefined;
            };
            message: string;
            result: components["schemas"]["ResultEntityOrderDto"];
        };
        EntityResponseResultEntityPaymentDetailDtoBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            associated_actions: {
                [key: string]: components["schemas"]["ActionDto"][] | undefined;
            };
            message: string;
            result: components["schemas"]["ResultEntityPaymentDetailDto"];
        };
        EntityResponseResultEntityPaymentTermsDtoBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            associated_actions: {
                [key: string]: components["schemas"]["ActionDto"][] | undefined;
            };
            message: string;
            result: components["schemas"]["ResultEntityPaymentTermsDto"];
        };
        EntityResponseResultEntityPaymentTermsTemplateDtoBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            associated_actions: {
                [key: string]: components["schemas"]["ActionDto"][] | undefined;
            };
            message: string;
            result: components["schemas"]["ResultEntityPaymentTermsTemplateDto"];
        };
        EntityResponseResultEntityPianoFormBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            associated_actions: {
                [key: string]: components["schemas"]["ActionDto"][] | undefined;
            };
            message: string;
            result: components["schemas"]["ResultEntityPianoForm"];
        };
        EntityResponseResultEntityPriceListDtoBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            associated_actions: {
                [key: string]: components["schemas"]["ActionDto"][] | undefined;
            };
            message: string;
            result: components["schemas"]["ResultEntityPriceListDto"];
        };
        EntityResponseResultEntityPricingDetailDtoBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            associated_actions: {
                [key: string]: components["schemas"]["ActionDto"][] | undefined;
            };
            message: string;
            result: components["schemas"]["ResultEntityPricingDetailDto"];
        };
        EntityResponseResultEntityProfileDtoBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            associated_actions: {
                [key: string]: components["schemas"]["ActionDto"][] | undefined;
            };
            message: string;
            result: components["schemas"]["ResultEntityProfileDto"];
        };
        EntityResponseResultEntityProjectDtoBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            associated_actions: {
                [key: string]: components["schemas"]["ActionDto"][] | undefined;
            };
            message: string;
            result: components["schemas"]["ResultEntityProjectDto"];
        };
        EntityResponseResultEntityPurchaseRecordDtoBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            associated_actions: {
                [key: string]: components["schemas"]["ActionDto"][] | undefined;
            };
            message: string;
            result: components["schemas"]["ResultEntityPurchaseRecordDto"];
        };
        EntityResponseResultEntityQuotationDetailDtoBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            associated_actions: {
                [key: string]: components["schemas"]["ActionDto"][] | undefined;
            };
            message: string;
            result: components["schemas"]["ResultEntityQuotationDetailDto"];
        };
        EntityResponseResultEntityReceiptDetailDtoBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            associated_actions: {
                [key: string]: components["schemas"]["ActionDto"][] | undefined;
            };
            message: string;
            result: components["schemas"]["ResultEntityReceiptDetailDto"];
        };
        EntityResponseResultEntityRoleDtoBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            associated_actions: {
                [key: string]: components["schemas"]["ActionDto"][] | undefined;
            };
            message: string;
            result: components["schemas"]["ResultEntityRoleDto"];
        };
        EntityResponseResultEntityRoleTemplateDtoBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            associated_actions: {
                [key: string]: components["schemas"]["ActionDto"][] | undefined;
            };
            message: string;
            result: components["schemas"]["ResultEntityRoleTemplateDto"];
        };
        EntityResponseResultEntitySalesRecordDtoBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            associated_actions: {
                [key: string]: components["schemas"]["ActionDto"][] | undefined;
            };
            message: string;
            result: components["schemas"]["ResultEntitySalesRecordDto"];
        };
        EntityResponseResultEntitySerialNoDtoBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            associated_actions: {
                [key: string]: components["schemas"]["ActionDto"][] | undefined;
            };
            message: string;
            result: components["schemas"]["ResultEntitySerialNoDto"];
        };
        EntityResponseResultEntityStockEntryDtoBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            associated_actions: {
                [key: string]: components["schemas"]["ActionDto"][] | undefined;
            };
            message: string;
            result: components["schemas"]["ResultEntityStockEntryDto"];
        };
        EntityResponseResultEntitySupplierDtoBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            associated_actions: {
                [key: string]: components["schemas"]["ActionDto"][] | undefined;
            };
            message: string;
            result: components["schemas"]["ResultEntitySupplierDto"];
        };
        EntityResponseResultEntityTaxDtoBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            associated_actions: {
                [key: string]: components["schemas"]["ActionDto"][] | undefined;
            };
            message: string;
            result: components["schemas"]["ResultEntityTaxDto"];
        };
        EntityResponseResultEntityTermsAndConditionsDtoBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            associated_actions: {
                [key: string]: components["schemas"]["ActionDto"][] | undefined;
            };
            message: string;
            result: components["schemas"]["ResultEntityTermsAndConditionsDto"];
        };
        EntityResponseResultEntityWareHouseDtoBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            associated_actions: {
                [key: string]: components["schemas"]["ActionDto"][] | undefined;
            };
            message: string;
            result: components["schemas"]["ResultEntityWareHouseDto"];
        };
        EntityResponseResultEntityWorkSpaceDtoBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            associated_actions: {
                [key: string]: components["schemas"]["ActionDto"][] | undefined;
            };
            message: string;
            result: components["schemas"]["ResultEntityWorkSpaceDto"];
        };
        EntityTransitionData: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            /** Format: int32 */
            destination_index: number;
            destination_name: string;
            /** Format: int64 */
            destination_stage_id: number;
            /** Format: int64 */
            id: number;
            /** Format: int32 */
            source_index: number;
            source_name: string;
            /** Format: int64 */
            source_stage_id: number;
        };
        ErrorDetail: {
            /** @description Where the error occurred, e.g. 'body.items[3].tags' or 'path.thing-id' */
            location?: string;
            /** @description Error message text */
            message?: string;
            /** @description The value at the given location */
            value?: unknown;
        };
        ErrorModel: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            /** @description A human-readable explanation specific to this occurrence of the problem. */
            detail?: string;
            /** @description Optional list of individual error details */
            errors?: components["schemas"]["ErrorDetail"][];
            /**
             * Format: uri
             * @description A URI reference that identifies the specific occurrence of the problem.
             */
            instance?: string;
            /**
             * Format: int64
             * @description HTTP status code
             */
            status?: number;
            /** @description A short, human-readable summary of the problem type. This value should not change between occurrences of the error. */
            title?: string;
            /**
             * Format: uri
             * @description A URI reference to human-readable documentation for the error.
             * @default about:blank
             */
            type: string;
        };
        EventBookingData: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            fields: components["schemas"]["EventBookingFields"];
            /** Format: int64 */
            id?: number;
        };
        EventBookingDetail: {
            booking_info: components["schemas"]["EventBookingInfo"];
            event: components["schemas"]["EventBookingDto"];
        };
        EventBookingDto: {
            /** Format: date-time */
            created_at: string;
            description: string | null;
            /** Format: int64 */
            id: number;
            name: string;
            status: string;
            uuid: string;
        };
        EventBookingFields: {
            description?: string | null;
            name: string;
        };
        EventBookingInfo: {
            end_date: string;
            start_date: string;
            /** Format: int64 */
            total_discount: number;
            /** Format: int64 */
            total_paid: number;
            /** Format: int64 */
            total_price: number;
        };
        ExportDataRequestBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            data: {
                [key: string]: string | undefined;
            };
        };
        ExportDocumentData: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            id: string;
            party_type?: string;
        };
        FilterOptionDto: {
            name: string;
            operators: string[];
            options: string[];
            param: string;
            party_type: string;
            type: string;
        };
        GeneralLedgerData: {
            entries: components["schemas"]["GeneralLedgerEntryDto"][];
            opening: components["schemas"]["GeneralLedgerOpening"];
        };
        GeneralLedgerEntryDto: {
            account: string;
            against_account: string;
            /** Format: int64 */
            balance: number;
            /** Format: int64 */
            credit: number;
            currency: string;
            /** Format: int64 */
            debit: number;
            party_name: string;
            party_type: string;
            /** Format: date-time */
            posting_date: string;
            voucher_no: string;
            voucher_subtype: string;
            voucher_type: string;
        };
        GeneralLedgerOpening: {
            /** Format: int64 */
            credit: number;
            /** Format: int64 */
            debit: number;
            /** Format: int64 */
            opening_balance: number;
        };
        GreetingOutputBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            /** @description Greeting message */
            message: string;
        };
        GroupDto: {
            /** Format: date-time */
            created_at: string;
            enabled: boolean;
            /** Format: int64 */
            id: number;
            is_group: boolean;
            name: string;
            /** Format: int64 */
            ordinal: number;
            uuid: string;
        };
        GroupHierarchyDto: {
            /** Format: int64 */
            depth: number;
            is_group: boolean;
            name: string;
            parent_uuid: string | null;
            uuid: string;
        };
        InvoiceBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            invoice: components["schemas"]["InvoiceData"];
            items: components["schemas"]["CreateItemLines"];
            tax_and_charges: components["schemas"]["CreateTaxAndChanges"];
        };
        InvoiceData: {
            fields: components["schemas"]["InvoiceFields"];
            /** Format: int64 */
            id?: number;
            invoice_party_type: string;
            record_no?: string;
            /** Format: double */
            total_amount: number;
        };
        InvoiceDetailDto: {
            acct_dimensions: components["schemas"]["AccountingDimensionDto"];
            invoice: components["schemas"]["InvoiceDto"];
            totals: components["schemas"]["TotalsDto"];
        };
        InvoiceDto: {
            code: string;
            cost_center: string | null;
            /** Format: int64 */
            cost_center_id: number | null;
            cost_center_uuid: string | null;
            /** Format: date-time */
            created_at: string;
            currency: string;
            /** Format: date-time */
            date: string;
            /** Format: int64 */
            doc_reference_id: number | null;
            /** Format: date-time */
            due_date: string | null;
            /** Format: int64 */
            id: number;
            /** Format: int32 */
            paid: number;
            /** Format: int32 */
            paid_amount: number;
            /** Format: int64 */
            party_id: number;
            party_name: string;
            party_type: string;
            party_uuid: string;
            /** Format: date-time */
            posting_date: string;
            posting_time: string;
            price_list: string | null;
            /** Format: int64 */
            price_list_id: number | null;
            price_list_uuid: string | null;
            project: string | null;
            /** Format: int64 */
            project_id: number | null;
            project_uuid: string | null;
            record_no: string;
            status: string;
            /** Format: int32 */
            total: number;
            /** Format: int32 */
            total_amount: number;
            tz: string;
            update_stock: boolean;
            warehouse: string | null;
            /** Format: int64 */
            warehouse_id: number | null;
            warehouse_uuid: string | null;
        };
        InvoiceFields: {
            /** Format: int64 */
            cost_center_id?: number | null;
            currency: string;
            /** Format: int64 */
            doc_reference_id?: number | null;
            /** Format: date-time */
            due_date?: string | null;
            /** Format: int64 */
            party_id: number;
            /** Format: date-time */
            posting_date: string;
            posting_time: string;
            /** Format: int64 */
            price_list_id?: number | null;
            /** Format: int64 */
            project_id?: number | null;
            tz: string;
            update_stock?: boolean;
            /** Format: int64 */
            warehouse_id?: number | null;
        };
        ItemAttributeDto: {
            /** Format: date-time */
            created_at: string;
            /** Format: int64 */
            id: number;
            item_attribute_values: components["schemas"]["ItemAttributeValueDto"][];
            name: string;
            uuid: string;
        };
        ItemAttributeValueDto: {
            abbreviation: string;
            /** Format: int32 */
            id?: number;
            /** Format: int64 */
            itemAttributeId?: number;
            /** Format: int32 */
            ordinal: number;
            value: string;
        };
        ItemData: {
            description?: string | null;
            /** Format: int64 */
            group_id?: number;
            item_code: string;
            maintain_stock: boolean;
            name: string;
            /** Format: int64 */
            uom_id: number;
        };
        ItemDetailDto: {
            code: string;
            /** Format: date-time */
            created_at: string;
            description: string | null;
            /** Format: int64 */
            group_id: number;
            group_name: string;
            group_uuid: string;
            /** Format: int64 */
            id: number;
            item_type: string;
            maintain_stock: boolean;
            name: string;
            uom_code: string;
            /** Format: int64 */
            uom_id: number;
            uom_name: string;
            uuid: string;
        };
        ItemDto: {
            code: string;
            /** Format: date-time */
            created_at: string;
            /** Format: int64 */
            id: number;
            item_type: string;
            name: string;
            /** Format: int64 */
            uom_id: number;
            uuid: string;
        };
        ItemInventoryData: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            has_serial_no?: boolean | null;
            /** Format: int64 */
            item_id?: number;
            serial_no_template?: string | null;
            /** Format: int32 */
            shelf_life_in_days?: number | null;
            /** Format: int32 */
            warranty_period_in_days?: number | null;
            /** Format: int64 */
            weight_uom_id?: number | null;
            /** Format: int32 */
            wight_per_unit?: number | null;
        };
        ItemInventoryDto: {
            has_serial_no: boolean | null;
            serial_no_template: string | null;
            /** Format: int32 */
            shelf_life_in_days: number | null;
            /** Format: int32 */
            warranty_period_in_days: number | null;
            /** Format: int32 */
            weight_per_unit: number | null;
            weight_uom: string | null;
            /** Format: int64 */
            weight_uom_id: number | null;
        };
        ItemLineDto: {
            /** Format: int64 */
            id: number;
            item_code: string;
            item_name: string;
            /** Format: int64 */
            item_price_id: number;
            item_price_uuid: string;
            item_uuid: string;
            line_type: string;
            /** Format: int32 */
            quantity: number;
            /** Format: int32 */
            rate: number;
            uom: string;
        };
        ItemPriceData: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            /** Format: int64 */
            item_id: number;
            /** Format: int32 */
            item_quantity: number;
            /** Format: int64 */
            price_list_id: number;
            /** Format: double */
            rate: number;
            /** Format: int64 */
            uom_id: number;
        };
        ItemPriceDto: {
            code: string;
            /** Format: date-time */
            created_at: string;
            /** Format: int64 */
            id: number;
            item_code: string;
            /** Format: int64 */
            item_id: number;
            item_name: string;
            item_price_uom: string | null;
            /** Format: int64 */
            item_price_uom_id: number | null;
            /** Format: int32 */
            item_quantity: number;
            item_uom: string;
            /** Format: int64 */
            item_uom_id: number;
            item_uuid: string;
            price_list_currency: string;
            /** Format: int64 */
            price_list_id: number;
            price_list_name: string;
            price_list_uuid: string;
            /** Format: int64 */
            rate: number;
            uuid: string;
        };
        ItemPriceLine: {
            /** Format: int32 */
            item_quantity: number;
            /** Format: int64 */
            price_list_id: number;
            /** Format: double */
            rate: number;
            /** Format: int64 */
            uom_id: number;
        };
        ItemVariantDto: {
            attibute_abbreviation: string;
            attibute_value: string;
            code: string;
            /** Format: date-time */
            created_at: string;
            name: string;
            uuid: string;
        };
        JournalEntryDetailDto: {
            journal_entry: components["schemas"]["JournalEntryDto"];
            journal_entry_lines: components["schemas"]["JournalEntryLineDto"][];
        };
        JournalEntryDto: {
            code: string;
            created_at: string;
            entry_type: string;
            /** Format: int64 */
            id: number;
            posting_date: string;
            status: string;
        };
        JournalEntryLineData: {
            /** Format: int64 */
            cost_center_id: number | null;
            /** Format: double */
            credit: number;
            /** Format: double */
            debit: number;
            /** Format: int64 */
            ledger_id: number;
            /** Format: int64 */
            project_id: number | null;
        };
        JournalEntryLineDto: {
            account: string;
            /** Format: int64 */
            account_id: number;
            cost_center: string | null;
            /** Format: int64 */
            cost_center_id: number | null;
            /** Format: int64 */
            credit: number;
            currency: string;
            /** Format: int64 */
            debit: number;
            /** Format: int32 */
            id: number;
            project: string | null;
            /** Format: int64 */
            project_id: number | null;
        };
        KeyValueData: {
            key: string;
            value: string;
        };
        LedgerData: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            fields: components["schemas"]["LedgerFields"];
            /** Format: int64 */
            id?: number;
        };
        LedgerDetailDto: {
            account_root_type: string;
            account_type: string;
            can_credit: boolean;
            can_debit: boolean;
            cash_flow_section: string;
            /** Format: date-time */
            created_at: string;
            currency: string;
            description: string;
            /** Format: int64 */
            id: number;
            is_group: boolean;
            is_offset_account: boolean;
            ledger_no: string | null;
            /** Format: int64 */
            limit: number;
            name: string;
            parent: string | null;
            /** Format: int64 */
            parent_id: number | null;
            parent_uuid: string | null;
            report_type: string;
            status: string;
            uuid: string;
        };
        LedgerDto: {
            account_root_type: string;
            account_type: string;
            can_credit: boolean;
            can_debit: boolean;
            cash_flow_section: string;
            /** Format: date-time */
            created_at: string;
            currency: string;
            description: string;
            /** Format: int64 */
            id: number;
            is_group: boolean;
            is_offset_account: boolean;
            ledger_no: string | null;
            /** Format: int64 */
            limit: number;
            name: string;
            report_type: string;
            status: string;
            uuid: string;
        };
        LedgerFields: {
            account_root_type: string;
            account_type?: string | null;
            cash_flow_section?: string | null;
            is_group: boolean;
            is_offset_account?: boolean;
            ledger_no?: string | null;
            /** Format: int64 */
            ledger_parent?: number | null;
            name: string;
            report_type?: string | null;
        };
        LineItemData: {
            delivery_line_item?: components["schemas"]["DeliveryLineItemData"];
            /** Format: int32 */
            id?: number;
            /** Format: int64 */
            item_id: number;
            /** Format: int32 */
            item_line_reference_id?: number | null;
            line_receipt?: components["schemas"]["LineItemReceiptData"];
            line_stock_entry?: components["schemas"]["LineItemStockEntryData"];
            line_type: string;
            /** Format: int32 */
            quantity: number;
            /** Format: double */
            rate: number;
            /** Format: int64 */
            unit_of_measure_id: number;
        };
        LineItemDto: {
            /** Format: int32 */
            accepted_quantity: number;
            accepted_warehouse: string;
            /** Format: int64 */
            accepted_warehouse_id: number;
            /** Format: int32 */
            id: number;
            item_code: string;
            /** Format: int64 */
            item_id: number;
            /** Format: int32 */
            item_line_reference_id: number | null;
            item_name: string;
            line_type: string;
            /** Format: int32 */
            quantity: number;
            /** Format: int32 */
            rate: number;
            /** Format: int32 */
            rejected_quantity: number;
            rejected_warehouse?: string;
            /** Format: int64 */
            rejected_warehouse_id?: number;
            source_warehouse: string;
            /** Format: int64 */
            source_warehouse_id: number;
            /** Format: int64 */
            unit_of_measure_id: number;
            uom: string;
        };
        LineItemReceiptData: {
            /** Format: int32 */
            accepted_quantity: number;
            /** Format: int64 */
            accepted_warehouse?: number;
            /** Format: int32 */
            rejected_quantity: number;
            /** Format: int64 */
            rejected_warehouse?: number;
        };
        LineItemStockEntryData: {
            /** Format: int64 */
            source_warehouse?: number;
            /** Format: int64 */
            target_warehouse?: number;
        };
        MentionDto: {
            /** Format: int64 */
            end_index: number;
            entity_href: string;
            /** Format: int64 */
            entity_id: number;
            entity_name: string;
            has_modal: boolean;
            party_id: string;
            party_name: string;
            /** Format: int64 */
            reference_id: number;
            /** Format: int64 */
            start_index: number;
        };
        ModuleData: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            fields: components["schemas"]["ModuleFields"];
            /** Format: int64 */
            id?: number;
            sections: components["schemas"]["ModuleSectionData"][];
        };
        ModuleDetailDto: {
            module: components["schemas"]["ModuleDto"];
            sections: components["schemas"]["ModuleSectionDto"][];
        };
        ModuleDto: {
            has_direct_access: boolean;
            href: string;
            icon_code: string | null;
            icon_name: string | null;
            /** Format: int64 */
            id: number;
            label: string;
            /** Format: int32 */
            priority: number;
            status: string;
            uuid: string;
        };
        ModuleFields: {
            has_direct_access: boolean;
            href: string;
            icon_code: string | null;
            icon_name: string | null;
            label: string;
            /** Format: int32 */
            priority: number;
        };
        ModuleSectionData: {
            /** Format: int32 */
            entity_id: number;
            entity_name: string;
            /** Format: int64 */
            module_id: number;
            name: string;
        };
        ModuleSectionDto: {
            href: string;
            /** Format: int64 */
            id: number;
            name: string;
            section_name: string;
        };
        NotificationCountDtoBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            /** Format: int64 */
            count: number;
        };
        NotificationDto: {
            /** Format: int64 */
            id: number;
            mentions: components["schemas"]["MentionDto"][];
            payload: string;
            profile_fn: string;
            profile_gn: string;
            /** Format: int64 */
            profile_id: number;
            /** Format: date-time */
            send_at: string;
            type: string;
        };
        OrderBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            items: components["schemas"]["CreateItemLines"];
            order: components["schemas"]["OrderData"];
            tax_and_charges: components["schemas"]["CreateTaxAndChanges"];
        };
        OrderData: {
            fields: components["schemas"]["OrderFields"];
            /** Format: int64 */
            id?: number;
            order_party_type: string;
            references?: (number | null)[];
            /** Format: double */
            total_amount: number;
        };
        OrderDetailDto: {
            acc_dimensions: components["schemas"]["AccountingDimensionDto"];
            company_addresss: components["schemas"]["AddressDto"];
            order: components["schemas"]["OrderDto"];
            party_address: components["schemas"]["AddressDto"];
            party_contact: components["schemas"]["ContactDto"];
        };
        OrderDto: {
            /** Format: int32 */
            billed_amount: number;
            code: string;
            cost_center: string | null;
            /** Format: int64 */
            cost_center_id: number | null;
            cost_center_uuid: string | null;
            /** Format: date-time */
            created_at: string;
            currency: string;
            /** Format: date-time */
            delivery_date: string | null;
            /** Format: int64 */
            id: number;
            /** Format: int64 */
            party_id: number;
            party_name: string;
            party_type: string;
            party_uuid: string;
            /** Format: date-time */
            posting_date: string;
            posting_time: string;
            price_list: string | null;
            /** Format: int64 */
            price_list_id: number | null;
            price_list_uuid: string | null;
            project: string | null;
            /** Format: int64 */
            project_id: number | null;
            project_uuid: string | null;
            /** Format: int32 */
            received_items: number;
            status: string;
            /** Format: int32 */
            total_amount: number;
            /** Format: int32 */
            total_items: number;
            tz: string;
        };
        OrderFields: {
            /** Format: int64 */
            cost_center_id?: number | null;
            currency: string;
            /** Format: date-time */
            delivery_date?: string | null;
            /** Format: int64 */
            party_id: number;
            /** Format: date-time */
            posting_date: string;
            posting_time: string;
            /** Format: int64 */
            price_list_id?: number | null;
            /** Format: int64 */
            project_id?: number | null;
            tz: string;
        };
        PaginationResponsePaginationResultListBatchBundleDtoBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            pagination_result: components["schemas"]["PaginationResultListBatchBundleDto"];
        };
        PaginationResponsePaginationResultListBookingDtoBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            pagination_result: components["schemas"]["PaginationResultListBookingDto"];
        };
        PaginationResponsePaginationResultListChargesTemplateDtoBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            pagination_result: components["schemas"]["PaginationResultListChargesTemplateDto"];
        };
        PaginationResponsePaginationResultListCompanyDtoBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            pagination_result: components["schemas"]["PaginationResultListCompanyDto"];
        };
        PaginationResponsePaginationResultListCostCenterDtoBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            pagination_result: components["schemas"]["PaginationResultListCostCenterDto"];
        };
        PaginationResponsePaginationResultListCurrencyDtoBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            pagination_result: components["schemas"]["PaginationResultListCurrencyDto"];
        };
        PaginationResponsePaginationResultListCurrencyExchangeDtoBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            pagination_result: components["schemas"]["PaginationResultListCurrencyExchangeDto"];
        };
        PaginationResponsePaginationResultListCustomerDtoBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            pagination_result: components["schemas"]["PaginationResultListCustomerDto"];
        };
        PaginationResponsePaginationResultListEntityDtoBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            pagination_result: components["schemas"]["PaginationResultListEntityDto"];
        };
        PaginationResponsePaginationResultListEventBookingDtoBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            pagination_result: components["schemas"]["PaginationResultListEventBookingDto"];
        };
        PaginationResponsePaginationResultListGroupDtoBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            pagination_result: components["schemas"]["PaginationResultListGroupDto"];
        };
        PaginationResponsePaginationResultListInvoiceDtoBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            pagination_result: components["schemas"]["PaginationResultListInvoiceDto"];
        };
        PaginationResponsePaginationResultListItemAttributeDtoBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            pagination_result: components["schemas"]["PaginationResultListItemAttributeDto"];
        };
        PaginationResponsePaginationResultListItemDtoBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            pagination_result: components["schemas"]["PaginationResultListItemDto"];
        };
        PaginationResponsePaginationResultListItemPriceDtoBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            pagination_result: components["schemas"]["PaginationResultListItemPriceDto"];
        };
        PaginationResponsePaginationResultListItemVariantDtoBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            pagination_result: components["schemas"]["PaginationResultListItemVariantDto"];
        };
        PaginationResponsePaginationResultListJournalEntryDtoBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            pagination_result: components["schemas"]["PaginationResultListJournalEntryDto"];
        };
        PaginationResponsePaginationResultListOrderDtoBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            pagination_result: components["schemas"]["PaginationResultListOrderDto"];
        };
        PaginationResponsePaginationResultListPartyReferenceDtoBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            pagination_result: components["schemas"]["PaginationResultListPartyReferenceDto"];
        };
        PaginationResponsePaginationResultListPaymentDtoBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            pagination_result: components["schemas"]["PaginationResultListPaymentDto"];
        };
        PaginationResponsePaginationResultListPianoFormBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            pagination_result: components["schemas"]["PaginationResultListPianoForm"];
        };
        PaginationResponsePaginationResultListPriceListDtoBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            pagination_result: components["schemas"]["PaginationResultListPriceListDto"];
        };
        PaginationResponsePaginationResultListPricingDtoBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            pagination_result: components["schemas"]["PaginationResultListPricingDto"];
        };
        PaginationResponsePaginationResultListProjectDtoBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            pagination_result: components["schemas"]["PaginationResultListProjectDto"];
        };
        PaginationResponsePaginationResultListPurchaseRecordDtoBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            pagination_result: components["schemas"]["PaginationResultListPurchaseRecordDto"];
        };
        PaginationResponsePaginationResultListQuotationDtoBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            pagination_result: components["schemas"]["PaginationResultListQuotationDto"];
        };
        PaginationResponsePaginationResultListReceiptDtoBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            pagination_result: components["schemas"]["PaginationResultListReceiptDto"];
        };
        PaginationResponsePaginationResultListRoleActionDtoBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            pagination_result: components["schemas"]["PaginationResultListRoleActionDto"];
        };
        PaginationResponsePaginationResultListRoleDtoBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            pagination_result: components["schemas"]["PaginationResultListRoleDto"];
        };
        PaginationResponsePaginationResultListRoleTemplateDtoBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            pagination_result: components["schemas"]["PaginationResultListRoleTemplateDto"];
        };
        PaginationResponsePaginationResultListSalesRecordDtoBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            pagination_result: components["schemas"]["PaginationResultListSalesRecordDto"];
        };
        PaginationResponsePaginationResultListSerialNoDtoBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            pagination_result: components["schemas"]["PaginationResultListSerialNoDto"];
        };
        PaginationResponsePaginationResultListStockEntryDtoBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            pagination_result: components["schemas"]["PaginationResultListStockEntryDto"];
        };
        PaginationResponsePaginationResultListStockLevelDtoBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            pagination_result: components["schemas"]["PaginationResultListStockLevelDto"];
        };
        PaginationResponsePaginationResultListSupplierDtoBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            pagination_result: components["schemas"]["PaginationResultListSupplierDto"];
        };
        PaginationResponsePaginationResultListTaxDtoBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            pagination_result: components["schemas"]["PaginationResultListTaxDto"];
        };
        PaginationResponsePaginationResultListWareHouseDtoBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            pagination_result: components["schemas"]["PaginationResultListWareHouseDto"];
        };
        PaginationResultListBatchBundleDto: {
            filters: components["schemas"]["FilterOptionDto"][];
            results: components["schemas"]["BatchBundleDto"][];
            /** Format: int64 */
            total: number;
        };
        PaginationResultListBookingDto: {
            filters: components["schemas"]["FilterOptionDto"][];
            results: components["schemas"]["BookingDto"][];
            /** Format: int64 */
            total: number;
        };
        PaginationResultListChargesTemplateDto: {
            filters: components["schemas"]["FilterOptionDto"][];
            results: components["schemas"]["ChargesTemplateDto"][];
            /** Format: int64 */
            total: number;
        };
        PaginationResultListCompanyDto: {
            filters: components["schemas"]["FilterOptionDto"][];
            results: components["schemas"]["CompanyDto"][];
            /** Format: int64 */
            total: number;
        };
        PaginationResultListCostCenterDto: {
            filters: components["schemas"]["FilterOptionDto"][];
            results: components["schemas"]["CostCenterDto"][];
            /** Format: int64 */
            total: number;
        };
        PaginationResultListCurrencyDto: {
            filters: components["schemas"]["FilterOptionDto"][];
            results: components["schemas"]["CurrencyDto"][];
            /** Format: int64 */
            total: number;
        };
        PaginationResultListCurrencyExchangeDto: {
            filters: components["schemas"]["FilterOptionDto"][];
            results: components["schemas"]["CurrencyExchangeDto"][];
            /** Format: int64 */
            total: number;
        };
        PaginationResultListCustomerDto: {
            filters: components["schemas"]["FilterOptionDto"][];
            results: components["schemas"]["CustomerDto"][];
            /** Format: int64 */
            total: number;
        };
        PaginationResultListEntityDto: {
            filters: components["schemas"]["FilterOptionDto"][];
            results: components["schemas"]["EntityDto"][];
            /** Format: int64 */
            total: number;
        };
        PaginationResultListEventBookingDto: {
            filters: components["schemas"]["FilterOptionDto"][];
            results: components["schemas"]["EventBookingDto"][];
            /** Format: int64 */
            total: number;
        };
        PaginationResultListGroupDto: {
            filters: components["schemas"]["FilterOptionDto"][];
            results: components["schemas"]["GroupDto"][];
            /** Format: int64 */
            total: number;
        };
        PaginationResultListInvoiceDto: {
            filters: components["schemas"]["FilterOptionDto"][];
            results: components["schemas"]["InvoiceDto"][];
            /** Format: int64 */
            total: number;
        };
        PaginationResultListItemAttributeDto: {
            filters: components["schemas"]["FilterOptionDto"][];
            results: components["schemas"]["ItemAttributeDto"][];
            /** Format: int64 */
            total: number;
        };
        PaginationResultListItemDto: {
            filters: components["schemas"]["FilterOptionDto"][];
            results: components["schemas"]["ItemDto"][];
            /** Format: int64 */
            total: number;
        };
        PaginationResultListItemPriceDto: {
            filters: components["schemas"]["FilterOptionDto"][];
            results: components["schemas"]["ItemPriceDto"][];
            /** Format: int64 */
            total: number;
        };
        PaginationResultListItemVariantDto: {
            filters: components["schemas"]["FilterOptionDto"][];
            results: components["schemas"]["ItemVariantDto"][];
            /** Format: int64 */
            total: number;
        };
        PaginationResultListJournalEntryDto: {
            filters: components["schemas"]["FilterOptionDto"][];
            results: components["schemas"]["JournalEntryDto"][];
            /** Format: int64 */
            total: number;
        };
        PaginationResultListOrderDto: {
            filters: components["schemas"]["FilterOptionDto"][];
            results: components["schemas"]["OrderDto"][];
            /** Format: int64 */
            total: number;
        };
        PaginationResultListPartyReferenceDto: {
            filters: components["schemas"]["FilterOptionDto"][];
            results: components["schemas"]["PartyReferenceDto"][];
            /** Format: int64 */
            total: number;
        };
        PaginationResultListPaymentDto: {
            filters: components["schemas"]["FilterOptionDto"][];
            results: components["schemas"]["PaymentDto"][];
            /** Format: int64 */
            total: number;
        };
        PaginationResultListPianoForm: {
            filters: components["schemas"]["FilterOptionDto"][];
            results: components["schemas"]["PianoForm"][];
            /** Format: int64 */
            total: number;
        };
        PaginationResultListPriceListDto: {
            filters: components["schemas"]["FilterOptionDto"][];
            results: components["schemas"]["PriceListDto"][];
            /** Format: int64 */
            total: number;
        };
        PaginationResultListPricingDto: {
            filters: components["schemas"]["FilterOptionDto"][];
            results: components["schemas"]["PricingDto"][];
            /** Format: int64 */
            total: number;
        };
        PaginationResultListProjectDto: {
            filters: components["schemas"]["FilterOptionDto"][];
            results: components["schemas"]["ProjectDto"][];
            /** Format: int64 */
            total: number;
        };
        PaginationResultListPurchaseRecordDto: {
            filters: components["schemas"]["FilterOptionDto"][];
            results: components["schemas"]["PurchaseRecordDto"][];
            /** Format: int64 */
            total: number;
        };
        PaginationResultListQuotationDto: {
            filters: components["schemas"]["FilterOptionDto"][];
            results: components["schemas"]["QuotationDto"][];
            /** Format: int64 */
            total: number;
        };
        PaginationResultListReceiptDto: {
            filters: components["schemas"]["FilterOptionDto"][];
            results: components["schemas"]["ReceiptDto"][];
            /** Format: int64 */
            total: number;
        };
        PaginationResultListRoleActionDto: {
            filters: components["schemas"]["FilterOptionDto"][];
            results: components["schemas"]["RoleActionDto"][];
            /** Format: int64 */
            total: number;
        };
        PaginationResultListRoleDto: {
            filters: components["schemas"]["FilterOptionDto"][];
            results: components["schemas"]["RoleDto"][];
            /** Format: int64 */
            total: number;
        };
        PaginationResultListRoleTemplateDto: {
            filters: components["schemas"]["FilterOptionDto"][];
            results: components["schemas"]["RoleTemplateDto"][];
            /** Format: int64 */
            total: number;
        };
        PaginationResultListSalesRecordDto: {
            filters: components["schemas"]["FilterOptionDto"][];
            results: components["schemas"]["SalesRecordDto"][];
            /** Format: int64 */
            total: number;
        };
        PaginationResultListSerialNoDto: {
            filters: components["schemas"]["FilterOptionDto"][];
            results: components["schemas"]["SerialNoDto"][];
            /** Format: int64 */
            total: number;
        };
        PaginationResultListStockEntryDto: {
            filters: components["schemas"]["FilterOptionDto"][];
            results: components["schemas"]["StockEntryDto"][];
            /** Format: int64 */
            total: number;
        };
        PaginationResultListStockLevelDto: {
            filters: components["schemas"]["FilterOptionDto"][];
            results: components["schemas"]["StockLevelDto"][];
            /** Format: int64 */
            total: number;
        };
        PaginationResultListSupplierDto: {
            filters: components["schemas"]["FilterOptionDto"][];
            results: components["schemas"]["SupplierDto"][];
            /** Format: int64 */
            total: number;
        };
        PaginationResultListTaxDto: {
            filters: components["schemas"]["FilterOptionDto"][];
            results: components["schemas"]["TaxDto"][];
            /** Format: int64 */
            total: number;
        };
        PaginationResultListWareHouseDto: {
            filters: components["schemas"]["FilterOptionDto"][];
            results: components["schemas"]["WareHouseDto"][];
            /** Format: int64 */
            total: number;
        };
        ParticipantData: {
            action?: string;
            /** Format: int64 */
            id: number;
        };
        PartyConnections: {
            /** Format: int32 */
            connections: number;
            entity: string;
            href: string;
            /** Format: int64 */
            party_id: number;
            party_type: string;
        };
        PartyDto: {
            /** Format: int64 */
            id: number;
            name: string;
            uuid: string;
        };
        PartyReferenceDto: {
            code: string;
            name: string;
            reference: string;
            uuid: string;
        };
        PartyTypeDto: {
            code: string;
            name: string;
        };
        PaymentAccountsDto: {
            cash_acct: string;
            cash_acct_currency: string;
            /** Format: int64 */
            cash_acct_id: number;
            payable_acct: string;
            payable_acct_currency: string;
            /** Format: int64 */
            payable_acct_id: number;
            receivable_acct: string;
            receivable_acct_currency: string;
            /** Format: int64 */
            receivable_acct_id: number;
        };
        PaymentBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            payment: components["schemas"]["PaymentData"];
            payment_references: components["schemas"]["CreatePaymentReference"][];
            tax_and_charges: components["schemas"]["CreateTaxAndChanges"];
        };
        PaymentData: {
            fields: components["schemas"]["PaymentFields"];
            /** Format: int64 */
            id?: number;
        };
        PaymentDetailDto: {
            /** Format: int64 */
            amount: number;
            /** Format: date-time */
            cheque_reference_date: string | null;
            cheque_reference_no: string | null;
            code: string;
            company_bank_account: string | null;
            /** Format: int64 */
            company_bank_account_id: number | null;
            company_bank_account_uuid: string | null;
            cost_center: string | null;
            /** Format: int64 */
            cost_center_id: number | null;
            cost_center_uuid: string | null;
            /** Format: date-time */
            created_at: string;
            /** Format: int64 */
            id: number;
            paid_from_currency: string;
            /** Format: int64 */
            paid_from_id: number;
            paid_from_name: string;
            paid_from_uuid: string;
            paid_to_currency: string;
            /** Format: int64 */
            paid_to_id: number;
            paid_to_name: string;
            paid_to_uuid: string;
            party_bank_account: string | null;
            /** Format: int64 */
            party_bank_account_id: number | null;
            party_bank_account_uuid: string | null;
            /** Format: int64 */
            party_id: number;
            party_name: string;
            party_type: string;
            party_uuid: string;
            payment_references: components["schemas"]["PaymentReferenceDto"][];
            payment_type: string;
            /** Format: date-time */
            posting_date: string;
            project: string | null;
            /** Format: int64 */
            project_id: number | null;
            project_uuid: string | null;
            status: string;
        };
        PaymentDto: {
            /** Format: int64 */
            amount: number;
            /** Format: date-time */
            cheque_reference_date: string | null;
            cheque_reference_no: string | null;
            code: string;
            company_bank_account: string | null;
            /** Format: int64 */
            company_bank_account_id: number | null;
            company_bank_account_uuid: string | null;
            cost_center: string | null;
            /** Format: int64 */
            cost_center_id: number | null;
            cost_center_uuid: string | null;
            /** Format: date-time */
            created_at: string;
            /** Format: int64 */
            id: number;
            party_bank_account: string | null;
            /** Format: int64 */
            party_bank_account_id: number | null;
            party_bank_account_uuid: string | null;
            /** Format: int64 */
            party_id: number;
            party_name: string;
            party_type: string;
            party_uuid: string;
            payment_type: string;
            /** Format: date-time */
            posting_date: string;
            project: string | null;
            /** Format: int64 */
            project_id: number | null;
            project_uuid: string | null;
            status: string;
        };
        PaymentFields: {
            /** Format: int64 */
            account_paid_from_id: number;
            /** Format: int64 */
            account_paid_to_id: number;
            /** Format: int64 */
            amount: number;
            /** Format: date-time */
            cheque_reference_date?: string | null;
            cheque_reference_no?: string | null;
            /** Format: int64 */
            company_bank_account_id?: number | null;
            /** Format: int64 */
            cost_center_id?: number | null;
            /** Format: int64 */
            party_bank_account_id?: number | null;
            /** Format: int64 */
            party_id: number;
            payment_type: string;
            /** Format: date-time */
            posting_date: string;
            /** Format: int64 */
            project_id?: number | null;
        };
        PaymentReferenceDto: {
            /** Format: int64 */
            allocated: number;
            currency: string;
            /** Format: int64 */
            outstanding: number;
            party_code: string;
            /** Format: int64 */
            party_id: number;
            party_type: string;
            /** Format: int64 */
            total: number;
        };
        PaymentTermsData: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            filds: components["schemas"]["PaymentTermsFields"];
            /** Format: int64 */
            id?: number;
        };
        PaymentTermsDto: {
            /** Format: int32 */
            credit_days: number | null;
            description: string | null;
            /** Format: int64 */
            discount: number | null;
            discount_type: string | null;
            /** Format: int32 */
            discount_validity: number | null;
            discount_validity_base_on: string | null;
            due_date_base_on: string;
            /** Format: int64 */
            id: number;
            /** Format: int32 */
            invoice_portion: number;
            name: string;
            status: string;
            uuid: string;
        };
        PaymentTermsFields: {
            /** Format: int32 */
            credit_days: number | null;
            description: string | null;
            /** Format: int64 */
            discount: number | null;
            discount_type: string | null;
            /** Format: int32 */
            discount_validity: number | null;
            discount_validity_base_on: string | null;
            due_date_base_on: string;
            /** Format: int32 */
            invoice_portion: number;
            name: string;
        };
        PaymentTermsLineData: {
            /** Format: int32 */
            credit_days: number | null;
            description: string | null;
            due_date_base_on: string;
            /** Format: int32 */
            invoice_portion: number;
            /** Format: int64 */
            payment_terms_id: number;
        };
        PaymentTermsLineDto: {
            /** Format: int32 */
            credit_days: number | null;
            description: string | null;
            /** Format: int64 */
            document_id: number;
            due_date_base_on: string;
            /** Format: int32 */
            id: number;
            /** Format: int32 */
            invoice_portion: number;
            payment_term: string;
            /** Format: int64 */
            payment_term_id: number;
        };
        PaymentTermsTemplateData: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            filds: components["schemas"]["PaymentTermsTemplateFields"];
            /** Format: int64 */
            id?: number;
            lines: components["schemas"]["PaymentTermsLineData"][];
        };
        PaymentTermsTemplateDto: {
            /** Format: int64 */
            id: number;
            name: string;
            status: string;
            uuid: string;
        };
        PaymentTermsTemplateFields: {
            name: string;
        };
        PhoneNumber: {
            countryCode: string;
            number: string;
        };
        PianoExportRequestBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            /** Format: date-time */
            from_date: string;
            /** Format: date-time */
            to_date: string;
        };
        PianoForm: {
            /** Format: int64 */
            company_id: number;
            /** Format: date-time */
            created_at: string;
            deleted_at: components["schemas"]["DeletedAt"];
            dropoff_city: string;
            dropoff_flights: string;
            dropoff_state: string;
            dropoff_street: string;
            dropoff_zip: string;
            email: string;
            first_name: string;
            /** Format: int64 */
            id: number;
            last_name: string;
            /** Format: date-time */
            moving_date: string;
            phone_number: string;
            piano_type: string;
            pickup_city: string;
            pickup_flights: string;
            pickup_state: string;
            pickup_street: string;
            pickup_zip: string;
            rent_piano: boolean;
            stairs_dropoff: boolean;
            stairs_pickup: boolean;
            /** Format: date-time */
            updated_at: string | null;
        };
        PluginApp: {
            Name: string;
        };
        PluginDetailResponseBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            company_plugin: components["schemas"]["CompanyPlugins"];
        };
        PluginsResponseBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            plugins: components["schemas"]["PluginApp"][];
        };
        PriceListData: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            currency: string;
            isBuying: boolean;
            isSelling: boolean;
            name: string;
        };
        PriceListDto: {
            /** Format: date-time */
            created_at: string;
            currency: string;
            /** Format: int64 */
            id: number;
            is_buying: boolean;
            is_selling: boolean;
            name: string;
            uuid: string;
        };
        PricingChargeData: {
            name: string;
            /** Format: double */
            rate: number;
        };
        PricingChargeDto: {
            name: string;
            /** Format: int32 */
            rate: number;
        };
        PricingData: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            fields: components["schemas"]["PricingFields"];
            /** Format: int64 */
            id?: number;
            pricing_charges: components["schemas"]["PricingChargeData"][];
            pricing_line_items: components["schemas"]["PricingLineItemData"][];
        };
        PricingDataRequestBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            pricing: components["schemas"]["PricingDto"];
            pricing_line_items: components["schemas"]["PricingLineItemData"][];
        };
        PricingDetailDto: {
            pricing: components["schemas"]["PricingDto"];
            pricing_charges: components["schemas"]["PricingChargeDto"][];
            pricing_line_items: components["schemas"]["PricingLineItemDto"][];
        };
        PricingDto: {
            code: string;
            cost_center: string | null;
            /** Format: int64 */
            cost_center_id: number | null;
            cost_center_uuid: string | null;
            customer: string | null;
            /** Format: int64 */
            customer_id: number | null;
            customer_uuid: string | null;
            /** Format: int64 */
            id: number;
            project: string | null;
            /** Format: int64 */
            project_id: number | null;
            project_uuid: string | null;
            status: string;
        };
        PricingFields: {
            /** Format: int64 */
            cost_center_id?: number | null;
            /** Format: int64 */
            customer_id?: number | null;
            /** Format: int64 */
            project_id?: number | null;
        };
        PricingLineItemData: {
            /** Format: int32 */
            cantidad?: number | null;
            cantidad_fn?: string | null;
            color?: string | null;
            /** Format: double */
            cost_alm?: number | null;
            cost_alm_fn?: string | null;
            /** Format: double */
            cost_zf?: number | null;
            cost_zf_fn?: string | null;
            description?: string | null;
            /** Format: double */
            fob_total?: number | null;
            fob_total_fn?: string | null;
            /** Format: double */
            fob_unit?: number | null;
            fob_unit_fn?: string | null;
            /** Format: double */
            gpl_total?: number | null;
            gpl_total_fn?: string | null;
            is_title?: boolean | null;
            part_number?: string | null;
            /** Format: double */
            pl_unit?: number | null;
            /** Format: double */
            precio_total?: number | null;
            precio_total_fn?: string | null;
            /** Format: double */
            precio_total_tc?: number | null;
            precio_total_tc_fn?: string | null;
            /** Format: double */
            precio_unitario?: number | null;
            precio_unitario_fn?: string | null;
            /** Format: double */
            precio_unitario_tc?: number | null;
            precio_unitario_tc_fn?: string | null;
            /** Format: int32 */
            quantity?: number | null;
            /** Format: double */
            retention?: number | null;
            retention_fn?: string | null;
            /** Format: int64 */
            supplier_id?: number | null;
            /** Format: double */
            tva?: number | null;
            tva_fn?: string | null;
            /** Format: double */
            tva_total?: number | null;
            tva_total_fn?: string | null;
        };
        PricingLineItemDto: {
            cantidad_fn: string;
            color: string;
            cost_alm_fn: string;
            cost_zf_fn: string;
            description: string;
            fob_total_fn: string;
            fob_unit_fn: string;
            gpl_total_fn: string;
            is_title: boolean;
            part_number: string;
            /** Format: int32 */
            pl_unit: number;
            precio_total_fn: string;
            precio_total_tc_fn: string;
            precio_unitario_fn: string;
            precio_unitario_tc_fn: string;
            /** Format: int32 */
            quantity: number;
            retention_fn: string;
            supplier: string;
            /** Format: int64 */
            supplier_id: number;
            tva_fn: string;
            tva_total_fn: string;
        };
        ProfileDto: {
            email: string;
            family_name: string;
            full_name: string;
            given_name: string;
            /** Format: int64 */
            id: number;
            phone_number: string | null;
            uuid: string;
        };
        ProfitAndLossEntryDto: {
            account_name: string;
            account_type: string;
            /** Format: int64 */
            balance: number;
            posting_date: string;
        };
        ProjectDto: {
            /** Format: int64 */
            id: number;
            name: string;
            status: string;
        };
        PurchaseRecordData: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            fields: components["schemas"]["PurchaseRecordFields"];
            /** Format: int64 */
            id: number;
        };
        PurchaseRecordDto: {
            authorization_code: string;
            /** Format: int64 */
            cf_base_amount: number;
            consolidation_status: string;
            control_code: string;
            /** Format: date-time */
            created_at: string;
            /** Format: int64 */
            discounts_bonus_rebates_subject_to_vat: number;
            dui_dim_no: string;
            /** Format: int64 */
            exempt_amounts: number;
            /** Format: int64 */
            gift_card_amount: number;
            /** Format: int64 */
            ice_amount: number;
            /** Format: int64 */
            id: number;
            /** Format: int64 */
            iehd_amount: number;
            invoice_code: string | null;
            /** Format: date-time */
            invoice_dui_dim_date: string;
            /** Format: int64 */
            invoice_id: number | null;
            invoice_no: string;
            /** Format: int64 */
            ipj_amount: number;
            /** Format: int64 */
            other_not_subject_to_tax_credit: number;
            purchase_type: string;
            status: string;
            /** Format: int64 */
            subtotal: number;
            supplier: string;
            supplier_business_name: string;
            /** Format: int64 */
            supplier_id: number;
            supplier_nit: string;
            supplier_uuid: string;
            /** Format: int64 */
            tax_credit: number;
            /** Format: int32 */
            tax_rates: number;
            /** Format: int64 */
            total_purchase_amount: number;
            uuid: string;
            with_tax_credit_right: boolean;
            /** Format: int64 */
            zero_rate_taxable_purchases_amount: number;
        };
        PurchaseRecordFields: {
            authorization_code: string;
            /** Format: int64 */
            cf_base_amount: number;
            consolidation_status: string;
            control_code: string;
            /** Format: int64 */
            discounts_bonus_rebates_subject_to_vat: number;
            dui_dim_no: string;
            /** Format: int64 */
            exempt_amounts: number;
            /** Format: int64 */
            gift_card_amount: number;
            /** Format: int64 */
            ice_amount: number;
            /** Format: int64 */
            iehd_amount: number;
            /** Format: date-time */
            invoice_dui_dim_date: string;
            /** Format: int64 */
            invoice_id?: number | null;
            invoice_no: string;
            /** Format: int64 */
            ipj_amount: number;
            /** Format: int64 */
            other_not_subject_to_tax_credit: number;
            purchase_type: string;
            /** Format: int64 */
            subtotal: number;
            supplier_business_name: string;
            /** Format: int64 */
            supplier_id: number;
            supplier_nit: string;
            /** Format: int64 */
            tax_credit: number;
            /** Format: int32 */
            tax_rates: number;
            /** Format: int64 */
            total_purchase_amount: number;
            with_tax_credit_right: boolean;
            /** Format: int64 */
            zero_rate_taxable_purchases_amount: number;
        };
        QuotationBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            items: components["schemas"]["CreateItemLines"];
            quotation: components["schemas"]["QuotationData"];
            tax_and_charges: components["schemas"]["CreateTaxAndChanges"];
        };
        QuotationData: {
            fields: components["schemas"]["QuotationFields"];
            /** Format: int64 */
            id?: number;
            quotation_party_type: string;
            references?: (number | null)[];
        };
        QuotationDetailDto: {
            acc_dimensions: components["schemas"]["AccountingDimensionDto"];
            quotation: components["schemas"]["QuotationDto"];
        };
        QuotationDto: {
            code: string;
            cost_center: string | null;
            /** Format: int64 */
            cost_center_id: number | null;
            cost_center_uuid: string | null;
            currency: string;
            /** Format: int64 */
            id: number;
            /** Format: int64 */
            party_id: number;
            party_name: string;
            party_type: string;
            party_uuid: string;
            /** Format: date-time */
            posting_date: string;
            posting_time: string;
            price_list: string | null;
            /** Format: int64 */
            price_list_id: number | null;
            price_list_uuid: string | null;
            project: string | null;
            /** Format: int64 */
            project_id: number | null;
            project_uuid: string | null;
            status: string;
            tz: string;
            /** Format: date-time */
            valid_till: string;
        };
        QuotationFields: {
            /** Format: int64 */
            cost_center_id?: number | null;
            currency: string;
            /** Format: int64 */
            party_id: number;
            /** Format: date-time */
            posting_date: string;
            posting_time: string;
            /** Format: int64 */
            price_list_id?: number | null;
            /** Format: int64 */
            project_id?: number | null;
            tz: string;
            /** Format: date-time */
            valid_till: string;
        };
        ReceiptBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            items: components["schemas"]["CreateItemLines"];
            receipt: components["schemas"]["ReceiptData"];
            tax_and_charges: components["schemas"]["CreateTaxAndChanges"];
        };
        ReceiptData: {
            fields: components["schemas"]["ReceiptFields"];
            /** Format: int64 */
            id: number;
            receipt_party_type: string;
        };
        ReceiptDetailDto: {
            item_lines: components["schemas"]["ItemLineDto"][];
            receipt: components["schemas"]["ReceiptDto"];
        };
        ReceiptDto: {
            code: string;
            cost_center: string | null;
            /** Format: int64 */
            cost_center_id: number | null;
            cost_center_uuid: string | null;
            /** Format: date-time */
            created_at: string;
            currency: string;
            /** Format: int64 */
            doc_reference_id: number | null;
            /** Format: int64 */
            id: number;
            /** Format: int64 */
            party_id: number;
            party_name: string;
            party_type: string;
            party_uuid: string;
            /** Format: date-time */
            posting_date: string;
            posting_time: string;
            price_list: string | null;
            /** Format: int64 */
            price_list_id: number | null;
            price_list_uuid: string | null;
            project: string | null;
            /** Format: int64 */
            project_id: number | null;
            project_uuid: string | null;
            status: string;
            tz: string;
            warehouse: string;
            /** Format: int64 */
            warehouse_id: number;
            warehouse_uuid: string;
        };
        ReceiptFields: {
            /** Format: int64 */
            cost_center_id?: number | null;
            currency: string;
            /** Format: int64 */
            doc_reference_id: number | null;
            /** Format: int64 */
            party_id: number;
            /** Format: date-time */
            posting_date: string;
            posting_time: string;
            /** Format: int64 */
            price_list_id?: number | null;
            /** Format: int64 */
            project_id?: number | null;
            tz: string;
            /** Format: int64 */
            warehouse_id: number;
        };
        RequestAddPartyReferenceBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            /** Format: int64 */
            party_id: number;
            /** Format: int64 */
            reference_id: number;
        };
        ResetPasswordRequestBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            email: string;
        };
        ResponseDataActivityDtoBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            associated_actions: {
                [key: string]: components["schemas"]["ActionDto"][] | undefined;
            };
            message: string;
            result: components["schemas"]["ActivityDto"];
        };
        ResponseDataAddressAndContactDtoBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            associated_actions: {
                [key: string]: components["schemas"]["ActionDto"][] | undefined;
            };
            message: string;
            result: components["schemas"]["AddressAndContactDto"];
        };
        ResponseDataBankAccountDtoBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            associated_actions: {
                [key: string]: components["schemas"]["ActionDto"][] | undefined;
            };
            message: string;
            result: components["schemas"]["BankAccountDto"];
        };
        ResponseDataBankDtoBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            associated_actions: {
                [key: string]: components["schemas"]["ActionDto"][] | undefined;
            };
            message: string;
            result: components["schemas"]["BankDto"];
        };
        ResponseDataCashOutflowDtoBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            associated_actions: {
                [key: string]: components["schemas"]["ActionDto"][] | undefined;
            };
            message: string;
            result: components["schemas"]["CashOutflowDto"];
        };
        ResponseDataChargesTemplateDtoBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            associated_actions: {
                [key: string]: components["schemas"]["ActionDto"][] | undefined;
            };
            message: string;
            result: components["schemas"]["ChargesTemplateDto"];
        };
        ResponseDataChartDashboardDataBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            associated_actions: {
                [key: string]: components["schemas"]["ActionDto"][] | undefined;
            };
            message: string;
            result: components["schemas"]["ChartDashboardData"];
        };
        ResponseDataChatDetailDtoBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            associated_actions: {
                [key: string]: components["schemas"]["ActionDto"][] | undefined;
            };
            message: string;
            result: components["schemas"]["ChatDetailDto"];
        };
        ResponseDataChatMessageDtoBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            associated_actions: {
                [key: string]: components["schemas"]["ActionDto"][] | undefined;
            };
            message: string;
            result: components["schemas"]["ChatMessageDto"];
        };
        ResponseDataContactDtoBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            associated_actions: {
                [key: string]: components["schemas"]["ActionDto"][] | undefined;
            };
            message: string;
            result: components["schemas"]["ContactDto"];
        };
        ResponseDataCostCenterDtoBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            associated_actions: {
                [key: string]: components["schemas"]["ActionDto"][] | undefined;
            };
            message: string;
            result: components["schemas"]["CostCenterDto"];
        };
        ResponseDataCourtDtoBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            associated_actions: {
                [key: string]: components["schemas"]["ActionDto"][] | undefined;
            };
            message: string;
            result: components["schemas"]["CourtDto"];
        };
        ResponseDataCurrencyExchangeDtoBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            associated_actions: {
                [key: string]: components["schemas"]["ActionDto"][] | undefined;
            };
            message: string;
            result: components["schemas"]["CurrencyExchangeDto"];
        };
        ResponseDataCustomerDtoBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            associated_actions: {
                [key: string]: components["schemas"]["ActionDto"][] | undefined;
            };
            message: string;
            result: components["schemas"]["CustomerDto"];
        };
        ResponseDataDealDtoBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            associated_actions: {
                [key: string]: components["schemas"]["ActionDto"][] | undefined;
            };
            message: string;
            result: components["schemas"]["DealDto"];
        };
        ResponseDataDocAccountingDtoBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            associated_actions: {
                [key: string]: components["schemas"]["ActionDto"][] | undefined;
            };
            message: string;
            result: components["schemas"]["DocAccountingDto"];
        };
        ResponseDataDocTermsDtoBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            associated_actions: {
                [key: string]: components["schemas"]["ActionDto"][] | undefined;
            };
            message: string;
            result: components["schemas"]["DocTermsDto"];
        };
        ResponseDataEventBookingDtoBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            associated_actions: {
                [key: string]: components["schemas"]["ActionDto"][] | undefined;
            };
            message: string;
            result: components["schemas"]["EventBookingDto"];
        };
        "ResponseDataInterface {}Body": {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            associated_actions: {
                [key: string]: components["schemas"]["ActionDto"][] | undefined;
            };
            message: string;
            result: unknown;
        };
        ResponseDataInvoiceDtoBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            associated_actions: {
                [key: string]: components["schemas"]["ActionDto"][] | undefined;
            };
            message: string;
            result: components["schemas"]["InvoiceDto"];
        };
        ResponseDataItemInventoryDtoBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            associated_actions: {
                [key: string]: components["schemas"]["ActionDto"][] | undefined;
            };
            message: string;
            result: components["schemas"]["ItemInventoryDto"];
        };
        ResponseDataItemPriceDtoBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            associated_actions: {
                [key: string]: components["schemas"]["ActionDto"][] | undefined;
            };
            message: string;
            result: components["schemas"]["ItemPriceDto"];
        };
        ResponseDataJournalEntryDtoBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            associated_actions: {
                [key: string]: components["schemas"]["ActionDto"][] | undefined;
            };
            message: string;
            result: components["schemas"]["JournalEntryDto"];
        };
        ResponseDataLedgerDtoBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            associated_actions: {
                [key: string]: components["schemas"]["ActionDto"][] | undefined;
            };
            message: string;
            result: components["schemas"]["LedgerDto"];
        };
        ResponseDataListChartDataDtoBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            associated_actions: {
                [key: string]: components["schemas"]["ActionDto"][] | undefined;
            };
            message: string;
            result: components["schemas"]["ChartDataDto"][];
        };
        ResponseDataListChatDtoBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            associated_actions: {
                [key: string]: components["schemas"]["ActionDto"][] | undefined;
            };
            message: string;
            result: components["schemas"]["ChatDto"][];
        };
        ResponseDataListChatMessageDtoBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            associated_actions: {
                [key: string]: components["schemas"]["ActionDto"][] | undefined;
            };
            message: string;
            result: components["schemas"]["ChatMessageDto"][];
        };
        ResponseDataListCourtRateDtoBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            associated_actions: {
                [key: string]: components["schemas"]["ActionDto"][] | undefined;
            };
            message: string;
            result: components["schemas"]["CourtRateDto"][];
        };
        ResponseDataListEntityDtoBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            associated_actions: {
                [key: string]: components["schemas"]["ActionDto"][] | undefined;
            };
            message: string;
            result: components["schemas"]["EntityDto"][];
        };
        ResponseDataListLineItemDtoBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            associated_actions: {
                [key: string]: components["schemas"]["ActionDto"][] | undefined;
            };
            message: string;
            result: components["schemas"]["LineItemDto"][];
        };
        ResponseDataListListAddressDtoBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            associated_actions: {
                [key: string]: components["schemas"]["ActionDto"][] | undefined;
            };
            filters: components["schemas"]["FilterOptionDto"][];
            message: string;
            result: components["schemas"]["AddressDto"][];
        };
        ResponseDataListListBankAccountDtoBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            associated_actions: {
                [key: string]: components["schemas"]["ActionDto"][] | undefined;
            };
            filters: components["schemas"]["FilterOptionDto"][];
            message: string;
            result: components["schemas"]["BankAccountDto"][];
        };
        ResponseDataListListBankDtoBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            associated_actions: {
                [key: string]: components["schemas"]["ActionDto"][] | undefined;
            };
            filters: components["schemas"]["FilterOptionDto"][];
            message: string;
            result: components["schemas"]["BankDto"][];
        };
        ResponseDataListListCashOutflowDtoBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            associated_actions: {
                [key: string]: components["schemas"]["ActionDto"][] | undefined;
            };
            filters: components["schemas"]["FilterOptionDto"][];
            message: string;
            result: components["schemas"]["CashOutflowDto"][];
        };
        ResponseDataListListContactDtoBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            associated_actions: {
                [key: string]: components["schemas"]["ActionDto"][] | undefined;
            };
            filters: components["schemas"]["FilterOptionDto"][];
            message: string;
            result: components["schemas"]["ContactDto"][];
        };
        ResponseDataListListCourtDtoBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            associated_actions: {
                [key: string]: components["schemas"]["ActionDto"][] | undefined;
            };
            filters: components["schemas"]["FilterOptionDto"][];
            message: string;
            result: components["schemas"]["CourtDto"][];
        };
        ResponseDataListListDealDtoBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            associated_actions: {
                [key: string]: components["schemas"]["ActionDto"][] | undefined;
            };
            filters: components["schemas"]["FilterOptionDto"][];
            message: string;
            result: components["schemas"]["DealDto"][];
        };
        ResponseDataListListLedgerDtoBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            associated_actions: {
                [key: string]: components["schemas"]["ActionDto"][] | undefined;
            };
            filters: components["schemas"]["FilterOptionDto"][];
            message: string;
            result: components["schemas"]["LedgerDto"][];
        };
        ResponseDataListListNotificationDtoBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            associated_actions: {
                [key: string]: components["schemas"]["ActionDto"][] | undefined;
            };
            filters: components["schemas"]["FilterOptionDto"][];
            message: string;
            result: components["schemas"]["NotificationDto"][];
        };
        ResponseDataListListPaymentTermsDtoBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            associated_actions: {
                [key: string]: components["schemas"]["ActionDto"][] | undefined;
            };
            filters: components["schemas"]["FilterOptionDto"][];
            message: string;
            result: components["schemas"]["PaymentTermsDto"][];
        };
        ResponseDataListListPaymentTermsTemplateDtoBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            associated_actions: {
                [key: string]: components["schemas"]["ActionDto"][] | undefined;
            };
            filters: components["schemas"]["FilterOptionDto"][];
            message: string;
            result: components["schemas"]["PaymentTermsTemplateDto"][];
        };
        ResponseDataListListProfileDtoBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            associated_actions: {
                [key: string]: components["schemas"]["ActionDto"][] | undefined;
            };
            filters: components["schemas"]["FilterOptionDto"][];
            message: string;
            result: components["schemas"]["ProfileDto"][];
        };
        ResponseDataListListStageDtoBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            associated_actions: {
                [key: string]: components["schemas"]["ActionDto"][] | undefined;
            };
            filters: components["schemas"]["FilterOptionDto"][];
            message: string;
            result: components["schemas"]["StageDto"][];
        };
        ResponseDataListListTermsAndConditionsDtoBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            associated_actions: {
                [key: string]: components["schemas"]["ActionDto"][] | undefined;
            };
            filters: components["schemas"]["FilterOptionDto"][];
            message: string;
            result: components["schemas"]["TermsAndConditionsDto"][];
        };
        ResponseDataListListWorkSpaceDtoBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            associated_actions: {
                [key: string]: components["schemas"]["ActionDto"][] | undefined;
            };
            filters: components["schemas"]["FilterOptionDto"][];
            message: string;
            result: components["schemas"]["WorkSpaceDto"][];
        };
        ResponseDataListModuleDtoBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            associated_actions: {
                [key: string]: components["schemas"]["ActionDto"][] | undefined;
            };
            message: string;
            result: components["schemas"]["ModuleDto"][];
        };
        ResponseDataListPartyConnectionsBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            associated_actions: {
                [key: string]: components["schemas"]["ActionDto"][] | undefined;
            };
            message: string;
            result: components["schemas"]["PartyConnections"][];
        };
        ResponseDataListPartyTypeDtoBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            associated_actions: {
                [key: string]: components["schemas"]["ActionDto"][] | undefined;
            };
            message: string;
            result: components["schemas"]["PartyTypeDto"][];
        };
        ResponseDataListPaymentTermsLineDtoBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            associated_actions: {
                [key: string]: components["schemas"]["ActionDto"][] | undefined;
            };
            message: string;
            result: components["schemas"]["PaymentTermsLineDto"][];
        };
        ResponseDataListSerialNoTransactionDtoBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            associated_actions: {
                [key: string]: components["schemas"]["ActionDto"][] | undefined;
            };
            message: string;
            result: components["schemas"]["SerialNoTransactionDto"][];
        };
        ResponseDataListTaxAndChargeLineDtoBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            associated_actions: {
                [key: string]: components["schemas"]["ActionDto"][] | undefined;
            };
            message: string;
            result: components["schemas"]["TaxAndChargeLineDto"][];
        };
        ResponseDataListTreeEntryDtoBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            associated_actions: {
                [key: string]: components["schemas"]["ActionDto"][] | undefined;
            };
            message: string;
            result: components["schemas"]["TreeEntryDto"][];
        };
        ResponseDataModuleDtoBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            associated_actions: {
                [key: string]: components["schemas"]["ActionDto"][] | undefined;
            };
            message: string;
            result: components["schemas"]["ModuleDto"];
        };
        ResponseDataPaymentAccountsDtoBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            associated_actions: {
                [key: string]: components["schemas"]["ActionDto"][] | undefined;
            };
            message: string;
            result: components["schemas"]["PaymentAccountsDto"];
        };
        ResponseDataPaymentDtoBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            associated_actions: {
                [key: string]: components["schemas"]["ActionDto"][] | undefined;
            };
            message: string;
            result: components["schemas"]["PaymentDto"];
        };
        ResponseDataPaymentTermsDtoBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            associated_actions: {
                [key: string]: components["schemas"]["ActionDto"][] | undefined;
            };
            message: string;
            result: components["schemas"]["PaymentTermsDto"];
        };
        ResponseDataPaymentTermsTemplateDtoBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            associated_actions: {
                [key: string]: components["schemas"]["ActionDto"][] | undefined;
            };
            message: string;
            result: components["schemas"]["PaymentTermsTemplateDto"];
        };
        ResponseDataPricingDtoBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            associated_actions: {
                [key: string]: components["schemas"]["ActionDto"][] | undefined;
            };
            message: string;
            result: components["schemas"]["PricingDto"];
        };
        ResponseDataProjectDtoBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            associated_actions: {
                [key: string]: components["schemas"]["ActionDto"][] | undefined;
            };
            message: string;
            result: components["schemas"]["ProjectDto"];
        };
        ResponseDataPurchaseRecordDtoBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            associated_actions: {
                [key: string]: components["schemas"]["ActionDto"][] | undefined;
            };
            message: string;
            result: components["schemas"]["PurchaseRecordDto"];
        };
        ResponseDataQuotationDtoBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            associated_actions: {
                [key: string]: components["schemas"]["ActionDto"][] | undefined;
            };
            message: string;
            result: components["schemas"]["QuotationDto"];
        };
        ResponseDataReceiptDtoBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            associated_actions: {
                [key: string]: components["schemas"]["ActionDto"][] | undefined;
            };
            message: string;
            result: components["schemas"]["ReceiptDto"];
        };
        ResponseDataRoleDtoBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            associated_actions: {
                [key: string]: components["schemas"]["ActionDto"][] | undefined;
            };
            message: string;
            result: components["schemas"]["RoleDto"];
        };
        ResponseDataSalesRecordDtoBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            associated_actions: {
                [key: string]: components["schemas"]["ActionDto"][] | undefined;
            };
            message: string;
            result: components["schemas"]["SalesRecordDto"];
        };
        ResponseDataStageDtoBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            associated_actions: {
                [key: string]: components["schemas"]["ActionDto"][] | undefined;
            };
            message: string;
            result: components["schemas"]["StageDto"];
        };
        ResponseDataStockEntryDtoBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            associated_actions: {
                [key: string]: components["schemas"]["ActionDto"][] | undefined;
            };
            message: string;
            result: components["schemas"]["StockEntryDto"];
        };
        ResponseDataSupplierDtoBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            associated_actions: {
                [key: string]: components["schemas"]["ActionDto"][] | undefined;
            };
            message: string;
            result: components["schemas"]["SupplierDto"];
        };
        ResponseDataTermsAndConditionsDtoBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            associated_actions: {
                [key: string]: components["schemas"]["ActionDto"][] | undefined;
            };
            message: string;
            result: components["schemas"]["TermsAndConditionsDto"];
        };
        ResponseDataValidateBookingDataBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            associated_actions: {
                [key: string]: components["schemas"]["ActionDto"][] | undefined;
            };
            message: string;
            result: components["schemas"]["ValidateBookingData"];
        };
        ResponseDataWorkSpaceDtoBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            associated_actions: {
                [key: string]: components["schemas"]["ActionDto"][] | undefined;
            };
            message: string;
            result: components["schemas"]["WorkSpaceDto"];
        };
        ResponseMessageBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            errors: {
                [key: string]: string | undefined;
            };
            message: string;
        };
        ResultEntityAddressDto: {
            activities: components["schemas"]["ActivityDto"][];
            addresses: components["schemas"]["AddressDto"][];
            contacts: components["schemas"]["ContactDto"][];
            entity: components["schemas"]["AddressDto"];
        };
        ResultEntityBankAccountDto: {
            activities: components["schemas"]["ActivityDto"][];
            addresses: components["schemas"]["AddressDto"][];
            contacts: components["schemas"]["ContactDto"][];
            entity: components["schemas"]["BankAccountDto"];
        };
        ResultEntityBankDto: {
            activities: components["schemas"]["ActivityDto"][];
            addresses: components["schemas"]["AddressDto"][];
            contacts: components["schemas"]["ContactDto"][];
            entity: components["schemas"]["BankDto"];
        };
        ResultEntityBatchBundleDto: {
            activities: components["schemas"]["ActivityDto"][];
            addresses: components["schemas"]["AddressDto"][];
            contacts: components["schemas"]["ContactDto"][];
            entity: components["schemas"]["BatchBundleDto"];
        };
        ResultEntityBookingDto: {
            activities: components["schemas"]["ActivityDto"][];
            addresses: components["schemas"]["AddressDto"][];
            contacts: components["schemas"]["ContactDto"][];
            entity: components["schemas"]["BookingDto"];
        };
        ResultEntityCashOutflowDto: {
            activities: components["schemas"]["ActivityDto"][];
            addresses: components["schemas"]["AddressDto"][];
            contacts: components["schemas"]["ContactDto"][];
            entity: components["schemas"]["CashOutflowDto"];
        };
        ResultEntityChargesTemplateDto: {
            activities: components["schemas"]["ActivityDto"][];
            addresses: components["schemas"]["AddressDto"][];
            contacts: components["schemas"]["ContactDto"][];
            entity: components["schemas"]["ChargesTemplateDto"];
        };
        ResultEntityCompanyDto: {
            activities: components["schemas"]["ActivityDto"][];
            addresses: components["schemas"]["AddressDto"][];
            contacts: components["schemas"]["ContactDto"][];
            entity: components["schemas"]["CompanyDto"];
        };
        ResultEntityContactDto: {
            activities: components["schemas"]["ActivityDto"][];
            addresses: components["schemas"]["AddressDto"][];
            contacts: components["schemas"]["ContactDto"][];
            entity: components["schemas"]["ContactDto"];
        };
        ResultEntityCostCenterDto: {
            activities: components["schemas"]["ActivityDto"][];
            addresses: components["schemas"]["AddressDto"][];
            contacts: components["schemas"]["ContactDto"][];
            entity: components["schemas"]["CostCenterDto"];
        };
        ResultEntityCourtDto: {
            activities: components["schemas"]["ActivityDto"][];
            addresses: components["schemas"]["AddressDto"][];
            contacts: components["schemas"]["ContactDto"][];
            entity: components["schemas"]["CourtDto"];
        };
        ResultEntityCurrencyExchangeDto: {
            activities: components["schemas"]["ActivityDto"][];
            addresses: components["schemas"]["AddressDto"][];
            contacts: components["schemas"]["ContactDto"][];
            entity: components["schemas"]["CurrencyExchangeDto"];
        };
        ResultEntityCustomerDto: {
            activities: components["schemas"]["ActivityDto"][];
            addresses: components["schemas"]["AddressDto"][];
            contacts: components["schemas"]["ContactDto"][];
            entity: components["schemas"]["CustomerDto"];
        };
        ResultEntityDealDetailDto: {
            activities: components["schemas"]["ActivityDto"][];
            addresses: components["schemas"]["AddressDto"][];
            contacts: components["schemas"]["ContactDto"][];
            entity: components["schemas"]["DealDetailDto"];
        };
        ResultEntityEntityDetailDto: {
            activities: components["schemas"]["ActivityDto"][];
            addresses: components["schemas"]["AddressDto"][];
            contacts: components["schemas"]["ContactDto"][];
            entity: components["schemas"]["EntityDetailDto"];
        };
        ResultEntityEventBookingDetail: {
            activities: components["schemas"]["ActivityDto"][];
            addresses: components["schemas"]["AddressDto"][];
            contacts: components["schemas"]["ContactDto"][];
            entity: components["schemas"]["EventBookingDetail"];
        };
        ResultEntityGroupDto: {
            activities: components["schemas"]["ActivityDto"][];
            addresses: components["schemas"]["AddressDto"][];
            contacts: components["schemas"]["ContactDto"][];
            entity: components["schemas"]["GroupDto"];
        };
        ResultEntityInvoiceDetailDto: {
            activities: components["schemas"]["ActivityDto"][];
            addresses: components["schemas"]["AddressDto"][];
            contacts: components["schemas"]["ContactDto"][];
            entity: components["schemas"]["InvoiceDetailDto"];
        };
        ResultEntityItemAttributeDto: {
            activities: components["schemas"]["ActivityDto"][];
            addresses: components["schemas"]["AddressDto"][];
            contacts: components["schemas"]["ContactDto"][];
            entity: components["schemas"]["ItemAttributeDto"];
        };
        ResultEntityItemDetailDto: {
            activities: components["schemas"]["ActivityDto"][];
            addresses: components["schemas"]["AddressDto"][];
            contacts: components["schemas"]["ContactDto"][];
            entity: components["schemas"]["ItemDetailDto"];
        };
        ResultEntityItemPriceDto: {
            activities: components["schemas"]["ActivityDto"][];
            addresses: components["schemas"]["AddressDto"][];
            contacts: components["schemas"]["ContactDto"][];
            entity: components["schemas"]["ItemPriceDto"];
        };
        ResultEntityJournalEntryDetailDto: {
            activities: components["schemas"]["ActivityDto"][];
            addresses: components["schemas"]["AddressDto"][];
            contacts: components["schemas"]["ContactDto"][];
            entity: components["schemas"]["JournalEntryDetailDto"];
        };
        ResultEntityLedgerDetailDto: {
            activities: components["schemas"]["ActivityDto"][];
            addresses: components["schemas"]["AddressDto"][];
            contacts: components["schemas"]["ContactDto"][];
            entity: components["schemas"]["LedgerDetailDto"];
        };
        ResultEntityListCustomerType: {
            activities: components["schemas"]["ActivityDto"][];
            addresses: components["schemas"]["AddressDto"][];
            contacts: components["schemas"]["ContactDto"][];
            entity: components["schemas"]["CustomerType"][];
        };
        ResultEntityListEntityActionsDto: {
            activities: components["schemas"]["ActivityDto"][];
            addresses: components["schemas"]["AddressDto"][];
            contacts: components["schemas"]["ContactDto"][];
            entity: components["schemas"]["EntityActionsDto"][];
        };
        ResultEntityListGroupHierarchyDto: {
            activities: components["schemas"]["ActivityDto"][];
            addresses: components["schemas"]["AddressDto"][];
            contacts: components["schemas"]["ContactDto"][];
            entity: components["schemas"]["GroupHierarchyDto"][];
        };
        ResultEntityListItemPriceDto: {
            activities: components["schemas"]["ActivityDto"][];
            addresses: components["schemas"]["AddressDto"][];
            contacts: components["schemas"]["ContactDto"][];
            entity: components["schemas"]["ItemPriceDto"][];
        };
        ResultEntityListPartyDto: {
            activities: components["schemas"]["ActivityDto"][];
            addresses: components["schemas"]["AddressDto"][];
            contacts: components["schemas"]["ContactDto"][];
            entity: components["schemas"]["PartyDto"][];
        };
        ResultEntityListPartyTypeDto: {
            activities: components["schemas"]["ActivityDto"][];
            addresses: components["schemas"]["AddressDto"][];
            contacts: components["schemas"]["ContactDto"][];
            entity: components["schemas"]["PartyTypeDto"][];
        };
        ResultEntityModuleDetailDto: {
            activities: components["schemas"]["ActivityDto"][];
            addresses: components["schemas"]["AddressDto"][];
            contacts: components["schemas"]["ContactDto"][];
            entity: components["schemas"]["ModuleDetailDto"];
        };
        ResultEntityOrderDetailDto: {
            activities: components["schemas"]["ActivityDto"][];
            addresses: components["schemas"]["AddressDto"][];
            contacts: components["schemas"]["ContactDto"][];
            entity: components["schemas"]["OrderDetailDto"];
        };
        ResultEntityOrderDto: {
            activities: components["schemas"]["ActivityDto"][];
            addresses: components["schemas"]["AddressDto"][];
            contacts: components["schemas"]["ContactDto"][];
            entity: components["schemas"]["OrderDto"];
        };
        ResultEntityPaymentDetailDto: {
            activities: components["schemas"]["ActivityDto"][];
            addresses: components["schemas"]["AddressDto"][];
            contacts: components["schemas"]["ContactDto"][];
            entity: components["schemas"]["PaymentDetailDto"];
        };
        ResultEntityPaymentTermsDto: {
            activities: components["schemas"]["ActivityDto"][];
            addresses: components["schemas"]["AddressDto"][];
            contacts: components["schemas"]["ContactDto"][];
            entity: components["schemas"]["PaymentTermsDto"];
        };
        ResultEntityPaymentTermsTemplateDto: {
            activities: components["schemas"]["ActivityDto"][];
            addresses: components["schemas"]["AddressDto"][];
            contacts: components["schemas"]["ContactDto"][];
            entity: components["schemas"]["PaymentTermsTemplateDto"];
        };
        ResultEntityPianoForm: {
            activities: components["schemas"]["ActivityDto"][];
            addresses: components["schemas"]["AddressDto"][];
            contacts: components["schemas"]["ContactDto"][];
            entity: components["schemas"]["PianoForm"];
        };
        ResultEntityPriceListDto: {
            activities: components["schemas"]["ActivityDto"][];
            addresses: components["schemas"]["AddressDto"][];
            contacts: components["schemas"]["ContactDto"][];
            entity: components["schemas"]["PriceListDto"];
        };
        ResultEntityPricingDetailDto: {
            activities: components["schemas"]["ActivityDto"][];
            addresses: components["schemas"]["AddressDto"][];
            contacts: components["schemas"]["ContactDto"][];
            entity: components["schemas"]["PricingDetailDto"];
        };
        ResultEntityProfileDto: {
            activities: components["schemas"]["ActivityDto"][];
            addresses: components["schemas"]["AddressDto"][];
            contacts: components["schemas"]["ContactDto"][];
            entity: components["schemas"]["ProfileDto"];
        };
        ResultEntityProjectDto: {
            activities: components["schemas"]["ActivityDto"][];
            addresses: components["schemas"]["AddressDto"][];
            contacts: components["schemas"]["ContactDto"][];
            entity: components["schemas"]["ProjectDto"];
        };
        ResultEntityPurchaseRecordDto: {
            activities: components["schemas"]["ActivityDto"][];
            addresses: components["schemas"]["AddressDto"][];
            contacts: components["schemas"]["ContactDto"][];
            entity: components["schemas"]["PurchaseRecordDto"];
        };
        ResultEntityQuotationDetailDto: {
            activities: components["schemas"]["ActivityDto"][];
            addresses: components["schemas"]["AddressDto"][];
            contacts: components["schemas"]["ContactDto"][];
            entity: components["schemas"]["QuotationDetailDto"];
        };
        ResultEntityReceiptDetailDto: {
            activities: components["schemas"]["ActivityDto"][];
            addresses: components["schemas"]["AddressDto"][];
            contacts: components["schemas"]["ContactDto"][];
            entity: components["schemas"]["ReceiptDetailDto"];
        };
        ResultEntityRoleDto: {
            activities: components["schemas"]["ActivityDto"][];
            addresses: components["schemas"]["AddressDto"][];
            contacts: components["schemas"]["ContactDto"][];
            entity: components["schemas"]["RoleDto"];
        };
        ResultEntityRoleTemplateDto: {
            activities: components["schemas"]["ActivityDto"][];
            addresses: components["schemas"]["AddressDto"][];
            contacts: components["schemas"]["ContactDto"][];
            entity: components["schemas"]["RoleTemplateDto"];
        };
        ResultEntitySalesRecordDto: {
            activities: components["schemas"]["ActivityDto"][];
            addresses: components["schemas"]["AddressDto"][];
            contacts: components["schemas"]["ContactDto"][];
            entity: components["schemas"]["SalesRecordDto"];
        };
        ResultEntitySerialNoDto: {
            activities: components["schemas"]["ActivityDto"][];
            addresses: components["schemas"]["AddressDto"][];
            contacts: components["schemas"]["ContactDto"][];
            entity: components["schemas"]["SerialNoDto"];
        };
        ResultEntityStockEntryDto: {
            activities: components["schemas"]["ActivityDto"][];
            addresses: components["schemas"]["AddressDto"][];
            contacts: components["schemas"]["ContactDto"][];
            entity: components["schemas"]["StockEntryDto"];
        };
        ResultEntitySupplierDto: {
            activities: components["schemas"]["ActivityDto"][];
            addresses: components["schemas"]["AddressDto"][];
            contacts: components["schemas"]["ContactDto"][];
            entity: components["schemas"]["SupplierDto"];
        };
        ResultEntityTaxDto: {
            activities: components["schemas"]["ActivityDto"][];
            addresses: components["schemas"]["AddressDto"][];
            contacts: components["schemas"]["ContactDto"][];
            entity: components["schemas"]["TaxDto"];
        };
        ResultEntityTermsAndConditionsDto: {
            activities: components["schemas"]["ActivityDto"][];
            addresses: components["schemas"]["AddressDto"][];
            contacts: components["schemas"]["ContactDto"][];
            entity: components["schemas"]["TermsAndConditionsDto"];
        };
        ResultEntityWareHouseDto: {
            activities: components["schemas"]["ActivityDto"][];
            addresses: components["schemas"]["AddressDto"][];
            contacts: components["schemas"]["ContactDto"][];
            entity: components["schemas"]["WareHouseDto"];
        };
        ResultEntityWorkSpaceDto: {
            activities: components["schemas"]["ActivityDto"][];
            addresses: components["schemas"]["AddressDto"][];
            contacts: components["schemas"]["ContactDto"][];
            entity: components["schemas"]["WorkSpaceDto"];
        };
        RoleActionDto: {
            action: components["schemas"]["ActionDto"];
            /** Format: int64 */
            action_id: number;
            /** Format: int64 */
            role_id: number;
        };
        RoleData: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            fields: components["schemas"]["RoleFields"];
            /** Format: int64 */
            id?: number;
        };
        RoleDto: {
            code: string;
            /** Format: date-time */
            created_at: string;
            description: string | null;
            /** Format: int64 */
            id: number;
            /** Format: date-time */
            updated_at: string | null;
            uuid: string;
            workspace: string | null;
            /** Format: int64 */
            workspace_id: number | null;
        };
        RoleFields: {
            code: string;
            description?: string | null;
            /** Format: int64 */
            workspace_id?: number | null;
        };
        RoleTemplateDto: {
            /** Format: date-time */
            created_at: string;
            /** Format: int64 */
            id: number;
            name: string;
        };
        SalesRecordData: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            authorization_code: string;
            /** Format: double */
            base_amount_for_tax_debit: number;
            consolidation_status: string;
            control_code: string;
            /** Format: int64 */
            customer_id: number;
            customer_nit_ci: string;
            /** Format: double */
            discounts_bonus_and_rebates_subject_to_vat: number;
            /** Format: double */
            exports_and_exempt_operations: number;
            /** Format: double */
            gift_card_amount: number;
            /** Format: double */
            ice_amount: number;
            /** Format: int64 */
            id?: number;
            /** Format: double */
            iehd_amount: number;
            /** Format: date-time */
            invoice_date: string;
            /** Format: int64 */
            invoice_id: number;
            invoice_no: string;
            /** Format: double */
            ipj_amount: number;
            name_or_business_name: string;
            /** Format: double */
            other_not_subject_to_vat: number;
            sale_type: string;
            state: string;
            /** Format: double */
            subtotal: number;
            supplement: string;
            /** Format: double */
            tax_debit: number;
            /** Format: double */
            tax_rates: number;
            /** Format: double */
            total_sale_amount: number;
            with_tax_credit_right: boolean;
            /** Format: double */
            zero_rate_taxable_sales: number;
        };
        SalesRecordDto: {
            authorization_code: string;
            /** Format: int32 */
            base_amount_for_tax_debit: number;
            consolidation_status: string;
            control_code: string;
            customer: string;
            /** Format: int64 */
            customer_id: number;
            customer_nit_ci: string;
            customer_uuid: string;
            /** Format: int32 */
            discounts_bonus_and_rebates_subject_to_vat: number;
            /** Format: int32 */
            exports_and_exempt_operations: number;
            /** Format: int32 */
            gift_card_amount: number;
            /** Format: int32 */
            ice_amount: number;
            /** Format: int64 */
            id: number;
            /** Format: int32 */
            iehd_amount: number;
            invoice_code: string;
            /** Format: date-time */
            invoice_date: string;
            /** Format: int64 */
            invoice_id: number;
            invoice_no: string;
            /** Format: int32 */
            ipj_amount: number;
            name_or_business_name: string;
            /** Format: int32 */
            other_not_subject_to_vat: number;
            sale_type: string;
            state: string;
            status: string;
            /** Format: int32 */
            subtotal: number;
            supplement: string;
            /** Format: int32 */
            tax_debit: number;
            /** Format: int32 */
            tax_rates: number;
            /** Format: int32 */
            total_sale_amount: number;
            uuid: string;
            with_tax_credit_right: boolean;
            /** Format: int32 */
            zero_rate_taxable_sales: number;
        };
        SerialNoDto: {
            created_at: string;
            /** Format: int64 */
            id: number;
            item_code: string;
            item_name: string;
            serial_no: string;
            status: string;
            warehouse: string;
            warehouse_uuid: string;
        };
        SerialNoTransactionDto: {
            batch_bundle_no: string;
            /** Format: int64 */
            id: number;
            item_code: string;
            item_name: string;
            posting_date: string;
            posting_time: string;
            /** Format: int32 */
            qty: number;
            serial_no: string;
            status: string;
            /** Format: int32 */
            valuation_rate: number;
            voucher_code: string;
            voucher_type: string;
            warehouse_name: string;
            warehouse_uuid: string;
        };
        SignInRequestBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            /** @description Email of the user */
            email: string;
            /** @description Password of the user */
            password: string;
        };
        SignInResponseBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            /** @description Access token of the user */
            access_token: string;
            user: components["schemas"]["UserDto"];
            user_relation: components["schemas"]["UserRelationDto"];
        };
        StageData: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            fields: components["schemas"]["StageFields"];
            /** Format: int32 */
            id: number;
        };
        StageDto: {
            color: string;
            /** Format: int64 */
            entity_id: number;
            /** Format: int32 */
            id: number;
            /** Format: int32 */
            index: number;
            name: string;
        };
        StageFields: {
            color: string;
            /** Format: int32 */
            entity_id: number;
            /** Format: int32 */
            index: number;
            name: string;
        };
        StageTransitionData: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            /** Format: int32 */
            destination_id: number;
            /** Format: int32 */
            destionation_index: number;
            /** Format: int32 */
            source_id: number;
            /** Format: int32 */
            source_index: number;
        };
        StockBalanceEntryDto: {
            /** Format: int32 */
            average_rate: number;
            /** Format: int32 */
            balance_qty: number;
            /** Format: int32 */
            balance_value: number;
            currency: string;
            /** Format: date-time */
            date: string;
            /** Format: int32 */
            in_qty: number;
            item_code: string;
            item_group_name: string;
            item_group_uuid: string;
            item_name: string;
            item_uuid: string;
            /** Format: int32 */
            out_qty: number;
            stock_uom: string;
            warehouse_name: string;
            warehouse_uuid: string;
        };
        StockEntryBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            items: components["schemas"]["CreateItemLines"];
            stock_entry: components["schemas"]["StockEntryData"];
        };
        StockEntryData: {
            fields: components["schemas"]["StockEntryFields"];
            /** Format: int64 */
            id?: number;
        };
        StockEntryDto: {
            code: string;
            cost_center: string | null;
            /** Format: int64 */
            cost_center_id: number | null;
            cost_center_uuid: string | null;
            currency: string;
            entry_type: string;
            /** Format: int64 */
            id: number;
            posting_date: string;
            posting_time: string;
            project: string | null;
            /** Format: int64 */
            project_id: number | null;
            project_uuid: string | null;
            source_warehouse: string | null;
            /** Format: int64 */
            source_warehouse_id: number | null;
            source_warehouse_uuid: string | null;
            status: string;
            target_warehouse: string | null;
            /** Format: int64 */
            target_warehouse_id: number | null;
            target_warehouse_uuid: string | null;
            tz: string;
        };
        StockEntryFields: {
            /** Format: int64 */
            cost_center_id?: number | null;
            currency: string;
            entry_type: string;
            /** Format: date-time */
            posting_date: string;
            posting_time: string;
            /** Format: int64 */
            project_id?: number | null;
            /** Format: int64 */
            source_warehouse_id?: number | null;
            /** Format: int64 */
            target_warehouse_id?: number | null;
            tz: string;
        };
        StockLedgerEntryDto: {
            /** Format: int32 */
            average_rate: number;
            /** Format: int32 */
            balance_qty: number;
            /** Format: int32 */
            balance_value: number;
            currency: string;
            /** Format: date-time */
            date: string;
            /** Format: int32 */
            in_qty: number;
            /** Format: int32 */
            incoming_rate: number;
            item_code: string;
            item_group_name: string;
            item_group_uuid: string;
            item_name: string;
            item_uuid: string;
            /** Format: int32 */
            out_qty: number;
            stock_uom: string;
            /** Format: int32 */
            valuation_rate: number;
            voucher_no: string;
            voucher_type: string;
            warehouse_name: string;
            warehouse_uuid: string;
        };
        StockLevelDto: {
            /** Format: date-time */
            created_at: string;
            enabled: boolean;
            item_name: string;
            item_uuid: string;
            /** Format: int32 */
            out_of_stock_threshold: number;
            /** Format: int32 */
            stock: number;
            uuid: string;
            warehouse_name: string;
            warehouse_uuid: string;
        };
        SumaryEntryDto: {
            currency: string;
            party_name: string;
            party_type: string;
            party_uuid: string;
            /** Format: int64 */
            total_invoiced_amount: number;
            /** Format: int64 */
            total_paid_amount: number;
        };
        SupplierData: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            contacts: components["schemas"]["ContactData"][];
            fields: components["schemas"]["SupplierFields"];
            /** Format: int64 */
            id?: number;
        };
        SupplierDto: {
            created_at: string;
            email: string | null;
            group: string;
            /** Format: int64 */
            group_id: number;
            group_uuid: string;
            /** Format: int64 */
            id: number;
            name: string;
            phone_number: string | null;
            status: string;
            uuid: string;
        };
        SupplierFields: {
            /** Format: int64 */
            group_id?: number | null;
            name: string;
        };
        TaxAndChargeLineData: {
            /** Format: double */
            amount: number;
            is_deducted: boolean;
            /** Format: int64 */
            ledger: number;
            /** Format: int32 */
            tax_rate: number;
            type: string;
        };
        TaxAndChargeLineDto: {
            account_head: string;
            /** Format: int64 */
            account_head_id: number;
            account_head_uuid: string;
            /** Format: int32 */
            amount: number;
            /** Format: int64 */
            id: number;
            is_deducted: boolean;
            /** Format: int32 */
            tax_rate: number;
            type: string;
        };
        TaxDto: {
            /** Format: date-time */
            created_at: string;
            enabled: boolean;
            /** Format: int64 */
            id: number;
            name: string;
            uuid: string;
            /** Format: double */
            value: number;
        };
        TermsAndConditionFields: {
            name: string;
            terms_and_conditions: string;
        };
        TermsAndConditionsData: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            filds: components["schemas"]["TermsAndConditionFields"];
            /** Format: int64 */
            id?: number;
        };
        TermsAndConditionsDto: {
            /** Format: int64 */
            id: number;
            name: string;
            status: string;
            terms_and_conditions: string;
            uuid: string;
        };
        TotalsDto: {
            /** Format: int32 */
            paid: number;
            /** Format: int32 */
            total: number;
        };
        TreeEntryDto: {
            /** Format: int64 */
            id: number;
            is_group: boolean;
            name: string;
            /** Format: int64 */
            parent: number;
            uuid: string;
        };
        UOMDto: {
            code: string;
            /** Format: int64 */
            id: number;
            name: string;
        };
        UOMsResponseBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            results: components["schemas"]["UOMDto"][];
        };
        UpdateBookingBatchRequestBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            booking_ids: number[];
            target_state: string;
        };
        UpdateCourtRatesBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            action: string;
            court_rate: components["schemas"]["CourtRateData"][];
            court_uuid: string;
        };
        UpdateCredentialsPluginRequestBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            credentials: string;
        };
        UpdatePasswordRequestBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            newPassword: string;
            password: string;
        };
        UpdateProfileRequestBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            profile: components["schemas"]["EditableProfileFields"];
        };
        UpdateStatusWithEventBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            current_state: string;
            events: number[];
            party_id: string;
            party_type?: string;
        };
        UpsertItemAttributeValueRequestBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            abbreviation: string;
            /** Format: int32 */
            id?: number;
            /** Format: int64 */
            itemAttributeId?: number;
            /** Format: int32 */
            ordinal: number;
            value: string;
        };
        UserDto: {
            /** Format: date-time */
            created_at: string;
            /** Format: int64 */
            id: number;
            identifier: string;
            /** Format: date-time */
            last_login: string | null;
            uuid: string;
        };
        UserRelationDto: {
            company: components["schemas"]["CompanyDto"];
            profile: components["schemas"]["ProfileDto"];
            role: components["schemas"]["RoleDto"];
            uuid: string;
        };
        ValidateBookingData: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            /** Format: int64 */
            booking_id?: number;
            bookings: components["schemas"]["BookingData"][];
            /** Format: int64 */
            customer_id?: number | null;
            customer_name?: string | null;
            /** Format: int64 */
            event_id?: number | null;
            event_name?: string | null;
        };
        WareHouseDto: {
            /** Format: date-time */
            created_at: string;
            enabled: boolean;
            /** Format: int64 */
            id: number;
            is_group: boolean;
            name: string;
            uuid: string;
        };
        WorkSpaceData: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            fields: components["schemas"]["WorkSpaceFields"];
            /** Format: int64 */
            id?: number;
            modules: number[];
        };
        WorkSpaceDto: {
            /** Format: date-time */
            created_at: string;
            /** Format: int64 */
            id: number;
            modules: components["schemas"]["ModuleDto"][];
            name: string;
            status: string;
        };
        WorkSpaceFields: {
            name: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    "get-account": {
        parameters: {
            query?: never;
            header?: {
                Authorization?: string;
                "User-Session-Uuid"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AccountResponseBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "change-password": {
        parameters: {
            query?: never;
            header?: {
                "Accept-Language"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ChangePasswordRequestBody"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseMessageBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "update-password": {
        parameters: {
            query?: never;
            header?: {
                Authorization?: string;
                "User-Session-Uuid"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdatePasswordRequestBody"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseMessageBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "reset-password": {
        parameters: {
            query?: never;
            header?: {
                "Accept-Language"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ResetPasswordRequestBody"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseMessageBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "get-sessions": {
        parameters: {
            query?: never;
            header?: {
                Authorization?: string;
                "User-Session-Uuid"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EntityResponseListUserRelationDtoBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "sign-in": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SignInRequestBody"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SignInResponseBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "account-balance": {
        parameters: {
            query?: {
                id?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EntityResponseGeneralLedgerOpeningBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "get-account-payable": {
        parameters: {
            query: {
                from_date: string;
                to_date: string;
                party?: string;
            };
            header?: {
                Authorization?: string;
                "User-Session-Uuid"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EntityResponseListAccountPayableEntryDtoBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "get-account-payable-sumary": {
        parameters: {
            query: {
                from_date: string;
                to_date: string;
                party?: string;
            };
            header?: {
                Authorization?: string;
                "User-Session-Uuid"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EntityResponseListSumaryEntryDtoBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "account-receivable": {
        parameters: {
            query: {
                from_date: string;
                to_date: string;
                party?: string;
            };
            header?: {
                Authorization?: string;
                "User-Session-Uuid"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EntityResponseListAccountReceivableEntryDtoBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "receivable-sumary": {
        parameters: {
            query: {
                from_date: string;
                to_date: string;
                party?: string;
            };
            header?: {
                Authorization?: string;
                "User-Session-Uuid"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EntityResponseListSumaryEntryDtoBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "get-general-ledger": {
        parameters: {
            query: {
                from_date: string;
                to_date: string;
                account?: string;
                voucher_no?: string;
                agains_voucher_no?: string;
                party_type?: string;
                party?: string;
                currency?: string;
                project?: string;
                cost_center?: string;
            };
            header?: {
                Authorization?: string;
                "User-Session-Uuid"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EntityResponseGeneralLedgerDataBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "get-taxes": {
        parameters: {
            query: {
                page?: string;
                size: string;
                enabled?: string;
                status?: string;
                is_group?: string;
                query?: string;
                orientation?: string;
                column?: string;
                parentId?: string;
            };
            header?: {
                Authorization?: string;
                "User-Session-Uuid"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginationResponsePaginationResultListTaxDtoBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "create-tax": {
        parameters: {
            query?: never;
            header?: {
                Authorization?: string;
                "User-Session-Uuid"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateTaxRequestBody"];
            };
        };
        responses: {
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseMessageBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "get-tax-detail": {
        parameters: {
            query?: {
                query?: string;
                orientation?: string;
                column?: string;
                parentId?: string;
            };
            header?: {
                Authorization?: string;
                "User-Session-Uuid"?: string;
            };
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EntityResponseResultEntityTaxDtoBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "edit-activity": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ActivityData"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseMessageBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    activity: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ActivityData"];
            };
        };
        responses: {
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseDataActivityDtoBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "delete-activity": {
        parameters: {
            query: {
                id: string;
                party_type?: string;
                " required:"?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseMessageBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "get-addresses": {
        parameters: {
            query?: {
                size?: string;
                status?: string;
                orientation?: string;
                column?: string;
                title?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseDataListListAddressDtoBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "create-address": {
        parameters: {
            query?: never;
            header?: {
                Authorization?: string;
                "User-Session-Uuid"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreatePartyAddressRequestBody"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseMessageBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "get-address": {
        parameters: {
            query?: {
                query?: string;
                orientation?: string;
                column?: string;
                parentId?: string;
            };
            header?: {
                Authorization?: string;
                "User-Session-Uuid"?: string;
            };
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EntityResponseResultEntityAddressDtoBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "get-address-references": {
        parameters: {
            query?: never;
            header?: {
                Authorization?: string;
                "User-Session-Uuid"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EntityResponseResultEntityListPartyTypeDtoBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "a-companies": {
        parameters: {
            query: {
                page?: string;
                size: string;
                enabled?: string;
                status?: string;
                is_group?: string;
                query?: string;
                orientation?: string;
                column?: string;
                parentId?: string;
            };
            header?: {
                Authorization?: string;
                "User-Session-Uuid"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginationResponsePaginationResultListCompanyDtoBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "a-create-company": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CompanyAdminData"];
            };
        };
        responses: {
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseMessageBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "a-company-detail": {
        parameters: {
            query?: {
                query?: string;
                orientation?: string;
                column?: string;
                parentId?: string;
            };
            header?: {
                Authorization?: string;
                "User-Session-Uuid"?: string;
            };
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EntityResponseResultEntityCompanyDtoBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "a-company-modules": {
        parameters: {
            query?: {
                id?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EntityResponseListCompanyEntityDtoBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "a-add-company-modules": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AddCompanyModulesBody"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseMessageBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "a-company-users": {
        parameters: {
            query?: {
                id?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EntityResponseListUserDtoBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "add-company-user": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateUserAdminRequestBody"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseMessageBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    entities: {
        parameters: {
            query: {
                page?: string;
                size: string;
                enabled?: string;
                status?: string;
                is_group?: string;
                query?: string;
                orientation?: string;
                column?: string;
                parentId?: string;
            };
            header?: {
                Authorization?: string;
                "User-Session-Uuid"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginationResponsePaginationResultListEntityDtoBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "create-entity": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateEntityRequestBody"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseMessageBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "add-entity-action": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AddEntityActionRequestBody"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseMessageBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    entity: {
        parameters: {
            query?: {
                query?: string;
                orientation?: string;
                column?: string;
                parentId?: string;
            };
            header?: {
                Authorization?: string;
                "User-Session-Uuid"?: string;
            };
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EntityResponseResultEntityEntityDetailDtoBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "role-templates": {
        parameters: {
            query: {
                page?: string;
                size: string;
                enabled?: string;
                status?: string;
                is_group?: string;
                query?: string;
                orientation?: string;
                column?: string;
                parentId?: string;
            };
            header?: {
                Authorization?: string;
                "User-Session-Uuid"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginationResponsePaginationResultListRoleTemplateDtoBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "create-role-template": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateRoleTemplateRequestBody"];
            };
        };
        responses: {
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseMessageBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "role-template": {
        parameters: {
            query?: {
                query?: string;
                orientation?: string;
                column?: string;
                parentId?: string;
            };
            header?: {
                Authorization?: string;
                "User-Session-Uuid"?: string;
            };
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EntityResponseResultEntityRoleTemplateDtoBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "sign-in-admin": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SignInRequestBody"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SignInResponseBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    bank: {
        parameters: {
            query?: {
                size?: string;
                status?: string;
                orientation?: string;
                column?: string;
                name?: string;
                created_at?: string;
                updated_at?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseDataListListBankDtoBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "edit-bank": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["BankData"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseMessageBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "create-bank": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["BankData"];
            };
        };
        responses: {
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseDataBankDtoBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "bank-account": {
        parameters: {
            query?: {
                size?: string;
                status?: string;
                orientation?: string;
                column?: string;
                account_name?: string;
                party_id?: string;
                is_company_account?: string;
                created_at?: string;
                updated_at?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseDataListListBankAccountDtoBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "edit-bank_account": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["BankAccountData"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseMessageBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "create-bank-account": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["BankAccountData"];
            };
        };
        responses: {
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseDataBankAccountDtoBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "bank-account-detail": {
        parameters: {
            query?: {
                query?: string;
                orientation?: string;
                column?: string;
                parentId?: string;
            };
            header?: {
                Authorization?: string;
                "User-Session-Uuid"?: string;
            };
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EntityResponseResultEntityBankAccountDtoBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "update-status-bank-account": {
        parameters: {
            query?: never;
            header?: {
                Authorization?: string;
                "User-Session-Uuid"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateStatusWithEventBody"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseMessageBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "bank-detail": {
        parameters: {
            query?: {
                query?: string;
                orientation?: string;
                column?: string;
                parentId?: string;
            };
            header?: {
                Authorization?: string;
                "User-Session-Uuid"?: string;
            };
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EntityResponseResultEntityBankDtoBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "update-status-bank": {
        parameters: {
            query?: never;
            header?: {
                Authorization?: string;
                "User-Session-Uuid"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateStatusWithEventBody"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseMessageBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "batch-bundles": {
        parameters: {
            query: {
                page?: string;
                size: string;
                enabled?: string;
                status?: string;
                is_group?: string;
                query?: string;
                orientation?: string;
                column?: string;
                parentId?: string;
            };
            header?: {
                Authorization?: string;
                "User-Session-Uuid"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginationResponsePaginationResultListBatchBundleDtoBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "batch-bundle": {
        parameters: {
            query?: {
                query?: string;
                orientation?: string;
                column?: string;
                parentId?: string;
            };
            header?: {
                Authorization?: string;
                "User-Session-Uuid"?: string;
            };
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EntityResponseResultEntityBatchBundleDtoBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "cash-outflow": {
        parameters: {
            query?: {
                size?: string;
                status?: string;
                orientation?: string;
                column?: string;
                created_at?: string;
                updated_at?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseDataListListCashOutflowDtoBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "edit-cash-outflow": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CashOutflowData"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseMessageBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "create-cash-outflow": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CashOutflowData"];
            };
        };
        responses: {
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseDataCashOutflowDtoBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "cash-outflow-detail": {
        parameters: {
            query?: {
                query?: string;
                orientation?: string;
                column?: string;
                parentId?: string;
            };
            header?: {
                Authorization?: string;
                "User-Session-Uuid"?: string;
            };
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EntityResponseResultEntityCashOutflowDtoBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "export-cash-outflow": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ExportDocumentData"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "update-status-cash-outflow": {
        parameters: {
            query?: never;
            header?: {
                Authorization?: string;
                "User-Session-Uuid"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateStatusWithEventBody"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseMessageBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "charges-templates": {
        parameters: {
            query: {
                page?: string;
                size: string;
                enabled?: string;
                status?: string;
                is_group?: string;
                query?: string;
                orientation?: string;
                column?: string;
                parentId?: string;
            };
            header?: {
                Authorization?: string;
                "User-Session-Uuid"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginationResponsePaginationResultListChargesTemplateDtoBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "edit-charges-template": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["EditChargesTemplateRequestBody"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseMessageBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "create-charge-template": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ChargesTemplateBody"];
            };
        };
        responses: {
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseDataChargesTemplateDtoBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "charges-template": {
        parameters: {
            query?: {
                query?: string;
                orientation?: string;
                column?: string;
                parentId?: string;
            };
            header?: {
                Authorization?: string;
                "User-Session-Uuid"?: string;
            };
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EntityResponseResultEntityChargesTemplateDtoBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    chat: {
        parameters: {
            query?: {
                name?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseDataListChatDtoBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "chat-detail": {
        parameters: {
            query?: {
                query?: string;
                orientation?: string;
                column?: string;
                parentId?: string;
            };
            header?: {
                Authorization?: string;
                "User-Session-Uuid"?: string;
            };
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseDataChatDetailDtoBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    message: {
        parameters: {
            query?: {
                size?: string;
                status?: string;
                orientation?: string;
                column?: string;
                id?: string;
                page?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseDataListChatMessageDtoBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "create-chat-message": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ChatMessageData"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseDataChatMessageDtoBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "update-member-last-read": {
        parameters: {
            query?: {
                query?: string;
                orientation?: string;
                column?: string;
                parentId?: string;
            };
            header?: {
                Authorization?: string;
                "User-Session-Uuid"?: string;
            };
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseMessageBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "get-client-profile": {
        parameters: {
            query?: never;
            header?: {
                Authorization?: string;
                "User-Session-Uuid"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EntityResponseClientBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "update-client-profile": {
        parameters: {
            query?: never;
            header?: {
                Authorization?: string;
                "User-Session-Uuid"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["EditClientRequestBody"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseMessageBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "create-company": {
        parameters: {
            query?: never;
            header?: {
                Authorization?: string;
                "User-Session-Uuid"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateCompanyRequestBody"];
            };
        };
        responses: {
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseMessageBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "company-detail": {
        parameters: {
            query?: {
                query?: string;
                orientation?: string;
                column?: string;
                parentId?: string;
            };
            header?: {
                Authorization?: string;
                "User-Session-Uuid"?: string;
            };
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EntityResponseResultEntityCompanyDtoBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "company-account-setting": {
        parameters: {
            query?: {
                id?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EntityResponseAccountSettingsDtoBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "edit-company-account-setting": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AccountSettingData"];
            };
        };
        responses: {
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseMessageBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "user-companies": {
        parameters: {
            query: {
                page?: string;
                size: string;
                enabled?: string;
                status?: string;
                is_group?: string;
                query?: string;
                orientation?: string;
                column?: string;
                parentId?: string;
            };
            header?: {
                Authorization?: string;
                "User-Session-Uuid"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginationResponsePaginationResultListCompanyDtoBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "get-company-by-uuid": {
        parameters: {
            query?: never;
            header?: {
                "Accept-Language"?: string;
            };
            path: {
                uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EntityResponseCompanyBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "cost-centers": {
        parameters: {
            query: {
                page?: string;
                size: string;
                enabled?: string;
                status?: string;
                is_group?: string;
                query?: string;
                orientation?: string;
                column?: string;
                parentId?: string;
            };
            header?: {
                Authorization?: string;
                "User-Session-Uuid"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginationResponsePaginationResultListCostCenterDtoBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "create-cost-center": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateCostCenterRequetBody"];
            };
        };
        responses: {
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseDataCostCenterDtoBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "cost-center": {
        parameters: {
            query?: {
                query?: string;
                orientation?: string;
                column?: string;
                parentId?: string;
            };
            header?: {
                Authorization?: string;
                "User-Session-Uuid"?: string;
            };
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EntityResponseResultEntityCostCenterDtoBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    courts: {
        parameters: {
            query?: {
                size?: string;
                status?: string;
                orientation?: string;
                column?: string;
                name?: string;
                created_at?: string;
                updated_at?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseDataListListCourtDtoBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "edit-court": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["EditCourtBody"];
            };
        };
        responses: {
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseMessageBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "create-court": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateCourtBody"];
            };
        };
        responses: {
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseDataCourtDtoBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "update-court-rates": {
        parameters: {
            query?: never;
            header?: {
                Authorization?: string;
                "User-Session-Uuid"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateCourtRatesBody"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseDataCourtDtoBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "get-court-rates": {
        parameters: {
            query?: {
                query?: string;
                orientation?: string;
                column?: string;
                parentId?: string;
            };
            header?: {
                Authorization?: string;
                "User-Session-Uuid"?: string;
            };
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseDataListCourtRateDtoBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    court: {
        parameters: {
            query?: {
                query?: string;
                orientation?: string;
                column?: string;
                parentId?: string;
            };
            header?: {
                Authorization?: string;
                "User-Session-Uuid"?: string;
            };
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EntityResponseResultEntityCourtDtoBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "cuatropf-subscription": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                companyUuid: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CuatropfSubscriptionRequestBody"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseMessageBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "get currencies": {
        parameters: {
            query: {
                page?: string;
                size: string;
                enabled?: string;
                status?: string;
                is_group?: string;
                query?: string;
                orientation?: string;
                column?: string;
                parentId?: string;
            };
            header?: {
                Authorization?: string;
                "User-Session-Uuid"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginationResponsePaginationResultListCurrencyDtoBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "currency-exchanges": {
        parameters: {
            query: {
                page?: string;
                size: string;
                enabled?: string;
                status?: string;
                is_group?: string;
                query?: string;
                orientation?: string;
                column?: string;
                parentId?: string;
            };
            header?: {
                Authorization?: string;
                "User-Session-Uuid"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginationResponsePaginationResultListCurrencyExchangeDtoBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "edit-currency-exchange": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["EditCurrencyExchangeRequestBody"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseMessageBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "create-currency-exchange": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateCurrencyExchangeRequestBody"];
            };
        };
        responses: {
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseDataCurrencyExchangeDtoBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "currency-exchange": {
        parameters: {
            query?: {
                query?: string;
                orientation?: string;
                column?: string;
                parentId?: string;
            };
            header?: {
                Authorization?: string;
                "User-Session-Uuid"?: string;
            };
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EntityResponseResultEntityCurrencyExchangeDtoBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "update-status-currency-exchange": {
        parameters: {
            query?: never;
            header?: {
                Authorization?: string;
                "User-Session-Uuid"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateStatusWithEventBody"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseMessageBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "get customers": {
        parameters: {
            query: {
                page?: string;
                size: string;
                enabled?: string;
                status?: string;
                is_group?: string;
                query?: string;
                orientation?: string;
                column?: string;
                parentId?: string;
            };
            header?: {
                Authorization?: string;
                "User-Session-Uuid"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginationResponsePaginationResultListCustomerDtoBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "edit-customer": {
        parameters: {
            query?: never;
            header?: {
                Authorization?: string;
                "User-Session-Uuid"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CustomerData"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseMessageBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "create customer": {
        parameters: {
            query?: never;
            header?: {
                Authorization?: string;
                "User-Session-Uuid"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CustomerData"];
            };
        };
        responses: {
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseDataCustomerDtoBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "customer types": {
        parameters: {
            query?: never;
            header?: {
                Authorization?: string;
                "User-Session-Uuid"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EntityResponseResultEntityListCustomerTypeBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "get customer": {
        parameters: {
            query?: {
                query?: string;
                orientation?: string;
                column?: string;
                parentId?: string;
            };
            header?: {
                Authorization?: string;
                "User-Session-Uuid"?: string;
            };
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EntityResponseResultEntityCustomerDtoBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "update-status-customer": {
        parameters: {
            query?: never;
            header?: {
                Authorization?: string;
                "User-Session-Uuid"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateStatusWithEventBody"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseMessageBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    deal: {
        parameters: {
            query?: {
                size?: string;
                status?: string;
                orientation?: string;
                column?: string;
                created_at?: string;
                updated_at?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseDataListListDealDtoBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "edit-deal": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DealData"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseMessageBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "create-deal": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DealData"];
            };
        };
        responses: {
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseDataDealDtoBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "deal-detail": {
        parameters: {
            query?: {
                query?: string;
                orientation?: string;
                column?: string;
                parentId?: string;
            };
            header?: {
                Authorization?: string;
                "User-Session-Uuid"?: string;
            };
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EntityResponseResultEntityDealDetailDtoBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "deal-transition": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["EntityTransitionData"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseMessageBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "test-request": {
        parameters: {
            query?: {
                states?: string;
                collectorGroups?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseMessageBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "edit-address-and-contact": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AddressAndContactData"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseMessageBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "address-and-contact": {
        parameters: {
            query: {
                party: string;
            };
            header?: {
                Authorization?: string;
                "User-Session-Uuid"?: string;
            };
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseDataAddressAndContactDtoBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "edit-doc-accounts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DocAccountingData"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseMessageBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "doc-accounting": {
        parameters: {
            query: {
                party: string;
            };
            header?: {
                Authorization?: string;
                "User-Session-Uuid"?: string;
            };
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseDataDocAccountingDtoBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "edit-doc-terms": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DocTermsData"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseMessageBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "doc-terms": {
        parameters: {
            query: {
                party: string;
            };
            header?: {
                Authorization?: string;
                "User-Session-Uuid"?: string;
            };
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseDataDocTermsDtoBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "balance-sheet": {
        parameters: {
            query: {
                from_date: string;
                to_date: string;
                currency?: string;
                time_unit?: string;
                cost_center?: string;
                project?: string;
            };
            header?: {
                Authorization?: string;
                "User-Session-Uuid"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EntityResponseListBalanceSheetEntryDtoBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "cash-flow": {
        parameters: {
            query: {
                from_date: string;
                to_date: string;
                currency?: string;
                time_unit?: string;
                cost_center?: string;
                project?: string;
            };
            header?: {
                Authorization?: string;
                "User-Session-Uuid"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EntityResponseListCashFlowEntryDtoBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "profit-and-loss": {
        parameters: {
            query: {
                from_date: string;
                to_date: string;
                currency?: string;
                time_unit?: string;
                cost_center?: string;
                project?: string;
            };
            header?: {
                Authorization?: string;
                "User-Session-Uuid"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EntityResponseListProfitAndLossEntryDtoBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "get-greeting-by-name": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description Name to greet
                 * @example world
                 */
                name: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GreetingOutputBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "edit-group": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["EditGroupRequestBody"];
            };
        };
        responses: {
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseMessageBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "create group": {
        parameters: {
            query?: never;
            header?: {
                Authorization?: string;
                "User-Session-Uuid"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateGroupRequestBody"];
            };
        };
        responses: {
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseMessageBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "get group descendents": {
        parameters: {
            query: {
                party: string;
            };
            header?: {
                Authorization?: string;
                "User-Session-Uuid"?: string;
            };
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EntityResponseResultEntityListGroupHierarchyDtoBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "get group": {
        parameters: {
            query: {
                party: string;
            };
            header?: {
                Authorization?: string;
                "User-Session-Uuid"?: string;
            };
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EntityResponseResultEntityGroupDtoBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "get groups by party code": {
        parameters: {
            query: {
                page?: string;
                size: string;
                enabled?: string;
                status?: string;
                is_group?: string;
                query?: string;
                orientation?: string;
                column?: string;
                parentId?: string;
            };
            header?: {
                Authorization?: string;
                "User-Session-Uuid"?: string;
            };
            path: {
                party: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginationResponsePaginationResultListGroupDtoBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "edit-invoice": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["InvoiceBody"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseMessageBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "create-invoice": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["InvoiceBody"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseDataInvoiceDtoBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "export-invoice": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ExportDocumentData"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    invoice: {
        parameters: {
            query: {
                party: string;
            };
            header?: {
                Authorization?: string;
                "User-Session-Uuid"?: string;
            };
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EntityResponseResultEntityInvoiceDetailDtoBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "update invoice state": {
        parameters: {
            query?: never;
            header?: {
                Authorization?: string;
                "User-Session-Uuid"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateStatusWithEventBody"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseMessageBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    invoices: {
        parameters: {
            query: {
                page?: string;
                size: string;
                enabled?: string;
                status?: string;
                is_group?: string;
                query?: string;
                orientation?: string;
                column?: string;
                parentId?: string;
                due_date?: string;
                posting_date?: string;
                party_id?: string;
                code?: string;
                project_id?: string;
                cost_center_id?: string;
                order_id?: string;
            };
            header?: never;
            path: {
                party: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginationResponsePaginationResultListInvoiceDtoBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "item-lines": {
        parameters: {
            query?: {
                line_type?: string;
                update_stock?: string;
                id?: string;
                party_type?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseDataListLineItemDtoBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "update-item-line": {
        parameters: {
            query?: never;
            header?: {
                Authorization?: string;
                "User-Session-Uuid"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["EditLineItemRequestBody"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseMessageBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "add-line-item": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AddLineItemRequestBody"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseMessageBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "delete-line-item": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DeleteLineItemRequestBody"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseMessageBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "journal-entries": {
        parameters: {
            query: {
                page?: string;
                size: string;
                enabled?: string;
                status?: string;
                is_group?: string;
                query?: string;
                orientation?: string;
                column?: string;
                parentId?: string;
            };
            header?: {
                Authorization?: string;
                "User-Session-Uuid"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginationResponsePaginationResultListJournalEntryDtoBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "create-journal-entry": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateJorunalEntryBody"];
            };
        };
        responses: {
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseDataJournalEntryDtoBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "journal-entry": {
        parameters: {
            query?: {
                query?: string;
                orientation?: string;
                column?: string;
                parentId?: string;
            };
            header?: {
                Authorization?: string;
                "User-Session-Uuid"?: string;
            };
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EntityResponseResultEntityJournalEntryDetailDtoBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "update-journal-entry-status": {
        parameters: {
            query?: never;
            header?: {
                Authorization?: string;
                "User-Session-Uuid"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateStatusWithEventBody"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseMessageBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "get-acconts": {
        parameters: {
            query?: {
                size?: string;
                status?: string;
                orientation?: string;
                column?: string;
                name?: string;
                is_credit_balance?: string;
                is_debit_balance?: string;
                is_group?: string;
                account_type?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseDataListListLedgerDtoBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "edit-ledger": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["LedgerData"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseMessageBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "create-ledger": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["LedgerData"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseDataLedgerDtoBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "get-ledger-detail": {
        parameters: {
            query?: {
                query?: string;
                orientation?: string;
                column?: string;
                parentId?: string;
            };
            header?: {
                Authorization?: string;
                "User-Session-Uuid"?: string;
            };
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EntityResponseResultEntityLedgerDetailDtoBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "get-general-ledger": {
        parameters: {
            query: {
                from_date: string;
                to_date: string;
                account?: string;
                voucher_no?: string;
                agains_voucher_no?: string;
                party_type?: string;
                party?: string;
                currency?: string;
                project?: string;
                cost_center?: string;
            };
            header?: {
                Authorization?: string;
                "User-Session-Uuid"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EntityResponseListGeneralLedgerEntryDtoBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "get-ledgers-tree-view": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseDataListTreeEntryDtoBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    modules: {
        parameters: {
            query?: {
                size?: string;
                status?: string;
                orientation?: string;
                column?: string;
                label?: string;
                workspace_id?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseDataListModuleDtoBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "edit-module": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ModuleData"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseMessageBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "create-module": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ModuleData"];
            };
        };
        responses: {
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseDataModuleDtoBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "module-detail": {
        parameters: {
            query?: {
                query?: string;
                orientation?: string;
                column?: string;
                parentId?: string;
            };
            header?: {
                Authorization?: string;
                "User-Session-Uuid"?: string;
            };
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EntityResponseResultEntityModuleDetailDtoBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "search-entities": {
        parameters: {
            query?: {
                size?: string;
                query?: string;
                load_modules?: boolean;
                load_entities?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseDataListEntityDtoBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "update-status-module": {
        parameters: {
            query?: never;
            header?: {
                Authorization?: string;
                "User-Session-Uuid"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateStatusWithEventBody"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseMessageBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    module: {
        parameters: {
            query?: {
                query?: string;
                orientation?: string;
                column?: string;
                parentId?: string;
            };
            header?: {
                Authorization?: string;
                "User-Session-Uuid"?: string;
            };
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EntityResponseResultEntityModuleDetailDtoBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    notification: {
        parameters: {
            query?: {
                size?: string;
                status?: string;
                orientation?: string;
                column?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseDataListListNotificationDtoBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "notification-count": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NotificationCountDtoBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "edit-order": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["OrderBody"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseMessageBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "create-order": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["OrderBody"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EntityResponseResultEntityOrderDtoBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    order: {
        parameters: {
            query: {
                party: string;
            };
            header?: {
                Authorization?: string;
                "User-Session-Uuid"?: string;
            };
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EntityResponseResultEntityOrderDetailDtoBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "export-order": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ExportDocumentData"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "update-order-status": {
        parameters: {
            query?: never;
            header?: {
                Authorization?: string;
                "User-Session-Uuid"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateStatusWithEventBody"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseMessageBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    orders: {
        parameters: {
            query: {
                page?: string;
                size: string;
                enabled?: string;
                status?: string;
                is_group?: string;
                query?: string;
                orientation?: string;
                column?: string;
                parentId?: string;
                code?: string;
                delivery_date?: string;
                posting_date?: string;
                party_id?: string;
                id?: string;
                pricing_id?: string;
                project_id?: string;
                cost_center_id?: string;
            };
            header?: never;
            path: {
                party: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginationResponsePaginationResultListOrderDtoBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "get party connections": {
        parameters: {
            query: {
                party: string;
            };
            header?: {
                Authorization?: string;
                "User-Session-Uuid"?: string;
            };
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseDataListPartyConnectionsBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    contacts: {
        parameters: {
            query?: {
                size?: string;
                status?: string;
                orientation?: string;
                column?: string;
                name?: string;
                party_id?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseDataListListContactDtoBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "edit-contact": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ContactData"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseMessageBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "create-contact": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ContactData"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseDataContactDtoBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "contact-bulk": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ContactBulkData"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseMessageBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    contact: {
        parameters: {
            query?: {
                query?: string;
                orientation?: string;
                column?: string;
                parentId?: string;
            };
            header?: {
                Authorization?: string;
                "User-Session-Uuid"?: string;
            };
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EntityResponseResultEntityContactDtoBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "get party by reference": {
        parameters: {
            query?: {
                query?: string;
                orientation?: string;
                column?: string;
                parentId?: string;
            };
            header?: {
                Authorization?: string;
                "User-Session-Uuid"?: string;
            };
            path: {
                party_type: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EntityResponseResultEntityListPartyDtoBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "get party references": {
        parameters: {
            query: {
                page?: string;
                size: string;
                enabled?: string;
                status?: string;
                is_group?: string;
                query?: string;
                orientation?: string;
                column?: string;
                parentId?: string;
            };
            header?: {
                Authorization?: string;
                "User-Session-Uuid"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginationResponsePaginationResultListPartyReferenceDtoBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "add party reference": {
        parameters: {
            query?: never;
            header?: {
                Authorization?: string;
                "User-Session-Uuid"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["RequestAddPartyReferenceBody"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseMessageBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "get party type references": {
        parameters: {
            query?: never;
            header?: {
                Authorization?: string;
                "User-Session-Uuid"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseDataListPartyTypeDtoBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "get party user types": {
        parameters: {
            query?: never;
            header?: {
                Authorization?: string;
                "User-Session-Uuid"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EntityResponseResultEntityListPartyTypeDtoBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "get-payments": {
        parameters: {
            query: {
                page?: string;
                size: string;
                enabled?: string;
                status?: string;
                is_group?: string;
                query?: string;
                orientation?: string;
                column?: string;
                parentId?: string;
                invoice_id?: string;
                posting_date?: string;
                payment_type?: string;
                amount?: string;
                code?: string;
                party_id?: string;
                account_paid_from_id?: string;
                account_paid_to_id?: string;
            };
            header?: {
                Authorization?: string;
                "User-Session-Uuid"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginationResponsePaginationResultListPaymentDtoBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "edit-payment": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PaymentBody"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseMessageBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "create-payment": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PaymentBody"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseDataPaymentDtoBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "payment-terms": {
        parameters: {
            query?: {
                size?: string;
                status?: string;
                orientation?: string;
                column?: string;
                name?: string;
                created_at?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseDataListListPaymentTermsDtoBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "edit-payment-terms": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PaymentTermsData"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseMessageBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "create-payment-terms": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PaymentTermsData"];
            };
        };
        responses: {
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseDataPaymentTermsDtoBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "payment-terms-template": {
        parameters: {
            query?: {
                size?: string;
                status?: string;
                orientation?: string;
                column?: string;
                name?: string;
                created_at?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseDataListListPaymentTermsTemplateDtoBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "edit-payment-terms-template": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PaymentTermsTemplateData"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseMessageBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "create-payment-terms-template": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PaymentTermsTemplateData"];
            };
        };
        responses: {
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseDataPaymentTermsTemplateDtoBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "payment-terms-template-details": {
        parameters: {
            query?: {
                query?: string;
                orientation?: string;
                column?: string;
                parentId?: string;
            };
            header?: {
                Authorization?: string;
                "User-Session-Uuid"?: string;
            };
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EntityResponseResultEntityPaymentTermsTemplateDtoBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    greet: {
        parameters: {
            query?: {
                name?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "update-status-payment-terms-template": {
        parameters: {
            query?: never;
            header?: {
                Authorization?: string;
                "User-Session-Uuid"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateStatusWithEventBody"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseMessageBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "payment-terms-details": {
        parameters: {
            query?: {
                query?: string;
                orientation?: string;
                column?: string;
                parentId?: string;
            };
            header?: {
                Authorization?: string;
                "User-Session-Uuid"?: string;
            };
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EntityResponseResultEntityPaymentTermsDtoBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "update-status-payment-terms": {
        parameters: {
            query?: never;
            header?: {
                Authorization?: string;
                "User-Session-Uuid"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateStatusWithEventBody"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseMessageBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "payment-term-lines": {
        parameters: {
            query?: {
                query?: string;
                orientation?: string;
                column?: string;
                parentId?: string;
            };
            header?: {
                Authorization?: string;
                "User-Session-Uuid"?: string;
            };
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseDataListPaymentTermsLineDtoBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "get payment actions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseDataInterface {}Body"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "get payment detail": {
        parameters: {
            query?: {
                query?: string;
                orientation?: string;
                column?: string;
                parentId?: string;
            };
            header?: {
                Authorization?: string;
                "User-Session-Uuid"?: string;
            };
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EntityResponseResultEntityPaymentDetailDtoBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "export-payment": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ExportDocumentData"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "get-parties-type": {
        parameters: {
            query?: never;
            header?: {
                Authorization?: string;
                "User-Session-Uuid"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseDataListPartyTypeDtoBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "payment-accouts": {
        parameters: {
            query?: never;
            header?: {
                Authorization?: string;
                "User-Session-Uuid"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseDataPaymentAccountsDtoBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "update payment state": {
        parameters: {
            query?: never;
            header?: {
                Authorization?: string;
                "User-Session-Uuid"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateStatusWithEventBody"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseMessageBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "get piano forms": {
        parameters: {
            query: {
                page?: string;
                size: string;
                enabled?: string;
                status?: string;
                is_group?: string;
                query?: string;
                orientation?: string;
                column?: string;
                parentId?: string;
            };
            header?: {
                Authorization?: string;
                "User-Session-Uuid"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginationResponsePaginationResultListPianoFormBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "create piano form": {
        parameters: {
            query?: never;
            header?: {
                "Accept-Language"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreatePianoBody"];
            };
        };
        responses: {
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseMessageBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "export data": {
        parameters: {
            query?: never;
            header?: {
                Authorization?: string;
                "User-Session-Uuid"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PianoExportRequestBody"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "get piano form": {
        parameters: {
            query?: {
                query?: string;
                orientation?: string;
                column?: string;
                parentId?: string;
            };
            header?: {
                Authorization?: string;
                "User-Session-Uuid"?: string;
            };
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EntityResponseResultEntityPianoFormBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    plugins: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PluginsResponseBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "add-plugin": {
        parameters: {
            query?: never;
            header?: {
                Authorization?: string;
                "User-Session-Uuid"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AddPluginRequestBody"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AddPluginResponseBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "get-plugin": {
        parameters: {
            query?: never;
            header?: {
                Authorization?: string;
                "User-Session-Uuid"?: string;
            };
            path: {
                plugin: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PluginDetailResponseBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "update-plugin-credentials": {
        parameters: {
            query?: never;
            header?: {
                Authorization?: string;
                "User-Session-Uuid"?: string;
            };
            path: {
                plugin: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateCredentialsPluginRequestBody"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseMessageBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    pricings: {
        parameters: {
            query: {
                page?: string;
                size: string;
                enabled?: string;
                status?: string;
                is_group?: string;
                query?: string;
                orientation?: string;
                column?: string;
                parentId?: string;
                id?: string;
                code?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginationResponsePaginationResultListPricingDtoBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "edit-pricing": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PricingData"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseMessageBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "create-pricing": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PricingData"];
            };
        };
        responses: {
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseDataPricingDtoBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    pricing: {
        parameters: {
            query?: {
                query?: string;
                orientation?: string;
                column?: string;
                parentId?: string;
            };
            header?: {
                Authorization?: string;
                "User-Session-Uuid"?: string;
            };
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EntityResponseResultEntityPricingDetailDtoBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "pricing-generate-po": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PricingDataRequestBody"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseMessageBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "pricing-generate-quotation": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PricingDataRequestBody"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseMessageBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "update-status-pricing": {
        parameters: {
            query?: never;
            header?: {
                Authorization?: string;
                "User-Session-Uuid"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateStatusWithEventBody"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseMessageBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    profiles: {
        parameters: {
            query?: {
                size?: string;
                status?: string;
                orientation?: string;
                column?: string;
                full_name?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseDataListListProfileDtoBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "get-profile-detail": {
        parameters: {
            query?: {
                query?: string;
                orientation?: string;
                column?: string;
                parentId?: string;
            };
            header?: {
                Authorization?: string;
                "User-Session-Uuid"?: string;
            };
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EntityResponseResultEntityProfileDtoBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "get-profile-session": {
        parameters: {
            query?: never;
            header?: {
                Authorization?: string;
                "User-Session-Uuid"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EntityResponseResultEntityProfileDtoBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "update-profile-session": {
        parameters: {
            query?: never;
            header?: {
                Authorization?: string;
                "User-Session-Uuid"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateProfileRequestBody"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseMessageBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    projects: {
        parameters: {
            query: {
                page?: string;
                size: string;
                enabled?: string;
                status?: string;
                is_group?: string;
                query?: string;
                orientation?: string;
                column?: string;
                parentId?: string;
            };
            header?: {
                Authorization?: string;
                "User-Session-Uuid"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginationResponsePaginationResultListProjectDtoBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "create-cost-project": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateProjectRequestBody"];
            };
        };
        responses: {
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseDataProjectDtoBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    project: {
        parameters: {
            query?: {
                query?: string;
                orientation?: string;
                column?: string;
                parentId?: string;
            };
            header?: {
                Authorization?: string;
                "User-Session-Uuid"?: string;
            };
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EntityResponseResultEntityProjectDtoBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "purchase-records": {
        parameters: {
            query: {
                page?: string;
                size: string;
                enabled?: string;
                status?: string;
                is_group?: string;
                query?: string;
                orientation?: string;
                column?: string;
                parentId?: string;
                invoice_date?: string;
                invoice_id?: string;
                supplier_id?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginationResponsePaginationResultListPurchaseRecordDtoBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "edit-purchase-record": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PurchaseRecordData"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseMessageBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "create-purchase-record": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PurchaseRecordData"];
            };
        };
        responses: {
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseDataPurchaseRecordDtoBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "purchase-record": {
        parameters: {
            query?: {
                query?: string;
                orientation?: string;
                column?: string;
                parentId?: string;
            };
            header?: {
                Authorization?: string;
                "User-Session-Uuid"?: string;
            };
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EntityResponseResultEntityPurchaseRecordDtoBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "purchase-record-export": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ExportDataRequestBody"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "export-purchase-record": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ExportDocumentData"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "update-status-purchase-record": {
        parameters: {
            query?: never;
            header?: {
                Authorization?: string;
                "User-Session-Uuid"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateStatusWithEventBody"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseMessageBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "create purchase order": {
        parameters: {
            query?: never;
            header?: {
                Authorization?: string;
                "User-Session-Uuid"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreatePurchaseOrderRequestBody"];
            };
        };
        responses: {
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EntityResponseResultEntityOrderDtoBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "edit-quotation": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["QuotationBody"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseMessageBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "create-quotation": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["QuotationBody"];
            };
        };
        responses: {
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseDataQuotationDtoBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    quotation: {
        parameters: {
            query: {
                party: string;
            };
            header?: {
                Authorization?: string;
                "User-Session-Uuid"?: string;
            };
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EntityResponseResultEntityQuotationDetailDtoBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "update-quotation-status": {
        parameters: {
            query?: never;
            header?: {
                Authorization?: string;
                "User-Session-Uuid"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateStatusWithEventBody"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseMessageBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    quotations: {
        parameters: {
            query: {
                page?: string;
                size: string;
                enabled?: string;
                status?: string;
                is_group?: string;
                query?: string;
                orientation?: string;
                column?: string;
                parentId?: string;
                valid_till?: string;
                posting_date?: string;
                party_id?: string;
                id?: string;
                project_id?: string;
                cost_center_id?: string;
                pricing_id?: string;
            };
            header?: never;
            path: {
                party: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginationResponsePaginationResultListQuotationDtoBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "edit-receipt": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ReceiptBody"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseMessageBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "create-receipt": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ReceiptBody"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseDataReceiptDtoBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "get-receipt-detail": {
        parameters: {
            query: {
                party: string;
            };
            header?: {
                Authorization?: string;
                "User-Session-Uuid"?: string;
            };
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EntityResponseResultEntityReceiptDetailDtoBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "export-receipt": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ExportDocumentData"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "update-receipt-state": {
        parameters: {
            query?: never;
            header?: {
                Authorization?: string;
                "User-Session-Uuid"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateStatusWithEventBody"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseMessageBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "get-receipts": {
        parameters: {
            query: {
                page?: string;
                size: string;
                enabled?: string;
                status?: string;
                is_group?: string;
                query?: string;
                orientation?: string;
                column?: string;
                parentId?: string;
                posting_date?: string;
                party_id?: string;
            };
            header?: never;
            path: {
                party: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginationResponsePaginationResultListReceiptDtoBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "get-bookings": {
        parameters: {
            query: {
                event_id?: string;
                customer_id?: string;
                court_id?: string;
                page?: string;
                size: string;
                enabled?: string;
                status?: string;
                is_group?: string;
                query?: string;
                orientation?: string;
                column?: string;
                parentId?: string;
            };
            header?: {
                Authorization?: string;
                "User-Session-Uuid"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginationResponsePaginationResultListBookingDtoBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "create booking": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateBookingBody"];
            };
        };
        responses: {
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseMessageBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "booking-slots": {
        parameters: {
            query: {
                court_id: string;
                from_date: string;
                to_date: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BookingScheduleBodyBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "get-booking": {
        parameters: {
            query?: {
                query?: string;
                orientation?: string;
                column?: string;
                parentId?: string;
            };
            header?: {
                Authorization?: string;
                "User-Session-Uuid"?: string;
            };
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EntityResponseResultEntityBookingDtoBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "update-paid-amount": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["BookingPaymentBody"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseMessageBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "booking-reschedule": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["BookingRescheduleBody"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseMessageBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "update-booking-batch": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateBookingBatchRequestBody"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseMessageBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "update-booking-status": {
        parameters: {
            query?: never;
            header?: {
                Authorization?: string;
                "User-Session-Uuid"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateStatusWithEventBody"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseMessageBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "validate-booking": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ValidateBookingData"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseDataValidateBookingDataBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "get-chart-dashboard-data": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ChartDataBody"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseDataChartDashboardDataBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "get-chart-data": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                chart: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ChartDataBody"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseDataListChartDataDtoBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "get-event-bookings": {
        parameters: {
            query: {
                page?: string;
                size: string;
                enabled?: string;
                status?: string;
                is_group?: string;
                query?: string;
                orientation?: string;
                column?: string;
                parentId?: string;
            };
            header?: {
                Authorization?: string;
                "User-Session-Uuid"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginationResponsePaginationResultListEventBookingDtoBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "edit-event": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["EventBookingData"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseMessageBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "create-event-booking": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["EventBookingData"];
            };
        };
        responses: {
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseDataEventBookingDtoBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "delete-event-batch": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DeleteEventBatchRequestBody"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseMessageBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "get-event-booking": {
        parameters: {
            query?: {
                query?: string;
                orientation?: string;
                column?: string;
                parentId?: string;
            };
            header?: {
                Authorization?: string;
                "User-Session-Uuid"?: string;
            };
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EntityResponseResultEntityEventBookingDetailBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "event-update-status": {
        parameters: {
            query?: never;
            header?: {
                Authorization?: string;
                "User-Session-Uuid"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateStatusWithEventBody"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseMessageBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "get roles": {
        parameters: {
            query: {
                page?: string;
                size: string;
                enabled?: string;
                status?: string;
                is_group?: string;
                query?: string;
                orientation?: string;
                column?: string;
                parentId?: string;
            };
            header?: {
                Authorization?: string;
                "User-Session-Uuid"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginationResponsePaginationResultListRoleDtoBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "edit-role": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["RoleData"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseMessageBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "create-role": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["RoleData"];
            };
        };
        responses: {
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseDataRoleDtoBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "get role": {
        parameters: {
            query?: {
                query?: string;
                orientation?: string;
                column?: string;
                parentId?: string;
            };
            header?: {
                Authorization?: string;
                "User-Session-Uuid"?: string;
            };
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EntityResponseResultEntityRoleDtoBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "get entity actions": {
        parameters: {
            query?: never;
            header?: {
                Authorization?: string;
                "User-Session-Uuid"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EntityResponseResultEntityListEntityActionsDtoBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "update role permision action": {
        parameters: {
            query?: never;
            header?: {
                Authorization?: string;
                "User-Session-Uuid"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["EditRolePermissionActionsBody"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseMessageBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "get role definitions": {
        parameters: {
            query: {
                page?: string;
                size: string;
                enabled?: string;
                status?: string;
                is_group?: string;
                query?: string;
                orientation?: string;
                column?: string;
                parentId?: string;
            };
            header?: {
                Authorization?: string;
                "User-Session-Uuid"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginationResponsePaginationResultListRoleActionDtoBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "sales-records": {
        parameters: {
            query: {
                page?: string;
                size: string;
                enabled?: string;
                status?: string;
                is_group?: string;
                query?: string;
                orientation?: string;
                column?: string;
                parentId?: string;
                invoice_date?: string;
                invoice_id?: string;
                customer_id?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginationResponsePaginationResultListSalesRecordDtoBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "edit-sales-record": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SalesRecordData"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseMessageBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "create-sales-record": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SalesRecordData"];
            };
        };
        responses: {
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseDataSalesRecordDtoBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "sales-record": {
        parameters: {
            query?: {
                query?: string;
                orientation?: string;
                column?: string;
                parentId?: string;
            };
            header?: {
                Authorization?: string;
                "User-Session-Uuid"?: string;
            };
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EntityResponseResultEntitySalesRecordDtoBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "sales-record-export": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ExportDataRequestBody"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "update-status-sales-record": {
        parameters: {
            query?: never;
            header?: {
                Authorization?: string;
                "User-Session-Uuid"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateStatusWithEventBody"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseMessageBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "serial-nos": {
        parameters: {
            query: {
                page?: string;
                size: string;
                enabled?: string;
                status?: string;
                is_group?: string;
                query?: string;
                orientation?: string;
                column?: string;
                parentId?: string;
                serial_no?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginationResponsePaginationResultListSerialNoDtoBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "serial-no": {
        parameters: {
            query?: {
                query?: string;
                orientation?: string;
                column?: string;
                parentId?: string;
            };
            header?: {
                Authorization?: string;
                "User-Session-Uuid"?: string;
            };
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EntityResponseResultEntitySerialNoDtoBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "serial-no-transactions": {
        parameters: {
            query: {
                from_date: string;
                to_date: string;
                voucher_code?: string;
                serial_no?: string;
                batch_bundle_no?: string;
                item_id?: string;
                warehouse_id?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseDataListSerialNoTransactionDtoBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    stage: {
        parameters: {
            query: {
                size?: string;
                status?: string;
                orientation?: string;
                column?: string;
                entity_id: string;
                name?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseDataListListStageDtoBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "edit-stage": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["StageData"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseMessageBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "create-stage": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["StageData"];
            };
        };
        responses: {
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseDataStageDtoBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "delete-stage": {
        parameters: {
            query: {
                id: string;
                party_type?: string;
                " required:"?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseMessageBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "stage-transition": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["StageTransitionData"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseMessageBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "stock-entries": {
        parameters: {
            query: {
                page?: string;
                size: string;
                enabled?: string;
                status?: string;
                is_group?: string;
                query?: string;
                orientation?: string;
                column?: string;
                parentId?: string;
            };
            header?: {
                Authorization?: string;
                "User-Session-Uuid"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginationResponsePaginationResultListStockEntryDtoBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "edit-stock-entry": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["StockEntryBody"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseMessageBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "create-stock-entry": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["StockEntryBody"];
            };
        };
        responses: {
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseDataStockEntryDtoBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "stock-entry": {
        parameters: {
            query?: {
                query?: string;
                orientation?: string;
                column?: string;
                parentId?: string;
            };
            header?: {
                Authorization?: string;
                "User-Session-Uuid"?: string;
            };
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EntityResponseResultEntityStockEntryDtoBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "update-stock-entry-status": {
        parameters: {
            query?: never;
            header?: {
                Authorization?: string;
                "User-Session-Uuid"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateStatusWithEventBody"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseMessageBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "get-stock-balance-report": {
        parameters: {
            query?: {
                from_date?: string;
                to_date?: string;
                item?: string;
                warehouse?: string;
            };
            header?: {
                Authorization?: string;
                "User-Session-Uuid"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EntityResponseListStockBalanceEntryDtoBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "get-stock_ledger-report": {
        parameters: {
            query: {
                from_date: string;
                to_date: string;
                voucher_no?: string;
                item?: string;
                warehouse?: string;
            };
            header?: {
                Authorization?: string;
                "User-Session-Uuid"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EntityResponseListStockLedgerEntryDtoBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "get-items": {
        parameters: {
            query: {
                page?: string;
                size: string;
                enabled?: string;
                status?: string;
                is_group?: string;
                query?: string;
                orientation?: string;
                column?: string;
                parentId?: string;
            };
            header?: {
                Authorization?: string;
                "User-Session-Uuid"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginationResponsePaginationResultListItemDtoBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "edit-item": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["EditItemRequestBody"];
            };
        };
        responses: {
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseMessageBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "create-item": {
        parameters: {
            query?: never;
            header?: {
                Authorization?: string;
                "User-Session-Uuid"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateItemData"];
            };
        };
        responses: {
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EntityResponseItemDtoBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "item-actions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseDataInterface {}Body"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "edit-item-inventory-setting": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ItemInventoryData"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseMessageBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "item-inventory-setting": {
        parameters: {
            query?: {
                query?: string;
                orientation?: string;
                column?: string;
                parentId?: string;
            };
            header?: {
                Authorization?: string;
                "User-Session-Uuid"?: string;
            };
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseDataItemInventoryDtoBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "item-attributes": {
        parameters: {
            query: {
                page?: string;
                size: string;
                enabled?: string;
                status?: string;
                is_group?: string;
                query?: string;
                orientation?: string;
                column?: string;
                parentId?: string;
            };
            header?: {
                Authorization?: string;
                "User-Session-Uuid"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginationResponsePaginationResultListItemAttributeDtoBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "create-item-attribute": {
        parameters: {
            query?: never;
            header?: {
                Authorization?: string;
                "User-Session-Uuid"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateItemAttributeRequestBody"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EntityResponseItemAttributeDtoBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "update-item-attribute-value": {
        parameters: {
            query?: never;
            header?: {
                Authorization?: string;
                "User-Session-Uuid"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpsertItemAttributeValueRequestBody"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseMessageBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "create-item-attribute-value": {
        parameters: {
            query?: never;
            header?: {
                Authorization?: string;
                "User-Session-Uuid"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpsertItemAttributeValueRequestBody"];
            };
        };
        responses: {
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseMessageBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "item-attribute": {
        parameters: {
            query?: {
                query?: string;
                orientation?: string;
                column?: string;
                parentId?: string;
            };
            header?: {
                Authorization?: string;
                "User-Session-Uuid"?: string;
            };
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EntityResponseResultEntityItemAttributeDtoBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "get-item-prices": {
        parameters: {
            query: {
                page?: string;
                size: string;
                enabled?: string;
                status?: string;
                is_group?: string;
                query?: string;
                orientation?: string;
                column?: string;
                parentId?: string;
            };
            header?: {
                Authorization?: string;
                "User-Session-Uuid"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginationResponsePaginationResultListItemPriceDtoBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "edit-item-price": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["EditItemPriceRequestBody"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseMessageBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "create-item-price": {
        parameters: {
            query?: never;
            header?: {
                Authorization?: string;
                "User-Session-Uuid"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ItemPriceData"];
            };
        };
        responses: {
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseDataItemPriceDtoBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "associated-actions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseDataInterface {}Body"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "get-item-price-detail": {
        parameters: {
            query?: {
                query?: string;
                orientation?: string;
                column?: string;
                parentId?: string;
            };
            header?: {
                Authorization?: string;
                "User-Session-Uuid"?: string;
            };
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EntityResponseResultEntityItemPriceDtoBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "get-item-prices-for-order": {
        parameters: {
            query: {
                query?: string;
                orientation?: string;
                column?: string;
                parentId?: string;
                currency: string;
                isBuying?: boolean;
                isSelling?: boolean;
                enabled?: string;
                price_list_id?: string;
            };
            header?: {
                Authorization?: string;
                "User-Session-Uuid"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EntityResponseResultEntityListItemPriceDtoBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "get-list-by-item": {
        parameters: {
            query: {
                page?: string;
                size: string;
                enabled?: string;
                status?: string;
                is_group?: string;
            };
            header?: {
                Authorization?: string;
                "User-Session-Uuid"?: string;
            };
            path: {
                item_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginationResponsePaginationResultListItemPriceDtoBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "edit-item-to-warehouse": {
        parameters: {
            query?: never;
            header?: {
                Authorization?: string;
                "User-Session-Uuid"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AddStockLevelRequestBody"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseMessageBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "add-item-to-warehouse": {
        parameters: {
            query?: never;
            header?: {
                Authorization?: string;
                "User-Session-Uuid"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AddStockLevelRequestBody"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseMessageBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "get-item-stock-levels": {
        parameters: {
            query: {
                page?: string;
                size: string;
                enabled?: string;
                status?: string;
                is_group?: string;
                query?: string;
                orientation?: string;
                column?: string;
                parentId?: string;
            };
            header?: {
                Authorization?: string;
                "User-Session-Uuid"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginationResponsePaginationResultListStockLevelDtoBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "get-warehouse-stock-levels": {
        parameters: {
            query: {
                page?: string;
                size: string;
                enabled?: string;
                status?: string;
                is_group?: string;
                query?: string;
                orientation?: string;
                column?: string;
                parentId?: string;
            };
            header?: {
                Authorization?: string;
                "User-Session-Uuid"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginationResponsePaginationResultListStockLevelDtoBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "get-price-lists": {
        parameters: {
            query: {
                query?: string;
                orientation?: string;
                column?: string;
                parentId?: string;
                page?: string;
                size: string;
                enabled?: string;
                status?: string;
                is_group?: string;
                is_selling?: string;
                is_buying?: string;
            };
            header?: {
                Authorization?: string;
                "User-Session-Uuid"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginationResponsePaginationResultListPriceListDtoBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "edit-price-list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["EditPriceListRequestBody"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseMessageBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "create-price-list": {
        parameters: {
            query?: never;
            header?: {
                Authorization?: string;
                "User-Session-Uuid"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PriceListData"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseMessageBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "get-price-list-detail": {
        parameters: {
            query?: {
                query?: string;
                orientation?: string;
                column?: string;
                parentId?: string;
            };
            header?: {
                Authorization?: string;
                "User-Session-Uuid"?: string;
            };
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EntityResponseResultEntityPriceListDtoBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "get-variant-from-item": {
        parameters: {
            query: {
                page?: string;
                size: string;
                enabled?: string;
                status?: string;
                is_group?: string;
                query?: string;
                orientation?: string;
                column?: string;
                parentId?: string;
            };
            header?: {
                Authorization?: string;
                "User-Session-Uuid"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginationResponsePaginationResultListItemVariantDtoBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "create-item-variant": {
        parameters: {
            query?: never;
            header?: {
                Authorization?: string;
                "User-Session-Uuid"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateItemVariantRequestBody"];
            };
        };
        responses: {
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseMessageBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "get-item-detail": {
        parameters: {
            query?: {
                query?: string;
                orientation?: string;
                column?: string;
                parentId?: string;
            };
            header?: {
                Authorization?: string;
                "User-Session-Uuid"?: string;
            };
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EntityResponseResultEntityItemDetailDtoBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "get-warehouses": {
        parameters: {
            query: {
                page?: string;
                size: string;
                enabled?: string;
                status?: string;
                is_group?: string;
                query?: string;
                orientation?: string;
                column?: string;
                parentId?: string;
            };
            header?: {
                Authorization?: string;
                "User-Session-Uuid"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginationResponsePaginationResultListWareHouseDtoBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "edit-warehouse": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["EditWarehouseRequestBody"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseMessageBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "create-warehouse": {
        parameters: {
            query?: never;
            header?: {
                Authorization?: string;
                "User-Session-Uuid"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateWareHouseRequestBody"];
            };
        };
        responses: {
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseMessageBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "get-warehouse-detail": {
        parameters: {
            query?: {
                query?: string;
                orientation?: string;
                column?: string;
                parentId?: string;
            };
            header?: {
                Authorization?: string;
                "User-Session-Uuid"?: string;
            };
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EntityResponseResultEntityWareHouseDtoBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "get-warehouses-tree-view": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseDataListTreeEntryDtoBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "get suppliers": {
        parameters: {
            query: {
                page?: string;
                size: string;
                enabled?: string;
                status?: string;
                is_group?: string;
                query?: string;
                orientation?: string;
                column?: string;
                parentId?: string;
            };
            header?: {
                Authorization?: string;
                "User-Session-Uuid"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginationResponsePaginationResultListSupplierDtoBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "edit-supplier": {
        parameters: {
            query?: never;
            header?: {
                Authorization?: string;
                "User-Session-Uuid"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SupplierData"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseMessageBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "create supplier": {
        parameters: {
            query?: never;
            header?: {
                Authorization?: string;
                "User-Session-Uuid"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SupplierData"];
            };
        };
        responses: {
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseDataSupplierDtoBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "get supplier": {
        parameters: {
            query?: {
                query?: string;
                orientation?: string;
                column?: string;
                parentId?: string;
            };
            header?: {
                Authorization?: string;
                "User-Session-Uuid"?: string;
            };
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EntityResponseResultEntitySupplierDtoBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "update-status-supplier": {
        parameters: {
            query?: never;
            header?: {
                Authorization?: string;
                "User-Session-Uuid"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateStatusWithEventBody"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseMessageBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "tax-and-charges": {
        parameters: {
            query: {
                id: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseDataListTaxAndChargeLineDtoBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "edit-tax-and-charge": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["EditTaxLineRequestBody"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseMessageBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "add-tax-and-charge": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AddTaxLineRequestBody"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseMessageBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "delete-tax-and-charge": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DeleteTaxLineRequestBody"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseMessageBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "terms-and-conditions": {
        parameters: {
            query?: {
                size?: string;
                status?: string;
                orientation?: string;
                column?: string;
                name?: string;
                created_at?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseDataListListTermsAndConditionsDtoBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "edit-terms-and-conditions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TermsAndConditionsData"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseMessageBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "create-terms-and-conditions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TermsAndConditionsData"];
            };
        };
        responses: {
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseDataTermsAndConditionsDtoBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "terms-and-conditions-details": {
        parameters: {
            query?: {
                query?: string;
                orientation?: string;
                column?: string;
                parentId?: string;
            };
            header?: {
                Authorization?: string;
                "User-Session-Uuid"?: string;
            };
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EntityResponseResultEntityTermsAndConditionsDtoBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "update-status-terms-and-conditions": {
        parameters: {
            query?: never;
            header?: {
                Authorization?: string;
                "User-Session-Uuid"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateStatusWithEventBody"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseMessageBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    uom: {
        parameters: {
            query?: {
                query?: string;
                orientation?: string;
                column?: string;
                parentId?: string;
            };
            header?: {
                Authorization?: string;
                "User-Session-Uuid"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UOMsResponseBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "create user": {
        parameters: {
            query?: never;
            header?: {
                Authorization?: string;
                "User-Session-Uuid"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateUserRequestBody"];
            };
        };
        responses: {
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseMessageBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    workspace: {
        parameters: {
            query?: {
                size?: string;
                status?: string;
                orientation?: string;
                column?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseDataListListWorkSpaceDtoBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "edit-workspace": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["WorkSpaceData"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseMessageBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "create-workspace": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["WorkSpaceData"];
            };
        };
        responses: {
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseDataWorkSpaceDtoBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "workspace-detail": {
        parameters: {
            query?: {
                query?: string;
                orientation?: string;
                column?: string;
                parentId?: string;
            };
            header?: {
                Authorization?: string;
                "User-Session-Uuid"?: string;
            };
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EntityResponseResultEntityWorkSpaceDtoBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "update-status-workspace": {
        parameters: {
            query?: never;
            header?: {
                Authorization?: string;
                "User-Session-Uuid"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateStatusWithEventBody"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseMessageBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
}
