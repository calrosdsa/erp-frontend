package main

import (
	"fmt"

	"gorm.io/driver/postgres"
	"gorm.io/gen"
	"gorm.io/gen/field"
	"gorm.io/gorm"
)

func main() {
	g := gen.NewGenerator(gen.Config{
		OutPath: "./app/core/connection/gen",
		Mode:    gen.WithoutContext | gen.WithDefaultQuery | gen.WithQueryInterface, // generate mode
		// WithUnitTest: true,
	})
	dsn := fmt.Sprintf("host=%s user=%s password=%s dbname=%s port=%d sslmode=disable", "localhost",
		"postgres", "postgres", "erp_dev", 5432)
	gormdb, _ := gorm.Open(postgres.Open(dsn))
	g.UseDB(gormdb) // reuse your gorm db

	// Generate basic type-safe DAO API for struct `model.User` following conventions

	company := g.GenerateModel("companies")
	partype := g.GenerateModel("party_types")
	party := g.GenerateModelAs("parties", "Party", gen.FieldRelate(field.BelongsTo, "PartyType", partype, &field.RelateConfig{
		GORMTag: field.GormTag{"foreignKey": []string{"PartyTypeCode"}, "references": []string{"Code"}},
	}))

	taxes := g.GenerateModelAs("taxes", "Tax", gen.FieldRelate(field.BelongsTo, "Company", company, &field.RelateConfig{
		GORMTag: field.GormTag{"foreignKey": []string{"CompanyID"}, "references": []string{"ID"}},
	}))
	// supplierG := g.GenerateModel("supplier_groups",)
	supplierGroup := g.GenerateModelAs("supplier_groups", "SupplierGroup",
		gen.FieldRelate(field.BelongsTo, "Company", company, &field.RelateConfig{
			GORMTag: field.GormTag{"foreignKey": []string{"CompanyID"}, "references": []string{"ID"}},
		}),
		gen.FieldRelate(field.BelongsTo, "Party", party, &field.RelateConfig{
			GORMTag: field.GormTag{"foreignKey": []string{"ID"}, "references": []string{"ID"}},
		}),
		// gen.FieldRelate(field.BelongsTo, "SupplierGroup",supplierG , &field.RelateConfig{
		// 	GORMTag: field.GormTag{"foreignKey": []string{"ParentID"}, "references": []string{"ID"}},
		// }),
	)
	supplier := g.GenerateModelAs("suppliers", "Supplier",
		gen.FieldRelate(field.BelongsTo, "Company", company, &field.RelateConfig{
			GORMTag: field.GormTag{"foreignKey": []string{"CompanyID"}, "references": []string{"ID"}},
		}),
		gen.FieldRelate(field.BelongsTo, "Party", party, &field.RelateConfig{
			GORMTag: field.GormTag{"foreignKey": []string{"ID"}, "references": []string{"ID"}},
		}),
		gen.FieldRelate(field.BelongsTo, "SupplierGroup", supplierGroup, &field.RelateConfig{
			GORMTag: field.GormTag{"foreignKey": []string{"SupplierGroupID"}, "references": []string{"ID"}},
		}),
	)

	profiles := g.GenerateModelAs("profiles", "Profile", gen.FieldRelate(field.BelongsTo, "Party", party, &field.RelateConfig{
		GORMTag: field.GormTag{"foreignKey": []string{"ID"}, "references": []string{"ID"}},
	}))

	g.ApplyBasic(
		partype,
		party,
		company,
		taxes,
		profiles,

		supplierGroup,
		supplier,
	)
	// g.ApplyBasic(
	// 	// Generate structs from all tables of current database
	// 	g.GenerateAllTable()...,
	// )
	// Generate the code
	g.Execute()
}
