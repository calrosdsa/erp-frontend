/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/account": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get user account */
        get: operations["get-account"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/account/password": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Update password */
        put: operations["update-password"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/account/sessions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get user sessions */
        get: operations["get-sessions"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/account/sign-in": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Sign in a user */
        post: operations["sign-in"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/accounting/tax": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Taxes */
        get: operations["get-taxes"];
        put?: never;
        /** Create Tax */
        post: operations["create-tax"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/accounting/tax/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Tax Detail */
        get: operations["get-tax-detail"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/client": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get client Profile */
        get: operations["get-client-profile"];
        /** Update client Profile */
        put: operations["update-client-profile"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/company": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get User companies */
        get: operations["companies"];
        put?: never;
        /** Create Company */
        post: operations["create-company"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/company/detail/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get company Detial */
        get: operations["company-detail"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/company/user/companies": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get user companies */
        get: operations["user-companies"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/company/valid/parent/companies": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Valid Parent Companies */
        get: operations["valid-parent-companies"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/company/{uuid}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get company by uuid */
        get: operations["get-company-by-uuid"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cuatropf/subscription/{companyUuid}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Cuatropf Subscription */
        post: operations["cuatropf-subscription"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/currency": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get currencies */
        get: operations["get currencies"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/greeting/{name}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get greeting by name */
        get: operations["get-greeting-by-name"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/group": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create Group */
        post: operations["create group"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/group/descendents/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get group descendents */
        get: operations["get group descendents"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/group/detail/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieve group */
        get: operations["get group"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/group/{party}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieve groups by party code */
        get: operations["get groups by party code"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/order/{party}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieve orders by party code */
        get: operations["get orders by party code"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/party/type/users": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Party User Types */
        get: operations["get party user types"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/payment/webhook": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Payment square wenhook */
        post: operations["payment-webhook"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/plugin": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get available plugins */
        get: operations["plugins"];
        put?: never;
        /** Add plugin */
        post: operations["add-plugin"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/plugin/{plugin}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get plugin from company */
        get: operations["get-plugin"];
        /** Update plugin credentials */
        put: operations["update-plugin-credentials"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/purchase/order/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create purchase order */
        post: operations["create purchase order"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/role": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get roles */
        get: operations["get roles"];
        put?: never;
        /** Create Role */
        post: operations["create role"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/role/detail/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get role */
        get: operations["get role"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/role/entity-actions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get entity actions */
        get: operations["get entity actions"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/role/permision/actions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Update Permission Actions */
        post: operations["update role permision action"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/role/role-definitions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get role definitions */
        get: operations["get role definitions"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/selling/salesorder/client": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get client sales orders */
        get: operations["client-sales-orders"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/selling/salesorder/{code}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get sales order detail */
        get: operations["sale-order-detail"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/square/subscription/cancel": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Cancel square subscription */
        post: operations["cancel-square-subscription"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/square/test": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Test Event */
        get: operations["test-event"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/square/{uuid}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get square catalog */
        get: operations["get-catalog-square"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/square/{uuid}/{object_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get square object */
        get: operations["get-object-square"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/stock/item": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Items
         * @description Retrieve Items
         */
        get: operations["get-items"];
        /** Update item */
        put: operations["update-item"];
        /** Create item */
        post: operations["create-item"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/stock/item-group": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Item groups */
        get: operations["item-groups"];
        put?: never;
        /** Create Item group */
        post: operations["create-item-group"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/stock/item-group/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get item group detail */
        get: operations["item-group-detail"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/stock/item/item-attribute": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Item attributes */
        get: operations["item-attributes"];
        put?: never;
        /** Create item attribute */
        post: operations["create-item-attribute"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/stock/item/item-attribute/item-attribute-value": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Update Item Attribute Value */
        put: operations["update-item-attribute-value"];
        /** Create Item Attribute Value */
        post: operations["create-item-attribute-value"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/stock/item/item-attribute/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Item attribute */
        get: operations["item-attribute"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/stock/item/item-price": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Item Prices
         * @description Retrieve Item Prices
         */
        get: operations["get-item-prices"];
        /** Update item price */
        put: operations["update-item-price"];
        /** Create item price */
        post: operations["create-item-price"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/stock/item/item-price/detail/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Item Price
         * @description Retrieve Item Price Datail
         */
        get: operations["get-item-price-detail"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/stock/item/item-price/order": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Item Price For Order */
        get: operations["get-item-prices-for-order"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/stock/item/item-price/{itemCode}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get List by item
         * @description Retrieve Item Prices by Item Code
         */
        get: operations["get-list-by-item"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/stock/item/level": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Edit item to warehouse */
        put: operations["edit-item-to-warehouse"];
        /** Add item to warehouse */
        post: operations["add-item-to-warehouse"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/stock/item/level/item": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieve item stock levels */
        get: operations["get-item-stock-levels"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/stock/item/level/warehouse": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieve warehouse stock levels */
        get: operations["get-warehouse-stock-levels"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/stock/item/price-list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieve Price List items */
        get: operations["get-price-lists"];
        /** Update item price list */
        put: operations["update-item-price-list"];
        /** Create price list */
        post: operations["create-price-list"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/stock/item/price-list/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieve Price List Detail */
        get: operations["get-price-list-detail"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/stock/item/variant": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get variant from items */
        get: operations["get-variant-from-item"];
        put?: never;
        /** Create item variant */
        post: operations["create-item-variant"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/stock/item/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieve item detail base on code */
        get: operations["get-item-detail"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/stock/warehouse": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Warehouses */
        get: operations["get-warehouses"];
        put?: never;
        /** Create Warehouse */
        post: operations["create-warehouse"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/stock/warehouse/detail/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Warehouse Detail */
        get: operations["get-warehouse-detail"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/supplier": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieve suppliers */
        get: operations["get suppliers"];
        put?: never;
        /** Create supplier */
        post: operations["create supplier"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/supplier/detail/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieve supplier */
        get: operations["get supplier"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/teclumobity/item-price": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Retrieve item price */
        post: operations["get-item-price"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/teclumobity/order": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create Order */
        post: operations["create-order"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/uom": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieve UOMs (Units of Measure) */
        get: operations["uom"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/user/profile": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get company profile users */
        get: operations["get company user profiles"];
        put?: never;
        /** Create User */
        post: operations["create user"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/user/profile/detail/${id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get profile detail */
        get: operations["get profile detail"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        AccountResponseBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            company: components["schemas"]["CompanyDto"];
            profile: components["schemas"]["ProfileDto"];
            role: components["schemas"]["RoleDto"];
            role_actions: components["schemas"]["RoleActionDto"][];
            user: components["schemas"]["UserDto"];
        };
        Action: {
            entity: components["schemas"]["Entity"];
            /** Format: int64 */
            entity_id: number;
            /** Format: int64 */
            id: number;
            name: string;
        };
        ActionDto: {
            /** Format: int64 */
            entity_id: number;
            /** Format: int64 */
            id: number;
            name: string;
        };
        ActionSelected: {
            /** Format: int64 */
            actionId: number;
            actionName: string;
            selected: boolean;
        };
        AddPluginRequestBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            plugin: string;
        };
        AddPluginResponseBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            company_plugin: components["schemas"]["CompanyPlugins"];
        };
        AddStockLevelRequestBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            enabled: boolean;
            /** Format: int64 */
            itemId: number;
            /** Format: int64 */
            outOfStockThreshold: number;
            /** Format: int64 */
            stock: number;
            /** Format: int64 */
            warehouseId: number;
        };
        Address: {
            City: string;
            Company: string;
            CountryCode: string;
            /** Format: date-time */
            CreatedAt: string;
            DeletedAt?: components["schemas"]["DeletedAt"];
            FullName: string;
            /** Format: int64 */
            ID: number;
            IdentificationNumber: string;
            PhoneNumber: string;
            PostalCode: string;
            Province: string;
            StreetLine1: string;
            StreetLine2: string;
            /** Format: date-time */
            UpdatedAt: string;
        };
        Amount: {
            /** Format: int64 */
            amount: number;
            currency: string;
        };
        ApplicationDetailsStruct: {
            application_id?: string;
            square_product?: string;
        };
        BillingData: {
            address: string;
            city: string;
            country: string;
            estado: string;
            postalCode: string;
            taxIdNumber: string;
        };
        CardDetailsStruct: {
            avs_status?: string;
            card?: components["schemas"]["CardStruct"];
            card_payment_timeline?: components["schemas"]["CardPaymentTimelineStruct"];
            cvv_status?: string;
            entry_method?: string;
            statement_description?: string;
            status?: string;
        };
        CardPaymentTimelineStruct: {
            /** Format: date-time */
            authorized_at?: string;
            /** Format: date-time */
            captured_at?: string;
        };
        CardStruct: {
            bin?: string;
            card_brand?: string;
            card_type?: string;
            /** Format: int64 */
            exp_month?: number;
            /** Format: int64 */
            exp_year?: number;
            fingerprint?: string;
            last_4?: string;
            prepaid_type?: string;
        };
        Client: {
            ClientKeyValueData: components["schemas"]["ClientKeyValueData"][];
            Code: string;
            Company: components["schemas"]["Company"];
            /** Format: int64 */
            CompanyID: number;
            CountryCode: string;
            /** Format: date-time */
            CreatedAt: string;
            DeletedAt?: components["schemas"]["DeletedAt"];
            EmailAddress: string;
            FamilyName: string;
            GivenName: string;
            /** Format: int64 */
            ID: number;
            OrganizationName: string;
            PhoneNumber: string;
            /** Format: date-time */
            UpdatedAt: string;
            /** Format: int64 */
            UserID: number;
            Uuid: string;
        };
        ClientKeyValueData: {
            /** Format: int64 */
            ID?: number;
            /** Format: int64 */
            baseId?: number;
            key: string;
            value: string;
        };
        ClientRequestDto: {
            companyName: string;
            country?: components["schemas"]["Country"];
            deleteAt?: components["schemas"]["DeletedAt"];
            email: string;
            familyName: string;
            givenName: string;
            keyValues?: components["schemas"]["ClientKeyValueData"][];
            metadata?: string;
            phoneNumber: string;
            plugins?: components["schemas"]["CompanyPlugins"][];
        };
        Company: {
            code: string;
            /** Format: date-time */
            created_at: string;
            deleted_at: components["schemas"]["DeletedAt"];
            /** Format: int64 */
            id: number;
            is_parent: boolean;
            logo: string | null;
            name: string;
            /** Format: int32 */
            ordinal: number;
            /** Format: int64 */
            parent_id: number | null;
            site_url: string | null;
            /** Format: date-time */
            updated_at: string | null;
            uuid: string;
        };
        CompanyDto: {
            /** Format: date-time */
            created_at: string;
            logo: string | null;
            name: string;
            /** Format: int64 */
            ordinal: number;
            site_url: string | null;
            uuid: string;
        };
        CompanyPlugins: {
            /** Format: int64 */
            CompanyID?: number;
            Credentials?: string;
            Plugin: string;
        };
        Country: {
            code: string;
            label?: string;
            phone?: string;
        };
        CreateCompanyRequestBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            name: string;
            /** Format: int64 */
            parentId?: number | null;
        };
        CreateGroupRequestBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            enabled: boolean;
            is_group: boolean;
            name: string;
            parent?: components["schemas"]["GroupDto"];
            party_type_code: string;
        };
        CreateItemAttributeRequestBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            name: string;
            values: components["schemas"]["ItemAttributeValueDto"][];
        };
        CreateItemGroupRequestBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            name: string;
        };
        CreateItemPriceRequestBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            itemPrice: components["schemas"]["ItemPriceStruct"];
            plugins: components["schemas"]["PluginDto"][];
        };
        CreateItemRequestBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            item: components["schemas"]["ItemDto"];
        };
        CreateItemVariantRequestBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            itemVariant: components["schemas"]["ItemVariantDto"];
        };
        CreatePriceListRequestBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            currency: string;
            isBuying: boolean;
            isSelling: boolean;
            name: string;
        };
        CreatePurchaseOrderRequestBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            currency: components["schemas"]["CurrencyDto"];
            /** Format: date-time */
            delivery_date?: string | null;
            lines: components["schemas"]["OrderLineRequest"][];
            name: string;
            supplier: components["schemas"]["SupplierDto"];
        };
        CreateRoleRequestBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            description: string;
            name: string;
        };
        CreateSupplierRequestBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            enabled: boolean;
            group: components["schemas"]["GroupDto"];
            name: string;
        };
        CreateTaxRequestBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            enabled: boolean;
            name: string;
            /** Format: double */
            value: number;
        };
        CreateUserRequestBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            companyIds?: number[];
            /** Format: email */
            email: string;
            familyName: string;
            givenName: string;
            keyValueData?: components["schemas"]["KeyValueData"][];
            partyCode: string;
            phoneNumber?: string;
            /** Format: int64 */
            roleId: number;
        };
        CreateWareHouseRequestBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            enabled?: boolean;
            name: string;
            /** Format: int64 */
            parentId?: number | null;
        };
        CuatropfSubscriptionRequestBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            companyName: string;
            country?: components["schemas"]["Country"];
            deleteAt?: components["schemas"]["DeletedAt"];
            email: string;
            familyName: string;
            givenName: string;
            keyValues?: components["schemas"]["ClientKeyValueData"][];
            metadata?: string;
            phoneNumber: string;
            plugins?: components["schemas"]["CompanyPlugins"][];
        };
        CurrencyDto: {
            code: string;
        };
        DataStruct: {
            id?: string;
            object?: components["schemas"]["ObjectStruct"];
            type?: string;
        };
        DeletedAt: {
            /** Format: date-time */
            Time: string;
            Valid: boolean;
        };
        EditClientRequestBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            familyName: string;
            givenName: string;
            organizationName: string;
            phoneNumber: components["schemas"]["PhoneNumber"];
        };
        EditRolePermissionActionsBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actionSelecteds: components["schemas"]["ActionSelected"][];
            entityName: string;
            role_uuid: string;
        };
        Entity: {
            /** Format: int64 */
            id: number;
            name: string;
        };
        EntityActions: {
            actions: components["schemas"]["Action"][];
            entity: components["schemas"]["Entity"];
        };
        EntityResponseClientBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            result: components["schemas"]["Client"];
        };
        EntityResponseCompanyBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            result: components["schemas"]["Company"];
        };
        EntityResponseCompanyDtoBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            result: components["schemas"]["CompanyDto"];
        };
        EntityResponseItemAttributeBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            result: components["schemas"]["ItemAttribute"];
        };
        EntityResponseItemBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            result: components["schemas"]["Item"];
        };
        EntityResponseItemGroupBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            result: components["schemas"]["ItemGroup"];
        };
        EntityResponseItemPriceBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            result: components["schemas"]["ItemPrice"];
        };
        EntityResponseItemPriceListBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            result: components["schemas"]["ItemPriceList"];
        };
        EntityResponseListUserRelationDtoBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            result: components["schemas"]["UserRelationDto"][];
        };
        EntityResponseResponseSalesOrderDetailBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            result: components["schemas"]["ResponseSalesOrderDetail"];
        };
        EntityResponseResultEntityGroupDtoBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            result: components["schemas"]["ResultEntityGroupDto"];
        };
        EntityResponseResultEntityItemBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            result: components["schemas"]["ResultEntityItem"];
        };
        EntityResponseResultEntityItemPriceBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            result: components["schemas"]["ResultEntityItemPrice"];
        };
        EntityResponseResultEntityListEntityActionsBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            result: components["schemas"]["ResultEntityListEntityActions"];
        };
        EntityResponseResultEntityListGroupHierarchyDtoBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            result: components["schemas"]["ResultEntityListGroupHierarchyDto"];
        };
        EntityResponseResultEntityListItemPriceDtoBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            result: components["schemas"]["ResultEntityListItemPriceDto"];
        };
        EntityResponseResultEntityListPartyTypeBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            result: components["schemas"]["ResultEntityListPartyType"];
        };
        EntityResponseResultEntityProfileDtoBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            result: components["schemas"]["ResultEntityProfileDto"];
        };
        EntityResponseResultEntityRoleDtoBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            result: components["schemas"]["ResultEntityRoleDto"];
        };
        EntityResponseResultEntitySupplierDtoBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            result: components["schemas"]["ResultEntitySupplierDto"];
        };
        EntityResponseTaxBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            result: components["schemas"]["Tax"];
        };
        EntityResponseWareHouseBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            result: components["schemas"]["WareHouse"];
        };
        ErrorDetail: {
            /** @description Where the error occurred, e.g. 'body.items[3].tags' or 'path.thing-id' */
            location?: string;
            /** @description Error message text */
            message?: string;
            /** @description The value at the given location */
            value?: unknown;
        };
        ErrorModel: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            /** @description A human-readable explanation specific to this occurrence of the problem. */
            detail?: string;
            /** @description Optional list of individual error details */
            errors?: components["schemas"]["ErrorDetail"][];
            /**
             * Format: uri
             * @description A URI reference that identifies the specific occurrence of the problem.
             */
            instance?: string;
            /**
             * Format: int64
             * @description HTTP status code
             */
            status?: number;
            /** @description A short, human-readable summary of the problem type. This value should not change between occurrences of the error. */
            title?: string;
            /**
             * Format: uri
             * @description A URI reference to human-readable documentation for the error.
             * @default about:blank
             */
            type: string;
        };
        ExternalDetails: {
            source: string;
            type: string;
        };
        GreetingOutputBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            /** @description Greeting message */
            message: string;
        };
        GroupDto: {
            /** Format: date-time */
            created_at: string;
            enabled: boolean;
            is_group: boolean;
            name: string;
            /** Format: int64 */
            ordinal: number;
            uuid: string;
        };
        GroupHierarchyDto: {
            /** Format: int64 */
            depth: number;
            is_group: boolean;
            name: string;
            parent_uuid: string | null;
            uuid: string;
        };
        Item: {
            Code: string;
            /** Format: int64 */
            CompanyID: number;
            /** Format: date-time */
            CreatedAt: string;
            DeletedAt?: components["schemas"]["DeletedAt"];
            /** Format: int64 */
            ID: number;
            ItemGroup?: components["schemas"]["ItemGroup"];
            /** Format: int64 */
            ItemGroupID: number;
            ItemType: string;
            Name: string;
            UnitOfMeasure: components["schemas"]["UnitOfMeasure"];
            /** Format: int64 */
            UnitOfMeasureID: number;
            /** Format: date-time */
            UpdatedAt: string;
            Uuid: string;
        };
        ItemAttribute: {
            /** Format: date-time */
            CreatedAt: string;
            DeletedAt?: components["schemas"]["DeletedAt"];
            /** Format: int64 */
            ID: number;
            ItemAttributeValues: components["schemas"]["ItemAttributeValue"][];
            Name: string;
            /** Format: date-time */
            UpdatedAt: string;
        };
        ItemAttributeValue: {
            Abbreviation: string;
            /** Format: date-time */
            CreatedAt: string;
            DeletedAt?: components["schemas"]["DeletedAt"];
            /** Format: int64 */
            ID: number;
            ItemAttribute: components["schemas"]["ItemAttribute"];
            /** Format: int64 */
            ItemAttributeID: number;
            /** Format: int64 */
            Ordinal: number;
            /** Format: date-time */
            UpdatedAt: string;
            Value: string;
        };
        ItemAttributeValueDto: {
            abbreviation: string;
            /** Format: int64 */
            id?: number;
            /** Format: int64 */
            itemAttributeId?: number;
            /** Format: int64 */
            ordinal: number;
            value: string;
        };
        ItemDto: {
            /** Format: int64 */
            id?: number;
            /** Format: int64 */
            itemGroupId: number;
            itemType?: string;
            name: string;
            /** Format: int64 */
            uomId?: number;
        };
        ItemGroup: {
            Code: string;
            Company: components["schemas"]["Company"];
            /** Format: int64 */
            CompanyID: number;
            /** Format: date-time */
            CreatedAt: string;
            DeletedAt?: components["schemas"]["DeletedAt"];
            /** Format: int64 */
            ID: number;
            IsParent: boolean;
            Name: string;
            Parent: components["schemas"]["ItemGroup"];
            /** Format: int64 */
            ParentID: number | null;
            /** Format: date-time */
            UpdatedAt: string;
            Uuid: string;
        };
        ItemPrice: {
            Code: string;
            Company: components["schemas"]["Company"];
            /** Format: int64 */
            CompanyID: number;
            /** Format: date-time */
            CreatedAt: string;
            DeletedAt?: components["schemas"]["DeletedAt"];
            /** Format: int64 */
            ID: number;
            Item: components["schemas"]["Item"];
            /** Format: int64 */
            ItemID: number;
            ItemPriceList: components["schemas"]["ItemPriceList"];
            /** Format: int64 */
            ItemPriceListID: number;
            ItemPricePlugin: components["schemas"]["ItemPricePlugin"][];
            /** Format: int64 */
            ItemQuantity: number;
            /** Format: int64 */
            Rate: number;
            Tax: components["schemas"]["Tax"];
            /** Format: int64 */
            TaxID: number;
            /** Format: date-time */
            UpdatedAt: string;
            /** Format: date-time */
            ValidFrom: string;
            /** Format: date-time */
            ValidUpTo: string | null;
        };
        ItemPriceDto: {
            code: string;
            /** Format: int32 */
            itemQuantity: number;
            item_code: string;
            item_name: string;
            item_uuid: string;
            /** Format: int32 */
            rate: number;
            uom: string;
            uuid: string;
            /** Format: date-time */
            validFrom?: string | null;
            /** Format: date-time */
            validUpTo?: string | null;
        };
        ItemPriceList: {
            Code: string;
            /** Format: int64 */
            CompanyID: number;
            /** Format: date-time */
            CreatedAt: string;
            Currency: string;
            DeletedAt?: components["schemas"]["DeletedAt"];
            /** Format: int64 */
            ID: number;
            IsBuying: boolean;
            IsSelling: boolean;
            Name: string;
            /** Format: date-time */
            UpdatedAt: string;
        };
        ItemPricePlugin: {
            /** Format: int64 */
            BaseID: number;
            Data: string;
            Plugin: string;
        };
        ItemPriceStruct: {
            /** Format: int64 */
            itemId?: number;
            /** Format: int64 */
            itemQuantity: number;
            /** Format: int64 */
            priceListId: number;
            /** Format: double */
            rate: number;
            /** Format: int64 */
            taxId: number;
            /** Format: date-time */
            validFrom?: string | null;
            /** Format: date-time */
            validUpTo?: string | null;
        };
        ItemVariant: {
            ItemAttributeValue: components["schemas"]["ItemAttributeValue"];
            /** Format: int64 */
            ItemAttributeValueID: number;
            /** Format: int64 */
            ItemID: number;
            Variant: components["schemas"]["Item"];
            /** Format: int64 */
            VariantID: number;
        };
        ItemVariantDto: {
            /** Format: int64 */
            itemAttributeValueId: number;
            /** Format: int64 */
            itemId: number;
            name: string;
        };
        KeyValueData: {
            key: string;
            value: string;
        };
        ObjectStruct: {
            payment?: components["schemas"]["PaymentStruct"];
        };
        OrderData: {
            orderLine: components["schemas"]["OrderLineData"][];
        };
        OrderDto: {
            code: string;
            /** Format: date-time */
            created_at: string;
            /** Format: date-time */
            delivery_date: string | null;
            name: string;
            uuid: string;
        };
        OrderLineData: {
            /** Format: int64 */
            itemPriceId: number;
            /** Format: int64 */
            quantity: number;
        };
        OrderLineRequest: {
            /** Format: int64 */
            item_price_id: number;
            /** Format: int32 */
            quantity: number;
        };
        PaginationResponsePaginationResultListCompanyDtoBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            pagination_result: components["schemas"]["PaginationResultListCompanyDto"];
        };
        PaginationResponsePaginationResultListCurrencyDtoBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            pagination_result: components["schemas"]["PaginationResultListCurrencyDto"];
        };
        PaginationResponsePaginationResultListGroupDtoBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            pagination_result: components["schemas"]["PaginationResultListGroupDto"];
        };
        PaginationResponsePaginationResultListItemAttributeBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            pagination_result: components["schemas"]["PaginationResultListItemAttribute"];
        };
        PaginationResponsePaginationResultListItemBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            pagination_result: components["schemas"]["PaginationResultListItem"];
        };
        PaginationResponsePaginationResultListItemGroupBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            pagination_result: components["schemas"]["PaginationResultListItemGroup"];
        };
        PaginationResponsePaginationResultListItemPriceBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            pagination_result: components["schemas"]["PaginationResultListItemPrice"];
        };
        PaginationResponsePaginationResultListItemPriceListBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            pagination_result: components["schemas"]["PaginationResultListItemPriceList"];
        };
        PaginationResponsePaginationResultListItemVariantBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            pagination_result: components["schemas"]["PaginationResultListItemVariant"];
        };
        PaginationResponsePaginationResultListOrderDtoBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            pagination_result: components["schemas"]["PaginationResultListOrderDto"];
        };
        PaginationResponsePaginationResultListProfileLBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            pagination_result: components["schemas"]["PaginationResultListProfileL"];
        };
        PaginationResponsePaginationResultListRoleActionDtoBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            pagination_result: components["schemas"]["PaginationResultListRoleActionDto"];
        };
        PaginationResponsePaginationResultListRoleDtoBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            pagination_result: components["schemas"]["PaginationResultListRoleDto"];
        };
        PaginationResponsePaginationResultListSalesOrderBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            pagination_result: components["schemas"]["PaginationResultListSalesOrder"];
        };
        PaginationResponsePaginationResultListStockLevelBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            pagination_result: components["schemas"]["PaginationResultListStockLevel"];
        };
        PaginationResponsePaginationResultListSupplierDtoBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            pagination_result: components["schemas"]["PaginationResultListSupplierDto"];
        };
        PaginationResponsePaginationResultListTaxBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            pagination_result: components["schemas"]["PaginationResultListTax"];
        };
        PaginationResponsePaginationResultListWareHouseBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            actions: components["schemas"]["ActionDto"][];
            pagination_result: components["schemas"]["PaginationResultListWareHouse"];
        };
        PaginationResultListCompanyDto: {
            results: components["schemas"]["CompanyDto"][];
            /** Format: int64 */
            total: number;
        };
        PaginationResultListCurrencyDto: {
            results: components["schemas"]["CurrencyDto"][];
            /** Format: int64 */
            total: number;
        };
        PaginationResultListGroupDto: {
            results: components["schemas"]["GroupDto"][];
            /** Format: int64 */
            total: number;
        };
        PaginationResultListItem: {
            results: components["schemas"]["Item"][];
            /** Format: int64 */
            total: number;
        };
        PaginationResultListItemAttribute: {
            results: components["schemas"]["ItemAttribute"][];
            /** Format: int64 */
            total: number;
        };
        PaginationResultListItemGroup: {
            results: components["schemas"]["ItemGroup"][];
            /** Format: int64 */
            total: number;
        };
        PaginationResultListItemPrice: {
            results: components["schemas"]["ItemPrice"][];
            /** Format: int64 */
            total: number;
        };
        PaginationResultListItemPriceList: {
            results: components["schemas"]["ItemPriceList"][];
            /** Format: int64 */
            total: number;
        };
        PaginationResultListItemVariant: {
            results: components["schemas"]["ItemVariant"][];
            /** Format: int64 */
            total: number;
        };
        PaginationResultListOrderDto: {
            results: components["schemas"]["OrderDto"][];
            /** Format: int64 */
            total: number;
        };
        PaginationResultListProfileL: {
            results: components["schemas"]["ProfileL"][];
            /** Format: int64 */
            total: number;
        };
        PaginationResultListRoleActionDto: {
            results: components["schemas"]["RoleActionDto"][];
            /** Format: int64 */
            total: number;
        };
        PaginationResultListRoleDto: {
            results: components["schemas"]["RoleDto"][];
            /** Format: int64 */
            total: number;
        };
        PaginationResultListSalesOrder: {
            results: components["schemas"]["SalesOrder"][];
            /** Format: int64 */
            total: number;
        };
        PaginationResultListStockLevel: {
            results: components["schemas"]["StockLevel"][];
            /** Format: int64 */
            total: number;
        };
        PaginationResultListSupplierDto: {
            results: components["schemas"]["SupplierDto"][];
            /** Format: int64 */
            total: number;
        };
        PaginationResultListTax: {
            results: components["schemas"]["Tax"][];
            /** Format: int64 */
            total: number;
        };
        PaginationResultListWareHouse: {
            results: components["schemas"]["WareHouse"][];
            /** Format: int64 */
            total: number;
        };
        Party: {
            /** Format: date-time */
            created_at: string;
            deleted_at: components["schemas"]["DeletedAt"];
            /** Format: int64 */
            id: number;
            party_type: components["schemas"]["PartyType"];
            party_type_code: string;
            /** Format: date-time */
            updated_at: string | null;
        };
        PartyAddress: {
            Address: components["schemas"]["Address"];
            /** Format: int64 */
            AddressID: number;
            /** Format: date-time */
            CreatedAt: string;
            DeletedAt?: components["schemas"]["DeletedAt"];
            IsActive: boolean;
            IsBillingAddress: boolean;
            IsShippingAddress: boolean;
            Party: components["schemas"]["Party"];
            /** Format: int64 */
            PartyID: number;
            /** Format: date-time */
            UpdatedAt: string;
        };
        PartyType: {
            code: string;
            name: string | null;
        };
        PaymentStruct: {
            amount_money?: components["schemas"]["Amount"];
            application_details?: components["schemas"]["ApplicationDetailsStruct"];
            approved_money?: components["schemas"]["Amount"];
            buyer_email_address?: string;
            capabilities?: string[];
            card_details?: components["schemas"]["CardDetailsStruct"];
            /** Format: date-time */
            created_at?: string;
            customer_id?: string;
            delay_action?: string;
            delay_duration?: string;
            /** Format: date-time */
            delayed_until?: string;
            external_details?: components["schemas"]["ExternalDetails"];
            id?: string;
            location_id?: string;
            order_id?: string;
            processing_fee?: components["schemas"]["ProcessFee"][];
            receipt_number?: string;
            receipt_url?: string;
            source_type?: string;
            status?: string;
            total_money?: components["schemas"]["Amount"];
            /** Format: date-time */
            updated_at?: string;
            /** Format: int64 */
            version?: number;
        };
        PaymentWeebhookRequestBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            /** Format: date-time */
            created_at?: string;
            data?: components["schemas"]["DataStruct"];
            event_id?: string;
            merchant_id?: string;
            type?: string;
        };
        Phase: {
            cadence: string;
            /** Format: int64 */
            ordinal: number;
            /** Format: int64 */
            periods: number;
            pricing: components["schemas"]["PhasePricingStruct"];
            uid: string;
        };
        PhasePricingStruct: {
            price: components["schemas"]["Amount"];
            price_money: components["schemas"]["Amount"];
            type: string;
        };
        PhoneNumber: {
            countryCode: string;
            number: string;
        };
        PluginApp: {
            Name: string;
        };
        PluginDetailResponseBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            company_plugin: components["schemas"]["CompanyPlugins"];
        };
        PluginDto: {
            /** Format: int64 */
            companyId?: number;
            plugin: string;
        };
        PluginsResponseBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            plugins: components["schemas"]["PluginApp"][];
        };
        ProcessFee: {
            amount_money: components["schemas"]["Amount"];
            /** Format: date-time */
            effective_at: string;
            type: string;
        };
        ProfileDto: {
            email: string;
            family_name: string;
            given_name: string;
            /** Format: int64 */
            id: number;
            phone_number: string | null;
            uuid: string;
        };
        ProfileL: {
            /** Format: date-time */
            createdAt: string;
            emailAddress: string;
            familyName: string;
            givenName: string;
            /** Format: int64 */
            id: number;
            partyCode: string;
            partyName: string;
            phoneNumber: string;
            uuid: string;
        };
        RequestSubscriptionCancelBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            subscriptionId: string;
        };
        ResponseMessageBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            errors: {
                [key: string]: string | undefined;
            };
            message: string;
        };
        ResponseSalesOrderDetail: {
            Body: components["schemas"]["ResponseSalesOrderDetailBodyStruct"];
        };
        ResponseSalesOrderDetailBodyStruct: {
            lines: components["schemas"]["SalesItemLine"][];
            order: components["schemas"]["SalesOrder"];
        };
        ResultEntityGroupDto: {
            entity: components["schemas"]["GroupDto"];
        };
        ResultEntityItem: {
            entity: components["schemas"]["Item"];
        };
        ResultEntityItemPrice: {
            entity: components["schemas"]["ItemPrice"];
        };
        ResultEntityListEntityActions: {
            entity: components["schemas"]["EntityActions"][];
        };
        ResultEntityListGroupHierarchyDto: {
            entity: components["schemas"]["GroupHierarchyDto"][];
        };
        ResultEntityListItemPriceDto: {
            entity: components["schemas"]["ItemPriceDto"][];
        };
        ResultEntityListPartyType: {
            entity: components["schemas"]["PartyType"][];
        };
        ResultEntityProfileDto: {
            entity: components["schemas"]["ProfileDto"];
        };
        ResultEntityRoleDto: {
            entity: components["schemas"]["RoleDto"];
        };
        ResultEntitySupplierDto: {
            entity: components["schemas"]["SupplierDto"];
        };
        RetrieveCatalogRequest: {
            object: components["schemas"]["RetrieveCatalogRequestObjectStruct"];
        };
        RetrieveCatalogRequestObjectStruct: {
            /** Format: date-time */
            created_at: string;
            id: string;
            is_deleted: boolean;
            present_at_all_locations: boolean;
            subscription_plan_data: components["schemas"]["SubscriptionPlanDataStruct"];
            type: string;
            /** Format: date-time */
            updated_at: string;
            /** Format: int64 */
            version: number;
        };
        RetrieveObjectRequest: {
            object: components["schemas"]["RetrieveObjectRequestObjectStruct"];
        };
        RetrieveObjectRequestObjectStruct: {
            /** Format: date-time */
            created_at: string;
            id: string;
            is_deleted: boolean;
            present_at_all_locations: boolean;
            subscription_plan_variation_data: components["schemas"]["SubscriptionPlanVariationDataStruct"];
            type: string;
            /** Format: date-time */
            updated_at: string;
            /** Format: int64 */
            version: number;
        };
        RoleActionDto: {
            action: components["schemas"]["ActionDto"];
            /** Format: int64 */
            action_id: number;
            /** Format: int64 */
            role_id: number;
        };
        RoleDto: {
            code: string;
            /** Format: date-time */
            created_at: string;
            description: string | null;
            /** Format: int64 */
            id: number;
            /** Format: date-time */
            updated_at: string | null;
            uuid: string;
        };
        SalesItemLine: {
            /** Format: date-time */
            CreatedAt: string;
            Currency: string;
            DeletedAt?: components["schemas"]["DeletedAt"];
            /** Format: int64 */
            ID: number;
            ItemPrice: components["schemas"]["ItemPrice"];
            /** Format: int64 */
            ItemPriceID: number;
            /** Format: int64 */
            ItemQuantity: number;
            /** Format: int64 */
            Rate: number;
            /** Format: int64 */
            SalesOrderID: number;
            /** Format: date-time */
            UpdatedAt: string;
        };
        SalesOrder: {
            BillingAddress: components["schemas"]["PartyAddress"];
            /** Format: int64 */
            BillingAddressID: number | null;
            Code: string;
            Company: components["schemas"]["Company"];
            /** Format: int64 */
            CompanyID: number;
            /** Format: date-time */
            CreatedAt: string;
            Data: string;
            DeletedAt?: components["schemas"]["DeletedAt"];
            /** Format: date-time */
            DeliveryDate: string;
            /** Format: int64 */
            ID: number;
            OrderType: string;
            Party: components["schemas"]["Party"];
            /** Format: int64 */
            PartyID: number;
            SalesOrderPlugin: components["schemas"]["SalesOrderPlugin"][];
            ShippingAddress: components["schemas"]["PartyAddress"];
            /** Format: int64 */
            ShippingAddressID: number | null;
            /** Format: date-time */
            UpdatedAt: string;
        };
        SalesOrderPlugin: {
            Data: string;
            Plugin: string;
            /** Format: int64 */
            SalesOrderID: number;
        };
        SignInRequestBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            /** @description Email of the user */
            email: string;
            /** @description Password of the user */
            password: string;
        };
        SignInResponseBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            /** @description Access token of the user */
            access_token: string;
            user: components["schemas"]["UserDto"];
            user_relation: components["schemas"]["UserRelationDto"];
        };
        SquareCatalogResponseBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            catalog: components["schemas"]["RetrieveCatalogRequest"];
            objects: components["schemas"]["SquareObject"][];
        };
        SquareObject: {
            /** Format: date-time */
            CreatedAt: string;
            DeletedAt: components["schemas"]["DeletedAt"];
            /** Format: int64 */
            ItemGroupId: number;
            ItemPrice: components["schemas"]["ItemPrice"];
            /** Format: int64 */
            ItemPriceID: number;
            ObjectId: string;
            ObjectVariationId: string;
            /** Format: date-time */
            UpdatedAt: string;
        };
        SquareObjectResponseBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            plan_variation: components["schemas"]["RetrieveObjectRequest"];
            square_object: components["schemas"]["SquareObject"];
        };
        StockLevel: {
            /** Format: date-time */
            CreatedAt: string;
            DeletedAt?: components["schemas"]["DeletedAt"];
            Enabled: boolean;
            Item: components["schemas"]["Item"];
            /** Format: int64 */
            ItemID: number;
            /** Format: int64 */
            OutOfStockThreshold: number;
            /** Format: int64 */
            Stock: number;
            /** Format: date-time */
            UpdatedAt: string;
            WareHouse: components["schemas"]["WareHouse"];
            /** Format: int64 */
            WareHouseID: number;
        };
        SubscriptionPlanDataStruct: {
            all_items: boolean;
            name: string;
            subscription_plan_variations: components["schemas"]["SubscriptionPlanVariation"][];
        };
        SubscriptionPlanVariation: {
            /** Format: date-time */
            created_at: string;
            id: string;
            is_deleted: boolean;
            present_at_all_locations: boolean;
            subscription_plan_variation_data: components["schemas"]["SubscriptionPlanVariationSubscriptionPlanVariationDataStruct"];
            type: string;
            /** Format: date-time */
            updated_at: string;
            /** Format: int64 */
            version: number;
        };
        SubscriptionPlanVariationDataStruct: {
            name: string;
            phases: components["schemas"]["Phase"][];
            subscription_plan_id: string;
        };
        SubscriptionPlanVariationSubscriptionPlanVariationDataStruct: {
            name: string;
            phases: components["schemas"]["Phase"][];
            subscription_plan_id: string;
        };
        SupplierDto: {
            /** Format: date-time */
            created_at: string;
            enabled: boolean;
            group: components["schemas"]["GroupDto"];
            name: string;
            uuid: string;
        };
        Tax: {
            Code: string;
            /** Format: int64 */
            CompanyID: number;
            /** Format: date-time */
            CreatedAt: string;
            DeletedAt?: components["schemas"]["DeletedAt"];
            Enabled: boolean;
            /** Format: int64 */
            ID: number;
            Name: string;
            /** Format: date-time */
            UpdatedAt: string;
            /** Format: double */
            Value: number;
        };
        TecluMobilityOrderRequestBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            billing?: components["schemas"]["BillingData"];
            client: components["schemas"]["ClientRequestDto"];
            order: components["schemas"]["OrderData"];
        };
        TecluMobilityOrderResponseBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            paymentUrl: string;
        };
        TecluMobilityRequestItemPriceBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            /** Format: int64 */
            billingPeriod?: number;
            itemCode: string;
            type: string;
        };
        UOMsResponseBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            results: components["schemas"]["UnitOfMeasureTranslation"][];
        };
        UnitOfMeasure: {
            Code: string;
            /** Format: int64 */
            CompanyID: number | null;
            /** Format: date-time */
            CreatedAt: string;
            DeletedAt?: components["schemas"]["DeletedAt"];
            Enabled: boolean;
            /** Format: int64 */
            ID: number;
            UnitOfMeasureTranslation?: components["schemas"]["UnitOfMeasureTranslation"];
            /** Format: date-time */
            UpdatedAt: string;
        };
        UnitOfMeasureTranslation: {
            /** Format: int64 */
            BaseId: number;
            /** Format: date-time */
            CreatedAt: string;
            DeletedAt?: components["schemas"]["DeletedAt"];
            /** Format: int64 */
            ID: number;
            LanguageCode: string;
            Name: string;
            UnitOfMeasure: components["schemas"]["UnitOfMeasure"];
            /** Format: date-time */
            UpdatedAt: string;
        };
        UpdateCredentialsPluginRequestBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            credentials: string;
        };
        UpdatePasswordRequestBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            newPassword: string;
            password: string;
        };
        UpsertItemAttributeValueRequestBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            abbreviation: string;
            /** Format: int64 */
            id?: number;
            /** Format: int64 */
            itemAttributeId?: number;
            /** Format: int64 */
            ordinal: number;
            value: string;
        };
        UpsertItemPriceRequestBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            itemPrice: components["schemas"]["ItemPrice"];
        };
        UpsertPriceListRequestBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            itemPriceList: components["schemas"]["ItemPriceList"];
        };
        UpsertRequestEntityItemDtoBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            entity: components["schemas"]["ItemDto"];
        };
        UserDto: {
            identifier: string;
            /** Format: date-time */
            last_login: string | null;
            uuid: string;
        };
        UserRelationDto: {
            company: components["schemas"]["CompanyDto"];
            profile: components["schemas"]["ProfileDto"];
            role: components["schemas"]["RoleDto"];
            uuid: string;
        };
        WareHouse: {
            Code: string;
            Company: components["schemas"]["Company"];
            /** Format: int64 */
            CompanyID: number;
            /** Format: date-time */
            CreatedAt: string;
            DeletedAt?: components["schemas"]["DeletedAt"];
            Enabled: boolean;
            /** Format: int64 */
            ID: number;
            Name: string;
            /** Format: int32 */
            Ordinal: number;
            Parent: components["schemas"]["WareHouse"];
            /** Format: int64 */
            ParentID: number | null;
            /** Format: date-time */
            UpdatedAt: string;
            WareHouseSubgroup: components["schemas"]["WareHouse"][];
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    "get-account": {
        parameters: {
            query?: {
                query?: string;
                order?: string;
                column?: string;
                parentId?: string;
            };
            header?: {
                Authorization?: string;
                "Active-Company"?: string;
                "User-Session-Uuid"?: string;
                Role?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AccountResponseBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "update-password": {
        parameters: {
            query?: {
                query?: string;
                order?: string;
                column?: string;
                parentId?: string;
            };
            header?: {
                Authorization?: string;
                "Active-Company"?: string;
                "User-Session-Uuid"?: string;
                Role?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdatePasswordRequestBody"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseMessageBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "get-sessions": {
        parameters: {
            query?: {
                query?: string;
                order?: string;
                column?: string;
                parentId?: string;
            };
            header?: {
                Authorization?: string;
                "Active-Company"?: string;
                "User-Session-Uuid"?: string;
                Role?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EntityResponseListUserRelationDtoBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "sign-in": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SignInRequestBody"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SignInResponseBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "get-taxes": {
        parameters: {
            query: {
                page: string;
                size: string;
                enabled?: string;
                query?: string;
                order?: string;
                column?: string;
                parentId?: string;
            };
            header?: {
                Authorization?: string;
                "Active-Company"?: string;
                "User-Session-Uuid"?: string;
                Role?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginationResponsePaginationResultListTaxBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "create-tax": {
        parameters: {
            query?: {
                query?: string;
                order?: string;
                column?: string;
                parentId?: string;
            };
            header?: {
                Authorization?: string;
                "Active-Company"?: string;
                "User-Session-Uuid"?: string;
                Role?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateTaxRequestBody"];
            };
        };
        responses: {
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseMessageBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "get-tax-detail": {
        parameters: {
            query?: {
                query?: string;
                order?: string;
                column?: string;
                parentId?: string;
                party?: string;
            };
            header?: {
                Authorization?: string;
                "Active-Company"?: string;
                "User-Session-Uuid"?: string;
                Role?: string;
            };
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EntityResponseTaxBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "get-client-profile": {
        parameters: {
            query?: {
                query?: string;
                order?: string;
                column?: string;
                parentId?: string;
            };
            header?: {
                Authorization?: string;
                "Active-Company"?: string;
                "User-Session-Uuid"?: string;
                Role?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EntityResponseClientBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "update-client-profile": {
        parameters: {
            query?: {
                query?: string;
                order?: string;
                column?: string;
                parentId?: string;
            };
            header?: {
                Authorization?: string;
                "Active-Company"?: string;
                "User-Session-Uuid"?: string;
                Role?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["EditClientRequestBody"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseMessageBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    companies: {
        parameters: {
            query: {
                page: string;
                size: string;
                enabled?: string;
                query?: string;
                order?: string;
                column?: string;
                parentId?: string;
            };
            header?: {
                Authorization?: string;
                "Active-Company"?: string;
                "User-Session-Uuid"?: string;
                Role?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginationResponsePaginationResultListCompanyDtoBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "create-company": {
        parameters: {
            query?: {
                query?: string;
                order?: string;
                column?: string;
                parentId?: string;
            };
            header?: {
                Authorization?: string;
                "Active-Company"?: string;
                "User-Session-Uuid"?: string;
                Role?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateCompanyRequestBody"];
            };
        };
        responses: {
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseMessageBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "company-detail": {
        parameters: {
            query?: {
                query?: string;
                order?: string;
                column?: string;
                parentId?: string;
                party?: string;
            };
            header?: {
                Authorization?: string;
                "Active-Company"?: string;
                "User-Session-Uuid"?: string;
                Role?: string;
            };
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EntityResponseCompanyDtoBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "user-companies": {
        parameters: {
            query: {
                page: string;
                size: string;
                enabled?: string;
                query?: string;
                order?: string;
                column?: string;
                parentId?: string;
            };
            header?: {
                Authorization?: string;
                "Active-Company"?: string;
                "User-Session-Uuid"?: string;
                Role?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginationResponsePaginationResultListCompanyDtoBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "valid-parent-companies": {
        parameters: {
            query: {
                page: string;
                size: string;
                enabled?: string;
                query?: string;
                order?: string;
                column?: string;
                parentId?: string;
            };
            header?: {
                Authorization?: string;
                "Active-Company"?: string;
                "User-Session-Uuid"?: string;
                Role?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginationResponsePaginationResultListCompanyDtoBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "get-company-by-uuid": {
        parameters: {
            query?: never;
            header?: {
                "Accept-Language"?: string;
            };
            path: {
                uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EntityResponseCompanyBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "cuatropf-subscription": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                companyUuid: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CuatropfSubscriptionRequestBody"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseMessageBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "get currencies": {
        parameters: {
            query: {
                page: string;
                size: string;
                enabled?: string;
                query?: string;
                order?: string;
                column?: string;
                parentId?: string;
            };
            header?: {
                Authorization?: string;
                "Active-Company"?: string;
                "User-Session-Uuid"?: string;
                Role?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginationResponsePaginationResultListCurrencyDtoBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "get-greeting-by-name": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description Name to greet
                 * @example world
                 */
                name: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GreetingOutputBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "create group": {
        parameters: {
            query?: {
                query?: string;
                order?: string;
                column?: string;
                parentId?: string;
            };
            header?: {
                Authorization?: string;
                "Active-Company"?: string;
                "User-Session-Uuid"?: string;
                Role?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateGroupRequestBody"];
            };
        };
        responses: {
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseMessageBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "get group descendents": {
        parameters: {
            query?: {
                query?: string;
                order?: string;
                column?: string;
                parentId?: string;
                party?: string;
            };
            header?: {
                Authorization?: string;
                "Active-Company"?: string;
                "User-Session-Uuid"?: string;
                Role?: string;
            };
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EntityResponseResultEntityListGroupHierarchyDtoBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "get group": {
        parameters: {
            query?: {
                query?: string;
                order?: string;
                column?: string;
                parentId?: string;
                party?: string;
            };
            header?: {
                Authorization?: string;
                "Active-Company"?: string;
                "User-Session-Uuid"?: string;
                Role?: string;
            };
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EntityResponseResultEntityGroupDtoBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "get groups by party code": {
        parameters: {
            query: {
                page: string;
                size: string;
                enabled?: string;
                query?: string;
                order?: string;
                column?: string;
                parentId?: string;
            };
            header?: {
                Authorization?: string;
                "Active-Company"?: string;
                "User-Session-Uuid"?: string;
                Role?: string;
            };
            path: {
                party: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginationResponsePaginationResultListGroupDtoBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "get orders by party code": {
        parameters: {
            query: {
                page: string;
                size: string;
                enabled?: string;
                query?: string;
                order?: string;
                column?: string;
                parentId?: string;
            };
            header?: {
                Authorization?: string;
                "Active-Company"?: string;
                "User-Session-Uuid"?: string;
                Role?: string;
            };
            path: {
                party: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginationResponsePaginationResultListOrderDtoBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "get party user types": {
        parameters: {
            query?: {
                query?: string;
                order?: string;
                column?: string;
                parentId?: string;
            };
            header?: {
                Authorization?: string;
                "Active-Company"?: string;
                "User-Session-Uuid"?: string;
                Role?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EntityResponseResultEntityListPartyTypeBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "payment-webhook": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PaymentWeebhookRequestBody"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseMessageBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    plugins: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PluginsResponseBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "add-plugin": {
        parameters: {
            query?: {
                query?: string;
                order?: string;
                column?: string;
                parentId?: string;
            };
            header?: {
                Authorization?: string;
                "Active-Company"?: string;
                "User-Session-Uuid"?: string;
                Role?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AddPluginRequestBody"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AddPluginResponseBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "get-plugin": {
        parameters: {
            query?: {
                query?: string;
                order?: string;
                column?: string;
                parentId?: string;
            };
            header?: {
                Authorization?: string;
                "Active-Company"?: string;
                "User-Session-Uuid"?: string;
                Role?: string;
            };
            path: {
                plugin: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PluginDetailResponseBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "update-plugin-credentials": {
        parameters: {
            query?: {
                query?: string;
                order?: string;
                column?: string;
                parentId?: string;
            };
            header?: {
                Authorization?: string;
                "Active-Company"?: string;
                "User-Session-Uuid"?: string;
                Role?: string;
            };
            path: {
                plugin: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateCredentialsPluginRequestBody"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseMessageBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "create purchase order": {
        parameters: {
            query?: {
                query?: string;
                order?: string;
                column?: string;
                parentId?: string;
            };
            header?: {
                Authorization?: string;
                "Active-Company"?: string;
                "User-Session-Uuid"?: string;
                Role?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreatePurchaseOrderRequestBody"];
            };
        };
        responses: {
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseMessageBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "get roles": {
        parameters: {
            query: {
                page: string;
                size: string;
                enabled?: string;
                query?: string;
                order?: string;
                column?: string;
                parentId?: string;
            };
            header?: {
                Authorization?: string;
                "Active-Company"?: string;
                "User-Session-Uuid"?: string;
                Role?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginationResponsePaginationResultListRoleDtoBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "create role": {
        parameters: {
            query?: {
                query?: string;
                order?: string;
                column?: string;
                parentId?: string;
            };
            header?: {
                Authorization?: string;
                "Active-Company"?: string;
                "User-Session-Uuid"?: string;
                Role?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateRoleRequestBody"];
            };
        };
        responses: {
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseMessageBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "get role": {
        parameters: {
            query?: {
                query?: string;
                order?: string;
                column?: string;
                parentId?: string;
                party?: string;
            };
            header?: {
                Authorization?: string;
                "Active-Company"?: string;
                "User-Session-Uuid"?: string;
                Role?: string;
            };
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EntityResponseResultEntityRoleDtoBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "get entity actions": {
        parameters: {
            query?: {
                query?: string;
                order?: string;
                column?: string;
                parentId?: string;
            };
            header?: {
                Authorization?: string;
                "Active-Company"?: string;
                "User-Session-Uuid"?: string;
                Role?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EntityResponseResultEntityListEntityActionsBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "update role permision action": {
        parameters: {
            query?: {
                query?: string;
                order?: string;
                column?: string;
                parentId?: string;
            };
            header?: {
                Authorization?: string;
                "Active-Company"?: string;
                "User-Session-Uuid"?: string;
                Role?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["EditRolePermissionActionsBody"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseMessageBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "get role definitions": {
        parameters: {
            query: {
                page: string;
                size: string;
                enabled?: string;
                query?: string;
                order?: string;
                column?: string;
                parentId?: string;
            };
            header?: {
                Authorization?: string;
                "Active-Company"?: string;
                "User-Session-Uuid"?: string;
                Role?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginationResponsePaginationResultListRoleActionDtoBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "client-sales-orders": {
        parameters: {
            query: {
                page: string;
                size: string;
                enabled?: string;
                query?: string;
                order?: string;
                column?: string;
                parentId?: string;
            };
            header?: {
                Authorization?: string;
                "Active-Company"?: string;
                "User-Session-Uuid"?: string;
                Role?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginationResponsePaginationResultListSalesOrderBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "sale-order-detail": {
        parameters: {
            query?: {
                query?: string;
                order?: string;
                column?: string;
                parentId?: string;
            };
            header?: {
                Authorization?: string;
                "Active-Company"?: string;
                "User-Session-Uuid"?: string;
                Role?: string;
            };
            path: {
                code: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EntityResponseResponseSalesOrderDetailBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "cancel-square-subscription": {
        parameters: {
            query?: {
                query?: string;
                order?: string;
                column?: string;
                parentId?: string;
            };
            header?: {
                Authorization?: string;
                "Active-Company"?: string;
                "User-Session-Uuid"?: string;
                Role?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["RequestSubscriptionCancelBody"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseMessageBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "test-event": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "get-catalog-square": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SquareCatalogResponseBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "get-object-square": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                object_id: string;
                uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SquareObjectResponseBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "get-items": {
        parameters: {
            query: {
                page: string;
                size: string;
                enabled?: string;
                query?: string;
                order?: string;
                column?: string;
                parentId?: string;
            };
            header?: {
                Authorization?: string;
                "Active-Company"?: string;
                "User-Session-Uuid"?: string;
                Role?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginationResponsePaginationResultListItemBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "update-item": {
        parameters: {
            query?: {
                query?: string;
                order?: string;
                column?: string;
                parentId?: string;
            };
            header?: {
                Authorization?: string;
                "Active-Company"?: string;
                "User-Session-Uuid"?: string;
                Role?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpsertRequestEntityItemDtoBody"];
            };
        };
        responses: {
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseMessageBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "create-item": {
        parameters: {
            query?: {
                query?: string;
                order?: string;
                column?: string;
                parentId?: string;
            };
            header?: {
                Authorization?: string;
                "Active-Company"?: string;
                "User-Session-Uuid"?: string;
                Role?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateItemRequestBody"];
            };
        };
        responses: {
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EntityResponseItemBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "item-groups": {
        parameters: {
            query: {
                page: string;
                size: string;
                enabled?: string;
                query?: string;
                order?: string;
                column?: string;
                parentId?: string;
            };
            header?: {
                Authorization?: string;
                "Active-Company"?: string;
                "User-Session-Uuid"?: string;
                Role?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginationResponsePaginationResultListItemGroupBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "create-item-group": {
        parameters: {
            query?: {
                query?: string;
                order?: string;
                column?: string;
                parentId?: string;
            };
            header?: {
                Authorization?: string;
                "Active-Company"?: string;
                "User-Session-Uuid"?: string;
                Role?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateItemGroupRequestBody"];
            };
        };
        responses: {
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseMessageBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "item-group-detail": {
        parameters: {
            query?: {
                query?: string;
                order?: string;
                column?: string;
                parentId?: string;
                party?: string;
            };
            header?: {
                Authorization?: string;
                "Active-Company"?: string;
                "User-Session-Uuid"?: string;
                Role?: string;
            };
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EntityResponseItemGroupBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "item-attributes": {
        parameters: {
            query: {
                page: string;
                size: string;
                enabled?: string;
                query?: string;
                order?: string;
                column?: string;
                parentId?: string;
            };
            header?: {
                Authorization?: string;
                "Active-Company"?: string;
                "User-Session-Uuid"?: string;
                Role?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginationResponsePaginationResultListItemAttributeBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "create-item-attribute": {
        parameters: {
            query?: {
                query?: string;
                order?: string;
                column?: string;
                parentId?: string;
            };
            header?: {
                Authorization?: string;
                "Active-Company"?: string;
                "User-Session-Uuid"?: string;
                Role?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateItemAttributeRequestBody"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EntityResponseItemAttributeBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "update-item-attribute-value": {
        parameters: {
            query?: {
                query?: string;
                order?: string;
                column?: string;
                parentId?: string;
            };
            header?: {
                Authorization?: string;
                "Active-Company"?: string;
                "User-Session-Uuid"?: string;
                Role?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpsertItemAttributeValueRequestBody"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseMessageBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "create-item-attribute-value": {
        parameters: {
            query?: {
                query?: string;
                order?: string;
                column?: string;
                parentId?: string;
            };
            header?: {
                Authorization?: string;
                "Active-Company"?: string;
                "User-Session-Uuid"?: string;
                Role?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpsertItemAttributeValueRequestBody"];
            };
        };
        responses: {
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseMessageBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "item-attribute": {
        parameters: {
            query?: {
                query?: string;
                order?: string;
                column?: string;
                parentId?: string;
                party?: string;
            };
            header?: {
                Authorization?: string;
                "Active-Company"?: string;
                "User-Session-Uuid"?: string;
                Role?: string;
            };
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EntityResponseItemAttributeBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "get-item-prices": {
        parameters: {
            query: {
                page: string;
                size: string;
                enabled?: string;
                query?: string;
                order?: string;
                column?: string;
                parentId?: string;
            };
            header?: {
                Authorization?: string;
                "Active-Company"?: string;
                "User-Session-Uuid"?: string;
                Role?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginationResponsePaginationResultListItemPriceBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "update-item-price": {
        parameters: {
            query?: {
                query?: string;
                order?: string;
                column?: string;
                parentId?: string;
            };
            header?: {
                Authorization?: string;
                "Active-Company"?: string;
                "User-Session-Uuid"?: string;
                Role?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpsertItemPriceRequestBody"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseMessageBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "create-item-price": {
        parameters: {
            query?: {
                query?: string;
                order?: string;
                column?: string;
                parentId?: string;
            };
            header?: {
                Authorization?: string;
                "Active-Company"?: string;
                "User-Session-Uuid"?: string;
                Role?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateItemPriceRequestBody"];
            };
        };
        responses: {
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseMessageBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "get-item-price-detail": {
        parameters: {
            query?: {
                query?: string;
                order?: string;
                column?: string;
                parentId?: string;
                party?: string;
            };
            header?: {
                Authorization?: string;
                "Active-Company"?: string;
                "User-Session-Uuid"?: string;
                Role?: string;
            };
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EntityResponseResultEntityItemPriceBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "get-item-prices-for-order": {
        parameters: {
            query: {
                query?: string;
                order?: string;
                column?: string;
                parentId?: string;
                currency: string;
                isBuying?: boolean;
                isSelling?: boolean;
                enabled?: string;
            };
            header?: {
                Authorization?: string;
                "Active-Company"?: string;
                "User-Session-Uuid"?: string;
                Role?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EntityResponseResultEntityListItemPriceDtoBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "get-list-by-item": {
        parameters: {
            query: {
                page: string;
                size: string;
                enabled?: string;
                query?: string;
                order?: string;
                column?: string;
                parentId?: string;
            };
            header?: {
                Authorization?: string;
                "Active-Company"?: string;
                "User-Session-Uuid"?: string;
                Role?: string;
            };
            path: {
                itemCode: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginationResponsePaginationResultListItemPriceBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "edit-item-to-warehouse": {
        parameters: {
            query?: {
                query?: string;
                order?: string;
                column?: string;
                parentId?: string;
            };
            header?: {
                Authorization?: string;
                "Active-Company"?: string;
                "User-Session-Uuid"?: string;
                Role?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AddStockLevelRequestBody"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseMessageBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "add-item-to-warehouse": {
        parameters: {
            query?: {
                query?: string;
                order?: string;
                column?: string;
                parentId?: string;
            };
            header?: {
                Authorization?: string;
                "Active-Company"?: string;
                "User-Session-Uuid"?: string;
                Role?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AddStockLevelRequestBody"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseMessageBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "get-item-stock-levels": {
        parameters: {
            query: {
                page: string;
                size: string;
                enabled?: string;
                query?: string;
                order?: string;
                column?: string;
                parentId?: string;
            };
            header?: {
                Authorization?: string;
                "Active-Company"?: string;
                "User-Session-Uuid"?: string;
                Role?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginationResponsePaginationResultListStockLevelBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "get-warehouse-stock-levels": {
        parameters: {
            query: {
                page: string;
                size: string;
                enabled?: string;
                query?: string;
                order?: string;
                column?: string;
                parentId?: string;
            };
            header?: {
                Authorization?: string;
                "Active-Company"?: string;
                "User-Session-Uuid"?: string;
                Role?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginationResponsePaginationResultListStockLevelBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "get-price-lists": {
        parameters: {
            query: {
                page: string;
                size: string;
                enabled?: string;
                query?: string;
                order?: string;
                column?: string;
                parentId?: string;
            };
            header?: {
                Authorization?: string;
                "Active-Company"?: string;
                "User-Session-Uuid"?: string;
                Role?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginationResponsePaginationResultListItemPriceListBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "update-item-price-list": {
        parameters: {
            query?: {
                query?: string;
                order?: string;
                column?: string;
                parentId?: string;
            };
            header?: {
                Authorization?: string;
                "Active-Company"?: string;
                "User-Session-Uuid"?: string;
                Role?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpsertPriceListRequestBody"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseMessageBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "create-price-list": {
        parameters: {
            query?: {
                query?: string;
                order?: string;
                column?: string;
                parentId?: string;
            };
            header?: {
                Authorization?: string;
                "Active-Company"?: string;
                "User-Session-Uuid"?: string;
                Role?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreatePriceListRequestBody"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseMessageBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "get-price-list-detail": {
        parameters: {
            query?: {
                query?: string;
                order?: string;
                column?: string;
                parentId?: string;
                party?: string;
            };
            header?: {
                Authorization?: string;
                "Active-Company"?: string;
                "User-Session-Uuid"?: string;
                Role?: string;
            };
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EntityResponseItemPriceListBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "get-variant-from-item": {
        parameters: {
            query: {
                page: string;
                size: string;
                enabled?: string;
                query?: string;
                order?: string;
                column?: string;
                parentId?: string;
            };
            header?: {
                Authorization?: string;
                "Active-Company"?: string;
                "User-Session-Uuid"?: string;
                Role?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginationResponsePaginationResultListItemVariantBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "create-item-variant": {
        parameters: {
            query?: {
                query?: string;
                order?: string;
                column?: string;
                parentId?: string;
            };
            header?: {
                Authorization?: string;
                "Active-Company"?: string;
                "User-Session-Uuid"?: string;
                Role?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateItemVariantRequestBody"];
            };
        };
        responses: {
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseMessageBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "get-item-detail": {
        parameters: {
            query?: {
                query?: string;
                order?: string;
                column?: string;
                parentId?: string;
                party?: string;
            };
            header?: {
                Authorization?: string;
                "Active-Company"?: string;
                "User-Session-Uuid"?: string;
                Role?: string;
            };
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EntityResponseResultEntityItemBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "get-warehouses": {
        parameters: {
            query: {
                page: string;
                size: string;
                enabled?: string;
                query?: string;
                order?: string;
                column?: string;
                parentId?: string;
            };
            header?: {
                Authorization?: string;
                "Active-Company"?: string;
                "User-Session-Uuid"?: string;
                Role?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginationResponsePaginationResultListWareHouseBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "create-warehouse": {
        parameters: {
            query?: {
                query?: string;
                order?: string;
                column?: string;
                parentId?: string;
            };
            header?: {
                Authorization?: string;
                "Active-Company"?: string;
                "User-Session-Uuid"?: string;
                Role?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateWareHouseRequestBody"];
            };
        };
        responses: {
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseMessageBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "get-warehouse-detail": {
        parameters: {
            query?: {
                query?: string;
                order?: string;
                column?: string;
                parentId?: string;
                party?: string;
            };
            header?: {
                Authorization?: string;
                "Active-Company"?: string;
                "User-Session-Uuid"?: string;
                Role?: string;
            };
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EntityResponseWareHouseBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "get suppliers": {
        parameters: {
            query: {
                page: string;
                size: string;
                enabled?: string;
                query?: string;
                order?: string;
                column?: string;
                parentId?: string;
            };
            header?: {
                Authorization?: string;
                "Active-Company"?: string;
                "User-Session-Uuid"?: string;
                Role?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginationResponsePaginationResultListSupplierDtoBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "create supplier": {
        parameters: {
            query?: {
                query?: string;
                order?: string;
                column?: string;
                parentId?: string;
            };
            header?: {
                Authorization?: string;
                "Active-Company"?: string;
                "User-Session-Uuid"?: string;
                Role?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateSupplierRequestBody"];
            };
        };
        responses: {
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseMessageBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "get supplier": {
        parameters: {
            query?: {
                query?: string;
                order?: string;
                column?: string;
                parentId?: string;
                party?: string;
            };
            header?: {
                Authorization?: string;
                "Active-Company"?: string;
                "User-Session-Uuid"?: string;
                Role?: string;
            };
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EntityResponseResultEntitySupplierDtoBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "get-item-price": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TecluMobilityRequestItemPriceBody"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EntityResponseItemPriceBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "create-order": {
        parameters: {
            query?: never;
            header?: {
                "Accept-Language"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TecluMobilityOrderRequestBody"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TecluMobilityOrderResponseBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    uom: {
        parameters: {
            query?: {
                query?: string;
                order?: string;
                column?: string;
                parentId?: string;
            };
            header?: {
                Authorization?: string;
                "Active-Company"?: string;
                "User-Session-Uuid"?: string;
                Role?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UOMsResponseBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "get company user profiles": {
        parameters: {
            query: {
                page: string;
                size: string;
                enabled?: string;
                query?: string;
                order?: string;
                column?: string;
                parentId?: string;
            };
            header?: {
                Authorization?: string;
                "Active-Company"?: string;
                "User-Session-Uuid"?: string;
                Role?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginationResponsePaginationResultListProfileLBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "create user": {
        parameters: {
            query?: {
                query?: string;
                order?: string;
                column?: string;
                parentId?: string;
            };
            header?: {
                Authorization?: string;
                "Active-Company"?: string;
                "User-Session-Uuid"?: string;
                Role?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateUserRequestBody"];
            };
        };
        responses: {
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseMessageBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "get profile detail": {
        parameters: {
            query?: {
                query?: string;
                order?: string;
                column?: string;
                parentId?: string;
                party?: string;
            };
            header?: {
                Authorization?: string;
                "Active-Company"?: string;
                "User-Session-Uuid"?: string;
                Role?: string;
            };
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EntityResponseResultEntityProfileDtoBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
}
