// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               v3.9.1
// source: common.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "erp.api_v1";

export enum RegatePartyType {
  court = 0,
  booking = 1,
  eventBooking = 2,
  regateChart = 3,
  UNRECOGNIZED = -1,
}

export function regatePartyTypeFromJSON(object: any): RegatePartyType {
  switch (object) {
    case 0:
    case "court":
      return RegatePartyType.court;
    case 1:
    case "booking":
      return RegatePartyType.booking;
    case 2:
    case "eventBooking":
      return RegatePartyType.eventBooking;
    case 3:
    case "regateChart":
      return RegatePartyType.regateChart;
    case -1:
    case "UNRECOGNIZED":
    default:
      return RegatePartyType.UNRECOGNIZED;
  }
}

export function regatePartyTypeToJSON(object: RegatePartyType): string {
  switch (object) {
    case RegatePartyType.court:
      return "court";
    case RegatePartyType.booking:
      return "booking";
    case RegatePartyType.eventBooking:
      return "eventBooking";
    case RegatePartyType.regateChart:
      return "regateChart";
    case RegatePartyType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum PartyType {
  /** supplierGroup - 1 - 1 */
  supplierGroup = 0,
  /** itemGroup - 2 - 1 */
  itemGroup = 1,
  /** warehouse - 3 - 1 */
  warehouse = 2,
  /** stockLevel - 4 - 1 */
  stockLevel = 3,
  /** item - 5 - 1 */
  item = 4,
  /** itemAttribute - 6 - 1 */
  itemAttribute = 5,
  /** itemPrice - 7 - 1 */
  itemPrice = 6,
  /** supplier - 8 - 1 */
  supplier = 7,
  /** purchaseOrder - 9 - 1 */
  purchaseOrder = 8,
  /** tax - 10 - 1 */
  tax = 9,
  /** customer - 11 - 1 */
  customer = 10,
  /** customerGroup - 12 - 1 */
  customerGroup = 11,
  /** admin - 13 - 1 */
  admin = 12,
  /** employee - 14 - 1 */
  employee = 13,
  /** client - 15 - 1 */
  client = 14,
  /** address - 16 - 1 */
  address = 15,
  /** contact - 17 - 1 */
  contact = 16,
  /** purchaseInvoice - 18 - 1 */
  purchaseInvoice = 17,
  /** company - 19 - 1 */
  company = 18,
  payment = 19,
  ledger = 20,
  purchaseReceipt = 21,
  priceList = 22,
  saleOrder = 23,
  saleInvoice = 24,
  UNRECOGNIZED = -1,
}

export function partyTypeFromJSON(object: any): PartyType {
  switch (object) {
    case 0:
    case "supplierGroup":
      return PartyType.supplierGroup;
    case 1:
    case "itemGroup":
      return PartyType.itemGroup;
    case 2:
    case "warehouse":
      return PartyType.warehouse;
    case 3:
    case "stockLevel":
      return PartyType.stockLevel;
    case 4:
    case "item":
      return PartyType.item;
    case 5:
    case "itemAttribute":
      return PartyType.itemAttribute;
    case 6:
    case "itemPrice":
      return PartyType.itemPrice;
    case 7:
    case "supplier":
      return PartyType.supplier;
    case 8:
    case "purchaseOrder":
      return PartyType.purchaseOrder;
    case 9:
    case "tax":
      return PartyType.tax;
    case 10:
    case "customer":
      return PartyType.customer;
    case 11:
    case "customerGroup":
      return PartyType.customerGroup;
    case 12:
    case "admin":
      return PartyType.admin;
    case 13:
    case "employee":
      return PartyType.employee;
    case 14:
    case "client":
      return PartyType.client;
    case 15:
    case "address":
      return PartyType.address;
    case 16:
    case "contact":
      return PartyType.contact;
    case 17:
    case "purchaseInvoice":
      return PartyType.purchaseInvoice;
    case 18:
    case "company":
      return PartyType.company;
    case 19:
    case "payment":
      return PartyType.payment;
    case 20:
    case "ledger":
      return PartyType.ledger;
    case 21:
    case "purchaseReceipt":
      return PartyType.purchaseReceipt;
    case 22:
    case "priceList":
      return PartyType.priceList;
    case 23:
    case "saleOrder":
      return PartyType.saleOrder;
    case 24:
    case "saleInvoice":
      return PartyType.saleInvoice;
    case -1:
    case "UNRECOGNIZED":
    default:
      return PartyType.UNRECOGNIZED;
  }
}

export function partyTypeToJSON(object: PartyType): string {
  switch (object) {
    case PartyType.supplierGroup:
      return "supplierGroup";
    case PartyType.itemGroup:
      return "itemGroup";
    case PartyType.warehouse:
      return "warehouse";
    case PartyType.stockLevel:
      return "stockLevel";
    case PartyType.item:
      return "item";
    case PartyType.itemAttribute:
      return "itemAttribute";
    case PartyType.itemPrice:
      return "itemPrice";
    case PartyType.supplier:
      return "supplier";
    case PartyType.purchaseOrder:
      return "purchaseOrder";
    case PartyType.tax:
      return "tax";
    case PartyType.customer:
      return "customer";
    case PartyType.customerGroup:
      return "customerGroup";
    case PartyType.admin:
      return "admin";
    case PartyType.employee:
      return "employee";
    case PartyType.client:
      return "client";
    case PartyType.address:
      return "address";
    case PartyType.contact:
      return "contact";
    case PartyType.purchaseInvoice:
      return "purchaseInvoice";
    case PartyType.company:
      return "company";
    case PartyType.payment:
      return "payment";
    case PartyType.ledger:
      return "ledger";
    case PartyType.purchaseReceipt:
      return "purchaseReceipt";
    case PartyType.priceList:
      return "priceList";
    case PartyType.saleOrder:
      return "saleOrder";
    case PartyType.saleInvoice:
      return "saleInvoice";
    case PartyType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum PianoPartyType {
  pianoForms = 0,
  UNRECOGNIZED = -1,
}

export function pianoPartyTypeFromJSON(object: any): PianoPartyType {
  switch (object) {
    case 0:
    case "pianoForms":
      return PianoPartyType.pianoForms;
    case -1:
    case "UNRECOGNIZED":
    default:
      return PianoPartyType.UNRECOGNIZED;
  }
}

export function pianoPartyTypeToJSON(object: PianoPartyType): string {
  switch (object) {
    case PianoPartyType.pianoForms:
      return "pianoForms";
    case PianoPartyType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum State {
  /** UNSPECIFIED - State is unspecified */
  UNSPECIFIED = 0,
  /** DRAFT - The purchase order is created but not submitted */
  DRAFT = 1,
  /** PENDING - Awaiting approval from relevant authority */
  PENDING = 2,
  /** APPROVED - The purchase order has been approved */
  APPROVED = 3,
  /** BILLED_AWAITING_PAYMENT - Invoice has been issued, awaiting payment */
  BILLED_AWAITING_PAYMENT = 4,
  /** UNPAID - Invoice exists but payment is pending */
  UNPAID = 5,
  /** PARTIALLY_PAID - Part of the purchase order amount has been paid */
  PARTIALLY_PAID = 6,
  /** SHIPPED - Goods/services have been shipped */
  SHIPPED = 7,
  /** RECEIVED - Goods/services have been received */
  RECEIVED = 8,
  /** COMPLETED - All processes finalized */
  COMPLETED = 9,
  /** CANCELLED - The purchase order has been cancelled */
  CANCELLED = 10,
  /** ON_HOLD - The purchase order is temporarily on hold */
  ON_HOLD = 11,
  /** RETURNED - Items have been returned to the vendor */
  RETURNED = 12,
  /** CLOSED - The purchase order is closed */
  CLOSED = 13,
  OVERDUE = 14,
  TO_BILL = 15,
  TO_RECEIVE = 16,
  TO_RECEIVE_AND_BILL = 17,
  SUBMITTED = 18,
  UNRECOGNIZED = -1,
}

export function stateFromJSON(object: any): State {
  switch (object) {
    case 0:
    case "UNSPECIFIED":
      return State.UNSPECIFIED;
    case 1:
    case "DRAFT":
      return State.DRAFT;
    case 2:
    case "PENDING":
      return State.PENDING;
    case 3:
    case "APPROVED":
      return State.APPROVED;
    case 4:
    case "BILLED_AWAITING_PAYMENT":
      return State.BILLED_AWAITING_PAYMENT;
    case 5:
    case "UNPAID":
      return State.UNPAID;
    case 6:
    case "PARTIALLY_PAID":
      return State.PARTIALLY_PAID;
    case 7:
    case "SHIPPED":
      return State.SHIPPED;
    case 8:
    case "RECEIVED":
      return State.RECEIVED;
    case 9:
    case "COMPLETED":
      return State.COMPLETED;
    case 10:
    case "CANCELLED":
      return State.CANCELLED;
    case 11:
    case "ON_HOLD":
      return State.ON_HOLD;
    case 12:
    case "RETURNED":
      return State.RETURNED;
    case 13:
    case "CLOSED":
      return State.CLOSED;
    case 14:
    case "OVERDUE":
      return State.OVERDUE;
    case 15:
    case "TO_BILL":
      return State.TO_BILL;
    case 16:
    case "TO_RECEIVE":
      return State.TO_RECEIVE;
    case 17:
    case "TO_RECEIVE_AND_BILL":
      return State.TO_RECEIVE_AND_BILL;
    case 18:
    case "SUBMITTED":
      return State.SUBMITTED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return State.UNRECOGNIZED;
  }
}

export function stateToJSON(object: State): string {
  switch (object) {
    case State.UNSPECIFIED:
      return "UNSPECIFIED";
    case State.DRAFT:
      return "DRAFT";
    case State.PENDING:
      return "PENDING";
    case State.APPROVED:
      return "APPROVED";
    case State.BILLED_AWAITING_PAYMENT:
      return "BILLED_AWAITING_PAYMENT";
    case State.UNPAID:
      return "UNPAID";
    case State.PARTIALLY_PAID:
      return "PARTIALLY_PAID";
    case State.SHIPPED:
      return "SHIPPED";
    case State.RECEIVED:
      return "RECEIVED";
    case State.COMPLETED:
      return "COMPLETED";
    case State.CANCELLED:
      return "CANCELLED";
    case State.ON_HOLD:
      return "ON_HOLD";
    case State.RETURNED:
      return "RETURNED";
    case State.CLOSED:
      return "CLOSED";
    case State.OVERDUE:
      return "OVERDUE";
    case State.TO_BILL:
      return "TO_BILL";
    case State.TO_RECEIVE:
      return "TO_RECEIVE";
    case State.TO_RECEIVE_AND_BILL:
      return "TO_RECEIVE_AND_BILL";
    case State.SUBMITTED:
      return "SUBMITTED";
    case State.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum EventState {
  UNSPECIFIED_EVENT = 0,
  /** SUBMIT_EVENT - used to transition state from DRAFT to other state */
  SUBMIT_EVENT = 1,
  /** CANCEL_EVENT - used to transition from any state to  CANCELLED */
  CANCEL_EVENT = 2,
  /** APPROVED_EVENT - used to transition from any state to APPROVED */
  APPROVED_EVENT = 3,
  /** COMPLETED_EVENT - used to transition from any state to APPROVED */
  COMPLETED_EVENT = 4,
  UNRECOGNIZED = -1,
}

export function eventStateFromJSON(object: any): EventState {
  switch (object) {
    case 0:
    case "UNSPECIFIED_EVENT":
      return EventState.UNSPECIFIED_EVENT;
    case 1:
    case "SUBMIT_EVENT":
      return EventState.SUBMIT_EVENT;
    case 2:
    case "CANCEL_EVENT":
      return EventState.CANCEL_EVENT;
    case 3:
    case "APPROVED_EVENT":
      return EventState.APPROVED_EVENT;
    case 4:
    case "COMPLETED_EVENT":
      return EventState.COMPLETED_EVENT;
    case -1:
    case "UNRECOGNIZED":
    default:
      return EventState.UNRECOGNIZED;
  }
}

export function eventStateToJSON(object: EventState): string {
  switch (object) {
    case EventState.UNSPECIFIED_EVENT:
      return "UNSPECIFIED_EVENT";
    case EventState.SUBMIT_EVENT:
      return "SUBMIT_EVENT";
    case EventState.CANCEL_EVENT:
      return "CANCEL_EVENT";
    case EventState.APPROVED_EVENT:
      return "APPROVED_EVENT";
    case EventState.COMPLETED_EVENT:
      return "COMPLETED_EVENT";
    case EventState.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum PaymentType {
  RECEIVE = 0,
  PAY = 1,
  INTERNAL_TRANSFER = 2,
  UNRECOGNIZED = -1,
}

export function paymentTypeFromJSON(object: any): PaymentType {
  switch (object) {
    case 0:
    case "RECEIVE":
      return PaymentType.RECEIVE;
    case 1:
    case "PAY":
      return PaymentType.PAY;
    case 2:
    case "INTERNAL_TRANSFER":
      return PaymentType.INTERNAL_TRANSFER;
    case -1:
    case "UNRECOGNIZED":
    default:
      return PaymentType.UNRECOGNIZED;
  }
}

export function paymentTypeToJSON(object: PaymentType): string {
  switch (object) {
    case PaymentType.RECEIVE:
      return "RECEIVE";
    case PaymentType.PAY:
      return "PAY";
    case PaymentType.INTERNAL_TRANSFER:
      return "INTERNAL_TRANSFER";
    case PaymentType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum AccountRootType {
  ASSET = 0,
  LIABILITIES = 1,
  REVENUE = 2,
  EXPENSE = 3,
  UNRECOGNIZED = -1,
}

export function accountRootTypeFromJSON(object: any): AccountRootType {
  switch (object) {
    case 0:
    case "ASSET":
      return AccountRootType.ASSET;
    case 1:
    case "LIABILITIES":
      return AccountRootType.LIABILITIES;
    case 2:
    case "REVENUE":
      return AccountRootType.REVENUE;
    case 3:
    case "EXPENSE":
      return AccountRootType.EXPENSE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return AccountRootType.UNRECOGNIZED;
  }
}

export function accountRootTypeToJSON(object: AccountRootType): string {
  switch (object) {
    case AccountRootType.ASSET:
      return "ASSET";
    case AccountRootType.LIABILITIES:
      return "LIABILITIES";
    case AccountRootType.REVENUE:
      return "REVENUE";
    case AccountRootType.EXPENSE:
      return "EXPENSE";
    case AccountRootType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum ItemLineType {
  ITEM_LINE_ORDER = 0,
  ITEM_LINE_INVOICE = 1,
  ITEM_LINE_RECEIPT = 2,
  UNRECOGNIZED = -1,
}

export function itemLineTypeFromJSON(object: any): ItemLineType {
  switch (object) {
    case 0:
    case "ITEM_LINE_ORDER":
      return ItemLineType.ITEM_LINE_ORDER;
    case 1:
    case "ITEM_LINE_INVOICE":
      return ItemLineType.ITEM_LINE_INVOICE;
    case 2:
    case "ITEM_LINE_RECEIPT":
      return ItemLineType.ITEM_LINE_RECEIPT;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ItemLineType.UNRECOGNIZED;
  }
}

export function itemLineTypeToJSON(object: ItemLineType): string {
  switch (object) {
    case ItemLineType.ITEM_LINE_ORDER:
      return "ITEM_LINE_ORDER";
    case ItemLineType.ITEM_LINE_INVOICE:
      return "ITEM_LINE_INVOICE";
    case ItemLineType.ITEM_LINE_RECEIPT:
      return "ITEM_LINE_RECEIPT";
    case ItemLineType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum BookingType {
  LOCAL_BOOKING = 0,
  EVENT_BOOKING = 1,
  UNRECOGNIZED = -1,
}

export function bookingTypeFromJSON(object: any): BookingType {
  switch (object) {
    case 0:
    case "LOCAL_BOOKING":
      return BookingType.LOCAL_BOOKING;
    case 1:
    case "EVENT_BOOKING":
      return BookingType.EVENT_BOOKING;
    case -1:
    case "UNRECOGNIZED":
    default:
      return BookingType.UNRECOGNIZED;
  }
}

export function bookingTypeToJSON(object: BookingType): string {
  switch (object) {
    case BookingType.LOCAL_BOOKING:
      return "LOCAL_BOOKING";
    case BookingType.EVENT_BOOKING:
      return "EVENT_BOOKING";
    case BookingType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum ActivityType {
  CREATE = 0,
  EDIT = 1,
  DELETE = 2,
  COMMENT = 3,
  EDIT_PAID_AMOUT = 4,
  UPDATE_STATUS = 5,
  UNRECOGNIZED = -1,
}

export function activityTypeFromJSON(object: any): ActivityType {
  switch (object) {
    case 0:
    case "CREATE":
      return ActivityType.CREATE;
    case 1:
    case "EDIT":
      return ActivityType.EDIT;
    case 2:
    case "DELETE":
      return ActivityType.DELETE;
    case 3:
    case "COMMENT":
      return ActivityType.COMMENT;
    case 4:
    case "EDIT_PAID_AMOUT":
      return ActivityType.EDIT_PAID_AMOUT;
    case 5:
    case "UPDATE_STATUS":
      return ActivityType.UPDATE_STATUS;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ActivityType.UNRECOGNIZED;
  }
}

export function activityTypeToJSON(object: ActivityType): string {
  switch (object) {
    case ActivityType.CREATE:
      return "CREATE";
    case ActivityType.EDIT:
      return "EDIT";
    case ActivityType.DELETE:
      return "DELETE";
    case ActivityType.COMMENT:
      return "COMMENT";
    case ActivityType.EDIT_PAID_AMOUT:
      return "EDIT_PAID_AMOUT";
    case ActivityType.UPDATE_STATUS:
      return "UPDATE_STATUS";
    case ActivityType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum TimeUnit {
  hour = 0,
  day = 1,
  week = 2,
  month = 3,
  year = 4,
  UNRECOGNIZED = -1,
}

export function timeUnitFromJSON(object: any): TimeUnit {
  switch (object) {
    case 0:
    case "hour":
      return TimeUnit.hour;
    case 1:
    case "day":
      return TimeUnit.day;
    case 2:
    case "week":
      return TimeUnit.week;
    case 3:
    case "month":
      return TimeUnit.month;
    case 4:
    case "year":
      return TimeUnit.year;
    case -1:
    case "UNRECOGNIZED":
    default:
      return TimeUnit.UNRECOGNIZED;
  }
}

export function timeUnitToJSON(object: TimeUnit): string {
  switch (object) {
    case TimeUnit.hour:
      return "hour";
    case TimeUnit.day:
      return "day";
    case TimeUnit.week:
      return "week";
    case TimeUnit.month:
      return "month";
    case TimeUnit.year:
      return "year";
    case TimeUnit.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum ChartType {
  INCOME = 0,
  INCOME_AVG = 1,
  BOOKING_HOUR = 2,
  BOOKING_HOUR_AVG = 3,
  UNRECOGNIZED = -1,
}

export function chartTypeFromJSON(object: any): ChartType {
  switch (object) {
    case 0:
    case "INCOME":
      return ChartType.INCOME;
    case 1:
    case "INCOME_AVG":
      return ChartType.INCOME_AVG;
    case 2:
    case "BOOKING_HOUR":
      return ChartType.BOOKING_HOUR;
    case 3:
    case "BOOKING_HOUR_AVG":
      return ChartType.BOOKING_HOUR_AVG;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ChartType.UNRECOGNIZED;
  }
}

export function chartTypeToJSON(object: ChartType): string {
  switch (object) {
    case ChartType.INCOME:
      return "INCOME";
    case ChartType.INCOME_AVG:
      return "INCOME_AVG";
    case ChartType.BOOKING_HOUR:
      return "BOOKING_HOUR";
    case ChartType.BOOKING_HOUR_AVG:
      return "BOOKING_HOUR_AVG";
    case ChartType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum Module {
  accounting = 0,
  stock = 1,
  selling = 2,
  buying = 3,
  UNRECOGNIZED = -1,
}

export function moduleFromJSON(object: any): Module {
  switch (object) {
    case 0:
    case "accounting":
      return Module.accounting;
    case 1:
    case "stock":
      return Module.stock;
    case 2:
    case "selling":
      return Module.selling;
    case 3:
    case "buying":
      return Module.buying;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Module.UNRECOGNIZED;
  }
}

export function moduleToJSON(object: Module): string {
  switch (object) {
    case Module.accounting:
      return "accounting";
    case Module.stock:
      return "stock";
    case Module.selling:
      return "selling";
    case Module.buying:
      return "buying";
    case Module.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface Result {
  message: string;
}

function createBaseResult(): Result {
  return { message: "" };
}

export const Result: MessageFns<Result> = {
  encode(message: Result, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.message !== "") {
      writer.uint32(10).string(message.message);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Result {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResult();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.message = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Result {
    return { message: isSet(object.message) ? globalThis.String(object.message) : "" };
  },

  toJSON(message: Result): unknown {
    const obj: any = {};
    if (message.message !== "") {
      obj.message = message.message;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Result>, I>>(base?: I): Result {
    return Result.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Result>, I>>(object: I): Result {
    const message = createBaseResult();
    message.message = object.message ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
