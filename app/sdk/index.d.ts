/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/account": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get user account */
        get: operations["get-account"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/account/sign-in": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Sign in a user */
        post: operations["sign-in"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/company": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get User companies */
        get: operations["companies"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cuatropf/subscription/{companyUuid}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Cuatropf Subscription */
        post: operations["cuatropf-subscription"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/greeting/{name}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get greeting by name */
        get: operations["get-greeting-by-name"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/payment/webhook": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Payment square wenhook */
        post: operations["payment-webhook"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/plugin": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get available plugins */
        get: operations["plugins"];
        put?: never;
        /** Add plugin */
        post: operations["add-plugin"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/plugin/{plugin}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get plugin from company */
        get: operations["get-plugin"];
        /** Update plugin credentials */
        put: operations["update-plugin-credentials"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/selling/salesorder/client": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get client sales orders */
        get: operations["client-sales-orders"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/selling/salesorder/{code}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get sales order detail */
        get: operations["sale-order-detail"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/square/subscription/cancel": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Cancel square subscription */
        post: operations["cancel-square-subscription"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/square/{uuid}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get square catalog */
        get: operations["get-catalog-square"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/square/{uuid}/{object_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get square object */
        get: operations["get-object-square"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/stock/item": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create item */
        post: operations["create-item"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/stock/item-group": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Item groups */
        get: operations["item-group"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/stock/item/item-price": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Update item price */
        put: operations["update-item-price"];
        /** Create item price */
        post: operations["create-item-price"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/stock/item/item-price/{itemCode}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Item Prices
         * @description Retrieve Item Prices by Item Code
         */
        get: operations["get-item-prices"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/stock/item/price-list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieve Price List items */
        get: operations["get-price-lists"];
        /** Update item price list */
        put: operations["update-item-price-list"];
        /** Create item price list */
        post: operations["create-item-price-list"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/stock/item/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieve item detail base on code */
        get: operations["get-item-detail"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/uom": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieve UOMs (Units of Measure) */
        get: operations["uom"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        AccountResponseBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            appConfig: components["schemas"]["AppConfigStruct"];
            user: components["schemas"]["User"];
        };
        AddPluginRequestBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            plugin: string;
        };
        AddPluginResponseBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            company_plugin: components["schemas"]["CompanyPlugins"];
        };
        Administrator: {
            /** Format: date-time */
            CreatedAt: string;
            DeletedAt: components["schemas"]["DeletedAt"];
            EmailAddress: string;
            FirstName: string;
            /** Format: int64 */
            ID: number;
            LastName: string;
            /** Format: date-time */
            UpdatedAt: string;
            /** Format: int64 */
            UserID: number;
            Uuid: string;
        };
        Amount: {
            /** Format: int64 */
            amount: number;
            currency: string;
        };
        AmountMoneyStruct: {
            /** Format: int64 */
            amount: number;
            currency: string;
        };
        AppConfigStruct: {
            plugins: components["schemas"]["PluginApp"][];
        };
        ApplicationDetailsStruct: {
            application_id: string;
            square_product: string;
        };
        ApprovedMoneyStruct: {
            /** Format: int64 */
            amount: number;
            currency: string;
        };
        CardDetailsStruct: {
            avs_status: string;
            card: components["schemas"]["CardStruct"];
            card_payment_timeline: components["schemas"]["CardPaymentTimelineStruct"];
            cvv_status: string;
            entry_method: string;
            statement_description: string;
            status: string;
        };
        CardPaymentTimelineStruct: {
            /** Format: date-time */
            authorized_at: string;
            /** Format: date-time */
            captured_at: string;
        };
        CardStruct: {
            bin: string;
            card_brand: string;
            card_type: string;
            /** Format: int64 */
            exp_month: number;
            /** Format: int64 */
            exp_year: number;
            fingerprint: string;
            last_4: string;
            prepaid_type: string;
        };
        Client: {
            Company: components["schemas"]["Company"];
            /** Format: int64 */
            CompanyID: number;
            CountryCode: string;
            /** Format: date-time */
            CreatedAt: string;
            DeletedAt: components["schemas"]["DeletedAt"];
            EmailAddress: string;
            FamilyName: string;
            GivenName: string;
            /** Format: int64 */
            ID: number;
            OrganizationName: string;
            PhoneNumber: string;
            /** Format: date-time */
            UpdatedAt: string;
            /** Format: int64 */
            UserID: number;
            Uuid: string;
        };
        Company: {
            CompanyPlugins: components["schemas"]["CompanyPlugins"][];
            /** Format: date-time */
            CreatedAt: string;
            DeletedAt: components["schemas"]["DeletedAt"];
            /** Format: int64 */
            ID: number;
            IsParent: boolean;
            Name: string;
            Parent: components["schemas"]["Company"];
            /** Format: int64 */
            ParentID: number | null;
            /** Format: date-time */
            UpdatedAt: string;
            Users: components["schemas"]["User"][];
            Uuid: string;
        };
        CompanyPlugins: {
            /** Format: int64 */
            CompanyID?: number;
            Credentials?: string;
            Plugin: string;
        };
        Country: {
            code: string;
            label: string;
            phone: string;
        };
        CreateItemRequestBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            item: components["schemas"]["ItemDto"];
            itemPrice?: components["schemas"]["ItemPriceDto"];
            plugins?: components["schemas"]["CompanyPlugins"][];
        };
        CuatropfSubscriptionRequestBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            companyName: string;
            country: components["schemas"]["Country"];
            email: string;
            familyName: string;
            givenName: string;
            metadata: string;
            phoneNumber: string;
            plugins?: components["schemas"]["CompanyPlugins"][];
        };
        DataStruct: {
            id: string;
            object: components["schemas"]["ObjectStruct"];
            type: string;
        };
        DeletedAt: {
            /** Format: date-time */
            Time: string;
            Valid: boolean;
        };
        EntityResponseResponseSalesOrderDetailBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            result: components["schemas"]["ResponseSalesOrderDetail"];
        };
        EntityResponseResultEntityItemBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            result: components["schemas"]["ResultEntityItem"];
        };
        ErrorDetail: {
            /** @description Where the error occurred, e.g. 'body.items[3].tags' or 'path.thing-id' */
            location?: string;
            /** @description Error message text */
            message?: string;
            /** @description The value at the given location */
            value?: unknown;
        };
        ErrorModel: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            /** @description A human-readable explanation specific to this occurrence of the problem. */
            detail?: string;
            /** @description Optional list of individual error details */
            errors?: components["schemas"]["ErrorDetail"][];
            /**
             * Format: uri
             * @description A URI reference that identifies the specific occurrence of the problem.
             */
            instance?: string;
            /**
             * Format: int64
             * @description HTTP status code
             */
            status?: number;
            /** @description A short, human-readable summary of the problem type. This value should not change between occurrences of the error. */
            title?: string;
            /**
             * Format: uri
             * @description A URI reference to human-readable documentation for the error.
             * @default about:blank
             */
            type: string;
        };
        GreetingOutputBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            /** @description Greeting message */
            message: string;
        };
        Item: {
            Code: string;
            Company: components["schemas"]["Company"];
            /** Format: int64 */
            CompanyID: number;
            /** Format: date-time */
            CreatedAt: string;
            DeletedAt: components["schemas"]["DeletedAt"];
            /** Format: int64 */
            ID: number;
            ItemGroup: components["schemas"]["ItemGroup"];
            /** Format: int64 */
            ItemGroupID: number;
            Name: string;
            UnitOfMeasure: components["schemas"]["UnitOfMeasure"];
            /** Format: int64 */
            UnitOfMeasureID: number;
            /** Format: date-time */
            UpdatedAt: string;
            Uuid: string;
        };
        ItemDto: {
            code: string;
            /** Format: int64 */
            itemGroupId: number;
            name: string;
            uom: components["schemas"]["UnitOfMeasureTranslation"];
        };
        ItemGroup: {
            Company: components["schemas"]["Company"];
            /** Format: int64 */
            CompanyID: number;
            /** Format: date-time */
            CreatedAt: string;
            DeletedAt: components["schemas"]["DeletedAt"];
            /** Format: int64 */
            ID: number;
            IsParent: boolean;
            Name: string;
            Parent: components["schemas"]["ItemGroup"];
            /** Format: int64 */
            ParentID: number | null;
            /** Format: date-time */
            UpdatedAt: string;
            Uuid: string;
        };
        ItemPrice: {
            Code: string;
            Company: components["schemas"]["Company"];
            /** Format: int64 */
            CompanyID: number;
            /** Format: date-time */
            CreatedAt: string;
            DeletedAt: components["schemas"]["DeletedAt"];
            /** Format: int64 */
            ID: number;
            Item: components["schemas"]["Item"];
            /** Format: int64 */
            ItemID: number;
            ItemPriceList: components["schemas"]["ItemPriceList"];
            /** Format: int64 */
            ItemPriceListID: number;
            /** Format: int64 */
            ItemQuantity: number;
            /** Format: int64 */
            Rate: number;
            Tax: components["schemas"]["Tax"];
            /** Format: int64 */
            TaxID: number;
            /** Format: date-time */
            UpdatedAt: string;
            Uuid: string;
            /** Format: date-time */
            ValidFrom: string;
            /** Format: date-time */
            ValidUpTo: string | null;
        };
        ItemPriceDto: {
            /** Format: int64 */
            itemId?: number;
            /** Format: int64 */
            itemQuantity: number;
            /** Format: int64 */
            priceListId: number;
            /** Format: double */
            rate: number;
            /** Format: int64 */
            taxId: number;
            /** Format: date-time */
            validFrom?: string;
            /** Format: date-time */
            validUpTo?: string | null;
        };
        ItemPriceList: {
            /** Format: int64 */
            CompanyID: number;
            /** Format: date-time */
            CreatedAt: string;
            Currency: string;
            DeletedAt: components["schemas"]["DeletedAt"];
            /** Format: int64 */
            ID: number;
            IsBuying: boolean;
            IsSelling: boolean;
            Name: string;
            /** Format: date-time */
            UpdatedAt: string;
            Uuid: string;
        };
        NullTime: {
            /** Format: date-time */
            Time: string;
            Valid: boolean;
        };
        ObjectStruct: {
            payment: components["schemas"]["PaymentStruct"];
        };
        PaginationResponsePaginationResultListCompanyBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            pagination_result: components["schemas"]["PaginationResultListCompany"];
        };
        PaginationResponsePaginationResultListItemGroupBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            pagination_result: components["schemas"]["PaginationResultListItemGroup"];
        };
        PaginationResponsePaginationResultListItemPriceBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            pagination_result: components["schemas"]["PaginationResultListItemPrice"];
        };
        PaginationResponsePaginationResultListItemPriceListBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            pagination_result: components["schemas"]["PaginationResultListItemPriceList"];
        };
        PaginationResponsePaginationResultListSalesOrderBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            pagination_result: components["schemas"]["PaginationResultListSalesOrder"];
        };
        PaginationResultListCompany: {
            results: components["schemas"]["Company"][];
            /** Format: int64 */
            total: number;
        };
        PaginationResultListItemGroup: {
            results: components["schemas"]["ItemGroup"][];
            /** Format: int64 */
            total: number;
        };
        PaginationResultListItemPrice: {
            results: components["schemas"]["ItemPrice"][];
            /** Format: int64 */
            total: number;
        };
        PaginationResultListItemPriceList: {
            results: components["schemas"]["ItemPriceList"][];
            /** Format: int64 */
            total: number;
        };
        PaginationResultListSalesOrder: {
            results: components["schemas"]["SalesOrder"][];
            /** Format: int64 */
            total: number;
        };
        PaymentStruct: {
            amount_money: components["schemas"]["AmountMoneyStruct"];
            application_details: components["schemas"]["ApplicationDetailsStruct"];
            approved_money: components["schemas"]["ApprovedMoneyStruct"];
            buyer_email_address: string;
            card_details: components["schemas"]["CardDetailsStruct"];
            /** Format: date-time */
            created_at: string;
            customer_id: string;
            delay_action: string;
            delay_duration: string;
            /** Format: date-time */
            delayed_until: string;
            id: string;
            location_id: string;
            order_id: string;
            processing_fee: components["schemas"]["ProcessFee"][];
            receipt_number: string;
            receipt_url: string;
            source_type: string;
            status: string;
            total_money: components["schemas"]["TotalMoneyStruct"];
            /** Format: date-time */
            updated_at: string;
            /** Format: int64 */
            version: number;
        };
        PaymentWeebhookRequestBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            /** Format: date-time */
            created_at: string;
            data: components["schemas"]["DataStruct"];
            event_id: string;
            merchant_id: string;
            type: string;
        };
        Phase: {
            cadence: string;
            /** Format: int64 */
            ordinal: number;
            /** Format: int64 */
            periods: number;
            pricing: components["schemas"]["PhasePricingStruct"];
            uid: string;
        };
        PhasePricingStruct: {
            price: components["schemas"]["Amount"];
            price_money: components["schemas"]["Amount"];
            type: string;
        };
        PluginApp: {
            Name: string;
        };
        PluginDetailResponseBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            company_plugin: components["schemas"]["CompanyPlugins"];
        };
        PluginsResponseBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            plugins: components["schemas"]["PluginApp"][];
        };
        ProcessFee: {
            amount_money: components["schemas"]["ProcessFeeAmountMoneyStruct"];
            /** Format: date-time */
            effective_at: string;
            type: string;
        };
        ProcessFeeAmountMoneyStruct: {
            /** Format: int64 */
            amount: number;
            currency: string;
        };
        RequestSubscriptionCancelBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            subscriptionId: string;
        };
        ResponseMessageBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            errors: {
                [key: string]: string | undefined;
            };
            message: string;
        };
        ResponseSalesOrderDetail: {
            Body: components["schemas"]["ResponseSalesOrderDetailBodyStruct"];
        };
        ResponseSalesOrderDetailBodyStruct: {
            lines: components["schemas"]["SalesItemLine"][];
            order: components["schemas"]["SalesOrder"];
        };
        ResultEntityItem: {
            entity: components["schemas"]["Item"];
        };
        RetrieveCatalogRequest: {
            object: components["schemas"]["RetrieveCatalogRequestObjectStruct"];
        };
        RetrieveCatalogRequestObjectStruct: {
            /** Format: date-time */
            created_at: string;
            id: string;
            is_deleted: boolean;
            present_at_all_locations: boolean;
            subscription_plan_data: components["schemas"]["SubscriptionPlanDataStruct"];
            type: string;
            /** Format: date-time */
            updated_at: string;
            /** Format: int64 */
            version: number;
        };
        RetrieveObjectRequest: {
            object: components["schemas"]["RetrieveObjectRequestObjectStruct"];
        };
        RetrieveObjectRequestObjectStruct: {
            /** Format: date-time */
            created_at: string;
            id: string;
            is_deleted: boolean;
            present_at_all_locations: boolean;
            subscription_plan_variation_data: components["schemas"]["SubscriptionPlanVariationDataStruct"];
            type: string;
            /** Format: date-time */
            updated_at: string;
            /** Format: int64 */
            version: number;
        };
        Role: {
            Code: string;
            /** Format: date-time */
            CreatedAt: string;
            DeletedAt: components["schemas"]["DeletedAt"];
            Description: string;
            /** Format: int64 */
            ID: number;
            /** Format: date-time */
            UpdatedAt: string;
            Users: components["schemas"]["User"][];
            Uuid: string;
        };
        SalesItemLine: {
            /** Format: date-time */
            CreatedAt: string;
            Currency: string;
            DeletedAt?: components["schemas"]["DeletedAt"];
            /** Format: int64 */
            ID: number;
            ItemPrice: components["schemas"]["ItemPrice"];
            /** Format: int64 */
            ItemPriceID: number;
            /** Format: int64 */
            ItemQuantity: number;
            /** Format: int64 */
            Rate: number;
            /** Format: int64 */
            SalesOrderID: number;
            /** Format: date-time */
            UpdatedAt: string;
        };
        SalesOrder: {
            Client: components["schemas"]["Client"];
            /** Format: int64 */
            ClientID: number;
            Code: string;
            Company: components["schemas"]["Company"];
            /** Format: int64 */
            CompanyID: number;
            /** Format: date-time */
            CreatedAt: string;
            DeletedAt: components["schemas"]["DeletedAt"];
            /** Format: date-time */
            DeliveryDate: string;
            /** Format: int64 */
            ID: number;
            OrderType: string;
            SalesOrderPlugin: components["schemas"]["SalesOrderPlugin"][];
            /** Format: date-time */
            UpdatedAt: string;
            Uuid: string;
        };
        SalesOrderPlugin: {
            Data: string;
            Plugin: string;
            /** Format: int64 */
            SalesOrderID: number;
        };
        SignInRequestBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            /** @description Email of the user */
            email: string;
            /** @description Password of the user */
            password: string;
        };
        SignInResponseBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            /** @description Access token of the user */
            access_token: string;
            user: components["schemas"]["User"];
        };
        SquareCatalogResponseBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            catalog: components["schemas"]["RetrieveCatalogRequest"];
            objects: components["schemas"]["SquareObject"][];
        };
        SquareObject: {
            /** Format: date-time */
            CreatedAt: string;
            DeletedAt: components["schemas"]["DeletedAt"];
            /** Format: int64 */
            ItemGroupId: number;
            ItemPrice: components["schemas"]["ItemPrice"];
            /** Format: int64 */
            ItemPriceID: number;
            ObjectId: string;
            ObjectVariationId: string;
            /** Format: date-time */
            UpdatedAt: string;
        };
        SquareObjectResponseBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            plan_variation: components["schemas"]["RetrieveObjectRequest"];
            square_object: components["schemas"]["SquareObject"];
        };
        SubscriptionPlanDataStruct: {
            all_items: boolean;
            name: string;
            subscription_plan_variations: components["schemas"]["SubscriptionPlanVariation"][];
        };
        SubscriptionPlanVariation: {
            /** Format: date-time */
            created_at: string;
            id: string;
            is_deleted: boolean;
            present_at_all_locations: boolean;
            subscription_plan_variation_data: components["schemas"]["SubscriptionPlanVariationSubscriptionPlanVariationDataStruct"];
            type: string;
            /** Format: date-time */
            updated_at: string;
            /** Format: int64 */
            version: number;
        };
        SubscriptionPlanVariationDataStruct: {
            name: string;
            phases: components["schemas"]["Phase"][];
            subscription_plan_id: string;
        };
        SubscriptionPlanVariationSubscriptionPlanVariationDataStruct: {
            name: string;
            phases: components["schemas"]["Phase"][];
            subscription_plan_id: string;
        };
        Tax: {
            /** Format: int64 */
            CompanyID: number;
            /** Format: date-time */
            CreatedAt: string;
            DeletedAt: components["schemas"]["DeletedAt"];
            Enabled: boolean;
            /** Format: int64 */
            ID: number;
            Name: string;
            /** Format: date-time */
            UpdatedAt: string;
            Uuid: string;
            /** Format: double */
            Value: number;
        };
        TotalMoneyStruct: {
            /** Format: int64 */
            amount: number;
            currency: string;
        };
        UOMsResponseBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            results: components["schemas"]["UnitOfMeasureTranslation"][];
        };
        UnitOfMeasure: {
            Code: string;
            /** Format: int64 */
            CompanyID: number | null;
            /** Format: date-time */
            CreatedAt: string;
            DeletedAt?: components["schemas"]["DeletedAt"];
            Enabled: boolean;
            /** Format: int64 */
            ID: number;
            UnitOfMeasureTranslation: components["schemas"]["UnitOfMeasureTranslation"];
            /** Format: date-time */
            UpdatedAt: string;
        };
        UnitOfMeasureTranslation: {
            /** Format: int64 */
            BaseId: number;
            /** Format: date-time */
            CreatedAt: string;
            DeletedAt?: components["schemas"]["DeletedAt"];
            /** Format: int64 */
            ID: number;
            LanguageCode: string;
            Name: string;
            UnitOfMeasure: components["schemas"]["UnitOfMeasure"];
            /** Format: date-time */
            UpdatedAt: string;
        };
        UpdateCredentialsPluginRequestBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            credentials: string;
        };
        UpsertItemPriceRequestBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            itemPrice: components["schemas"]["ItemPrice"];
        };
        UpsertPriceListRequestBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            itemPriceList: components["schemas"]["ItemPriceList"];
        };
        User: {
            Administrator: components["schemas"]["Administrator"];
            Clients: components["schemas"]["Client"][];
            Companies: components["schemas"]["Company"][];
            /** Format: date-time */
            CreatedAt: string;
            DeletedAt: components["schemas"]["DeletedAt"];
            /** Format: int64 */
            ID: number;
            Identifier: string;
            LastLogin: components["schemas"]["NullTime"];
            Roles: components["schemas"]["Role"][];
            /** Format: date-time */
            UpdatedAt: string;
            Uuid: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    "get-account": {
        parameters: {
            query?: never;
            header?: {
                Authorization?: string;
                "Active-Company"?: string;
                "User-Session-Uuid"?: string;
                Role?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AccountResponseBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "sign-in": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SignInRequestBody"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SignInResponseBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    companies: {
        parameters: {
            query: {
                page: string;
                size: string;
                query?: string;
            };
            header?: {
                Authorization?: string;
                "Active-Company"?: string;
                "User-Session-Uuid"?: string;
                Role?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginationResponsePaginationResultListCompanyBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "cuatropf-subscription": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                companyUuid: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CuatropfSubscriptionRequestBody"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseMessageBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "get-greeting-by-name": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description Name to greet
                 * @example world
                 */
                name: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GreetingOutputBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "payment-webhook": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PaymentWeebhookRequestBody"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseMessageBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    plugins: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PluginsResponseBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "add-plugin": {
        parameters: {
            query?: never;
            header?: {
                Authorization?: string;
                "Active-Company"?: string;
                "User-Session-Uuid"?: string;
                Role?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AddPluginRequestBody"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AddPluginResponseBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "get-plugin": {
        parameters: {
            query?: never;
            header?: {
                Authorization?: string;
                "Active-Company"?: string;
                "User-Session-Uuid"?: string;
                Role?: string;
            };
            path: {
                plugin: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PluginDetailResponseBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "update-plugin-credentials": {
        parameters: {
            query?: never;
            header?: {
                Authorization?: string;
                "Active-Company"?: string;
                "User-Session-Uuid"?: string;
                Role?: string;
            };
            path: {
                plugin: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateCredentialsPluginRequestBody"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseMessageBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "client-sales-orders": {
        parameters: {
            query: {
                page: string;
                size: string;
                query?: string;
            };
            header?: {
                Authorization?: string;
                "Active-Company"?: string;
                "User-Session-Uuid"?: string;
                Role?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginationResponsePaginationResultListSalesOrderBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "sale-order-detail": {
        parameters: {
            query?: never;
            header?: {
                Authorization?: string;
                "Active-Company"?: string;
                "User-Session-Uuid"?: string;
                Role?: string;
            };
            path: {
                code: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EntityResponseResponseSalesOrderDetailBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "cancel-square-subscription": {
        parameters: {
            query?: never;
            header?: {
                Authorization?: string;
                "Active-Company"?: string;
                "User-Session-Uuid"?: string;
                Role?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["RequestSubscriptionCancelBody"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseMessageBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "get-catalog-square": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SquareCatalogResponseBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "get-object-square": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                object_id: string;
                uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SquareObjectResponseBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "create-item": {
        parameters: {
            query?: never;
            header?: {
                Authorization?: string;
                "Active-Company"?: string;
                "User-Session-Uuid"?: string;
                Role?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateItemRequestBody"];
            };
        };
        responses: {
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseMessageBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "item-group": {
        parameters: {
            query: {
                page: string;
                size: string;
                query?: string;
            };
            header?: {
                Authorization?: string;
                "Active-Company"?: string;
                "User-Session-Uuid"?: string;
                Role?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginationResponsePaginationResultListItemGroupBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "update-item-price": {
        parameters: {
            query?: never;
            header?: {
                Authorization?: string;
                "Active-Company"?: string;
                "User-Session-Uuid"?: string;
                Role?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpsertItemPriceRequestBody"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseMessageBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "create-item-price": {
        parameters: {
            query?: never;
            header?: {
                Authorization?: string;
                "Active-Company"?: string;
                "User-Session-Uuid"?: string;
                Role?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpsertItemPriceRequestBody"];
            };
        };
        responses: {
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseMessageBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "get-item-prices": {
        parameters: {
            query: {
                page: string;
                size: string;
                query?: string;
            };
            header?: {
                Authorization?: string;
                "Active-Company"?: string;
                "User-Session-Uuid"?: string;
                Role?: string;
            };
            path: {
                itemCode: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginationResponsePaginationResultListItemPriceBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "get-price-lists": {
        parameters: {
            query: {
                page: string;
                size: string;
                query?: string;
            };
            header?: {
                Authorization?: string;
                "Active-Company"?: string;
                "User-Session-Uuid"?: string;
                Role?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginationResponsePaginationResultListItemPriceListBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "update-item-price-list": {
        parameters: {
            query?: never;
            header?: {
                Authorization?: string;
                "Active-Company"?: string;
                "User-Session-Uuid"?: string;
                Role?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpsertPriceListRequestBody"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseMessageBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "create-item-price-list": {
        parameters: {
            query?: never;
            header?: {
                Authorization?: string;
                "Active-Company"?: string;
                "User-Session-Uuid"?: string;
                Role?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpsertPriceListRequestBody"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseMessageBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "get-item-detail": {
        parameters: {
            query?: never;
            header?: {
                Authorization?: string;
                "Active-Company"?: string;
                "User-Session-Uuid"?: string;
                Role?: string;
            };
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EntityResponseResultEntityItemBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    uom: {
        parameters: {
            query?: {
                query?: string;
            };
            header?: {
                Authorization?: string;
                "Active-Company"?: string;
                "User-Session-Uuid"?: string;
                Role?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UOMsResponseBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
}
